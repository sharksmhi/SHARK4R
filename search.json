[{"path":"https://sharksmhi.github.io/SHARK4R/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 sharksmhi Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/articles/quality_control.html","id":"quality-control","dir":"Articles","previous_headings":"","what":"Quality Control","title":"Quality Control of SHARK Data","text":"Listed functions can used quality control SHARK data.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/articles/quality_control.html","id":"check-required-fields","dir":"Articles","previous_headings":"Quality Control","what":"Check required fields","title":"Quality Control of SHARK Data","text":"check_datatype() check global SHARK required fields present occurrence table values missing. functions returns dataframe errors ().","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/articles/quality_control.html","id":"plot-points-on-a-map","dir":"Articles","previous_headings":"Quality Control","what":"Plot points on a map","title":"Quality Control of SHARK Data","text":"plot_map() generate ggplot2 map occurrence records, plot_map_leaflet() creates zoomable interactive Leaflet map.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/articles/quality_control.html","id":"check-points-on-land","dir":"Articles","previous_headings":"Quality Control","what":"Check points on land","title":"Quality Control of SHARK Data","text":"check_onland() uses xylookup web service internally uses land polygons OpenStreetMap check points located land. shapefiles can used well.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/articles/quality_control.html","id":"check-depth","dir":"Articles","previous_headings":"Quality Control","what":"Check depth","title":"Quality Control of SHARK Data","text":"check_depth() uses xylookup web service identify records potentially invalid depths. Multiple checks performed function: missing depth column (warning) empty depth column (warning) depth values can’t converted numbers (error) values larger depth value bathymetry layer, applying provided depth margin (error) depth values negative shore points, applying provided shoremargin (error) minimum depth greater maximum depth (error)","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/articles/quality_control.html","id":"check-outliers","dir":"Articles","previous_headings":"Quality Control","what":"Check outliers","title":"Quality Control of SHARK Data","text":"check_outliers_dataset() use qc-service web service identify records statistical outliers. species outlier checks performed environmental data (bathymetry, sea surface salinity sea surface temperature) well spatially. Outliers identified points deviate six times median absolute deviation (MAD) three times interquartile range (IQR) median. list extra field debug level output report provides relevant statistics outlier analysis based. report also gives overview outliers. Outliers can plotted plot_outliers(report)","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/articles/quality_control.html","id":"irfcb-functions","dir":"Articles","previous_headings":"Quality Control","what":"iRfcb functions","title":"Quality Control of SHARK Data","text":"positions_are_near_land() which_basin() functions sourced iRfcb package, can used geospatial quality control SHARK data.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/articles/quality_control.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"Quality Control of SHARK Data","text":"","code":"## To cite package 'SHARK4R' in publications use: ##  ##   Markus Lindh, Anders Torstensson (2025). SHARK4R: Retrieving, ##   Analyzing, and Validating Marine Data from SHARK and Nordic ##   Microalgae. R package version 0.1.7.9000. ##   https://doi.org/10.5281/zenodo.14169399 ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {SHARK4R: Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae}, ##     author = {Markus Lindh and Anders Torstensson}, ##     year = {2025}, ##     note = {R package version 0.1.7.9000}, ##     url = {https://doi.org/10.5281/zenodo.14169399}, ##   }"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_algaebase_data.html","id":"algaebase","dir":"Articles","previous_headings":"","what":"AlgaeBase","title":"Retrieve Taxonomic Data From AlgaeBase","text":"AlgaeBase comprehensive database containing information wide variety algae species, including terrestrial, marine, freshwater organisms, emphasis marine botany. AlgaeBase continually updated funded various phycological societies, contributions researchers institutions worldwide. can accessed via web interface API, demonstrated tutorial using SHARK4R. Please note authors SHARK4R affiliated AlgaeBase.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_algaebase_data.html","id":"installation","dir":"Articles","previous_headings":"Getting Started","what":"Installation","title":"Retrieve Taxonomic Data From AlgaeBase","text":"can install latest version package GitHub using remotes package: Load SHARK4R tibble libraries:","code":"# install.packages(\"remotes\") remotes::install_github(\"sharksmhi/SHARK4R\",                         ref = remotes::github_release(),                         dependencies = TRUE) library(SHARK4R) library(dplyr)"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_algaebase_data.html","id":"algaebase-api-key","dir":"Articles","previous_headings":"Getting Started","what":"AlgaeBase API Key","title":"Retrieve Taxonomic Data From AlgaeBase","text":"AlgaeBase requires subscription key access API. obtain key, please visit API documentation. example , key retrieved environment variable.","code":"# Retrieve the API key algaebase_key <- Sys.getenv(\"ALGAEBASE_KEY\")"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_algaebase_data.html","id":"match-genus-name","dir":"Articles","previous_headings":"","what":"Match Genus Name","title":"Retrieve Taxonomic Data From AlgaeBase","text":"Taxonomic records can retrieved individual genera names using get_algaebase_genus() function.","code":"# Match a genus name with AlgaeBase API genus_records <- get_algaebase_genus(genus = \"Gymnodinium\",                                      subscription_key = algaebase_key)  # Print the result print(genus_records) ##     kingdom         phylum       class         order         family    id ## 1 Chromista Dinoflagellata Dinophyceae Gymnodiniales Gymnodiniaceae 43632 ##         genus species infrasp                 taxonomic_status ## 1 Gymnodinium      NA      NA currently accepted taxonomically ##   nomenclatural_status currently_accepted accepted_name genus_only  input_name ## 1                   NA                  1            NA          1 Gymnodinium ##   input_match taxon_rank   mod_date                 long_name authorship ## 1           1      genus 2024-06-13 Gymnodinium F.Stein, 1878    F.Stein"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_algaebase_data.html","id":"match-species-name","dir":"Articles","previous_headings":"","what":"Match Species Name","title":"Retrieve Taxonomic Data From AlgaeBase","text":"Taxonomic records can retrieved individual species names using get_algaebase_species() function.","code":"# Match a species with AlgaeBase API species_records <- get_algaebase_species(genus = \"Tripos\",                                          species = \"muelleri\",                                          subscription_key = algaebase_key)  # Print the result print(species_records) ##      id   accepted_name      input_name input_match currently_accepted ## 1 65254 Tripos muelleri Tripos muelleri           1                  1 ##   genus_only   kingdom         phylum       class         order      family ## 1          0 Chromista Dinoflagellata Dinophyceae Gonyaulacales Ceratiaceae ##    genus  species infrasp            long_name                 taxonomic_status ## 1 Tripos muelleri      NA Tripos muelleri Bory currently accepted taxonomically ##   nomenclatural_status taxon_rank   mod_date authorship ## 1                 <NA>    species 2024-05-28       Bory"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_algaebase_data.html","id":"match-multiple-scientific-names","dir":"Articles","previous_headings":"","what":"Match Multiple Scientific Names","title":"Retrieve Taxonomic Data From AlgaeBase","text":"Multiple names can matched match_algaebase() function. scientific names need parsed genus species names passed API, can achieved parse_scientific_names() function.","code":"# Retrieve all phytoplankton data from April 2015 shark_data <- get_shark_data(fromYear = 2015,                               toYear = 2015,                              months = 4,                               dataTypes = c(\"Phytoplankton\"),                              verbose = FALSE)  # Randomly select 10 rows from the shark_data dataframe random_rows <- shark_data[sample(nrow(shark_data), 10), ]  # Parse scientific names into genus and species names parsed_taxa <- parse_scientific_names(random_rows$scientific_name)  # Print the parsed data print(parsed_taxa) ##              genus    species ## 1        Guinardia delicatula ## 2    Monoraphidium  contortum ## 3      Flagellates            ## 4    Thalassiosira    baltica ## 5           Amylax triacantha ## 6      Flagellates            ## 7      Karlodinium     micrum ## 8  Cryptomonadales            ## 9         Octactis   speculum ## 10      Mesodinium     rubrum # Match the taxa with AlgaeBase algaebase_match <- match_algaebase(genus = parsed_taxa$genus,                                    species = parsed_taxa$species,                                    subscription_key = algaebase_key,                                    verbose = FALSE)  # Print the result tibble(algaebase_match) ## # A tibble: 9 × 20 ##   genus   species     id accepted_name input_name input_match currently_accepted ##   <chr>   <chr>    <int> <chr>         <chr>            <dbl>              <dbl> ## 1 Amylax  triaca…  52120 Amylax triac… Amylax tr…           1                  1 ## 2 Crypto… NA          NA NA            NA                  NA                 NA ## 3 Flagel… NA          NA NA            NA                  NA                 NA ## 4 Guinar… delica…  43911 Guinardia de… Guinardia…           1                  1 ## 5 Karlod… micrum   44335 Karlodinium … Karlodini…           1                  0 ## 6 Mesodi… rubrum   56539 Mesodinium r… Mesodiniu…           1                  1 ## 7 Monora… contor…  27719 Monoraphidiu… Monoraphi…           1                  1 ## 8 Octact… specul… 164546 Octactis spe… Octactis …           1                  1 ## 9 Thalas… baltica  39921 Thalassiosir… Thalassio…           1                  1 ## # ℹ 13 more variables: genus_only <dbl>, kingdom <chr>, phylum <chr>, ## #   class <chr>, order <chr>, family <chr>, infrasp <lgl>, long_name <chr>, ## #   taxonomic_status <chr>, nomenclatural_status <lgl>, taxon_rank <chr>, ## #   mod_date <date>, authorship <chr>"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_algaebase_data.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"Retrieve Taxonomic Data From AlgaeBase","text":"","code":"## To cite package 'SHARK4R' in publications use: ##  ##   Markus Lindh, Anders Torstensson (2025). SHARK4R: Retrieving, ##   Analyzing, and Validating Marine Data from SHARK and Nordic ##   Microalgae. R package version 0.1.7.9000. ##   https://doi.org/10.5281/zenodo.14169399 ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {SHARK4R: Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae}, ##     author = {Markus Lindh and Anders Torstensson}, ##     year = {2025}, ##     note = {R package version 0.1.7.9000}, ##     url = {https://doi.org/10.5281/zenodo.14169399}, ##   }"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_dyntaxa_data.html","id":"dyntaxa","dir":"Articles","previous_headings":"","what":"Dyntaxa","title":"Retrieve Taxonomic Data From Dyntaxa","text":"Dyntaxa taxonomic database Swedish organisms hosted SLU Artdatabanken, providing information names relationships. database includes details current classification, recommended names, commonly used synonymous misapplied names. Dyntaxa continuously updated new species Sweden, new Swedish names, synonymous scientific names, new data relationships. data Dyntaxa serves foundation framework taxonomic information SHARK. can accessed via web interface API, demonstrated tutorial using SHARK4R. Please note authors SHARK4R affiliated Dyntaxa.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_dyntaxa_data.html","id":"installation","dir":"Articles","previous_headings":"Getting Started","what":"Installation","title":"Retrieve Taxonomic Data From Dyntaxa","text":"can install latest version package GitHub using remotes package: Load SHARK4R, tibble dplyr libraries:","code":"# install.packages(\"remotes\") remotes::install_github(\"sharksmhi/SHARK4R\",                         ref = remotes::github_release(),                         dependencies = TRUE) library(SHARK4R) library(dplyr)"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_dyntaxa_data.html","id":"retrieve-taxonomy-table-from-shark","dir":"Articles","previous_headings":"Getting Started","what":"Retrieve Taxonomy Table from SHARK","title":"Retrieve Taxonomic Data From Dyntaxa","text":"Taxon data tables can retrieved filtering options available SHARK. see available filtering options, please refer get_shark_options() Retrieve Data SHARK tutorial.","code":"# Retrieve taxonomy reports for phytoplankton between 2019 and 2020 shark_taxon <- get_shark_data(tableView = \"report_taxon\",                               fromYear = 2019,                               toYear = 2020,                               dataTypes = \"Phytoplankton\",                               verbose = FALSE)  # Print data print(shark_taxon) ## # A tibble: 663 × 6 ##    reported_scientific_name  scientific_name dyntaxa_id aphia_id taxon_hierarchy ##    <chr>                     <chr>                <dbl>    <dbl> <chr>           ##  1 Acanthoceras zachariasii  Acanthoceras z…     264148   178990 Chromista - Sa… ##  2 Acanthoica quattrospina   Acanthoica qua…     236952   235802 Chromista - Ha… ##  3 Acanthostomella           Acanthostomella    1010638       NA Chromista - Sa… ##  4 Acanthostomella norvegica Acanthostomell…     238502   183556 Chromista - Sa… ##  5 Achnanthes                Achnanthes         1010466   149191 Chromista - Sa… ##  6 Actinastrum hantzschii    Actinastrum ha…     238839   160543 Plantae - Viri… ##  7 Actinocyclus              Actinocyclus       1010407   148944 Chromista - Sa… ##  8 Actinocyclus normanii     Actinocyclus n…     237433   148945 Chromista - Sa… ##  9 Actinocyclus octonarius   Actinocyclus o…     237434   149164 Chromista - Sa… ## 10 Actinocyclus octonarius … Actinocyclus o…     248668   162770 Chromista - Sa… ## # ℹ 653 more rows ## # ℹ 1 more variable: counted_rows <dbl> # Retrieve all phytoplankton data from July 2015 shark_data <- get_shark_data(tableView = \"sharkdata_phytoplankton\",                              fromYear = 2015,                               toYear = 2015,                              months = 7,                              dataTypes = c(\"Phytoplankton\"),                              verbose = FALSE)  # Print data print(shark_data) ## # A tibble: 1,627 × 114 ##    delivery_datatype check_status_sv data_checked_by_sv visit_year visit_month ##    <chr>             <chr>           <chr>                   <dbl>       <dbl> ##  1 Phytoplankton     Klar            Leverantör               2015           7 ##  2 Phytoplankton     Klar            Leverantör               2015           7 ##  3 Phytoplankton     Klar            Leverantör               2015           7 ##  4 Phytoplankton     Klar            Leverantör               2015           7 ##  5 Phytoplankton     Klar            Leverantör               2015           7 ##  6 Phytoplankton     Klar            Leverantör               2015           7 ##  7 Phytoplankton     Klar            Leverantör               2015           7 ##  8 Phytoplankton     Klar            Leverantör               2015           7 ##  9 Phytoplankton     Klar            Leverantör               2015           7 ## 10 Phytoplankton     Klar            Leverantör               2015           7 ## # ℹ 1,617 more rows ## # ℹ 109 more variables: station_name <chr>, reported_station_name <chr>, ## #   sample_location_id <dbl>, station_id <dbl>, sample_project_name_sv <chr>, ## #   sample_orderer_name_sv <chr>, platform_code <chr>, expedition_id <dbl>, ## #   shark_sample_id_md5 <chr>, sample_date <date>, sample_time <time>, ## #   sample_latitude_dm <chr>, sample_longitude_dm <chr>, ## #   sample_latitude_dd <dbl>, sample_longitude_dd <dbl>, …"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_dyntaxa_data.html","id":"dyntaxa-api-key","dir":"Articles","previous_headings":"Getting Started","what":"Dyntaxa API Key","title":"Retrieve Taxonomic Data From Dyntaxa","text":"Dyntaxa requires subscription key access API. obtain key, sign taxonomy product SLU Swedish Species Information Centre´s Developer Portal. example , key retrieved environment variable.","code":"# Retrieve the API key dyntaxa_key <- Sys.getenv(\"DYNTAXA_KEY\")"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_dyntaxa_data.html","id":"update-shark-taxonomy-data","dir":"Articles","previous_headings":"","what":"Update SHARK Taxonomy Data","title":"Retrieve Taxonomic Data From Dyntaxa","text":"taxonomic data downloaded SHARK outdated, can updated latest Dyntaxa information using SHARK4R. Alternatively, data can retrieved WoRMS. details, see WoRMS Tutorial.","code":"# Update taxonomy information for the retrieved phytoplankton data updated_taxonomy <- update_dyntaxa_taxonomy(   dyntaxa_ids = shark_data$dyntaxa_id,   subscription_key = dyntaxa_key,   verbose = FALSE)  # Print the updated taxonomy data print(updated_taxonomy) ## # A tibble: 1,627 × 10 ##    dyntaxa_id scientific_name taxon_kingdom taxon_phylum taxon_class taxon_order ##         <dbl> <chr>           <chr>         <chr>        <chr>       <chr>       ##  1     238225 Alexandrium ps… Chromista     Miozoa       Dinophyceae Gonyaulaca… ##  2     238302 Tripos fusus    Chromista     Miozoa       Dinophyceae Gonyaulaca… ##  3     238302 Tripos fusus    Chromista     Miozoa       Dinophyceae Gonyaulaca… ##  4     238307 Tripos lineatus Chromista     Miozoa       Dinophyceae Gonyaulaca… ##  5     238308 Tripos longipes Chromista     Miozoa       Dinophyceae Gonyaulaca… ##  6     238319 Tripos muelleri Chromista     Miozoa       Dinophyceae Gonyaulaca… ##  7    6018294 Chaetoceros so… Chromista     Gyrista      Mediophyce… Chaetocero… ##  8    5000054 Ciliophora      Chromista     Ciliophora   NA          NA          ##  9    5000054 Ciliophora      Chromista     Ciliophora   NA          NA          ## 10    4000164 Coscinodiscoph… Chromista     Gyrista      Coscinodis… NA          ## # ℹ 1,617 more rows ## # ℹ 4 more variables: taxon_family <chr>, taxon_genus <chr>, ## #   taxon_species <chr>, taxon_hierarchy <chr>"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_dyntaxa_data.html","id":"match-taxon-names","dir":"Articles","previous_headings":"","what":"Match Taxon Names","title":"Retrieve Taxonomic Data From Dyntaxa","text":"","code":"# Randomly select 10 phytoplankton taxa from shark_taxon taxon_names <- sample(shark_taxon$scientific_name, size = 10)  # Match taxon_names with Dyntaxa API matches <- match_taxon_name(taxon_names = taxon_names,                              subscription_key = dyntaxa_key,                              multiple_options = FALSE,                             verbose = FALSE)  # Print the result tibble(matches) ## # A tibble: 10 × 5 ##    search_pattern             taxon_id best_match              author valid_name ##    <chr>                         <int> <chr>                   <chr>  <chr>      ##  1 Cuspidothrix issatschenkoi   263645 Cuspidothrix issatsche… (Usač… Cuspidoth… ##  2 Oblea                       1010594 Oblea                   Balec… Oblea      ##  3 Chrysotila carterae          236939 Chrysotila carterae     (Braa… Chrysotil… ##  4 Bacillaria paxillifera       237763 Bacillaria paxillifera  (O.F.… Bacillari… ##  5 Protoperidinium conicoides   238248 Protoperidinium conico… (Paul… Protoperi… ##  6 Scrippsiella                1010578 Scrippsiella            Balec… Scrippsie… ##  7 Binuclearia lauterbornii     238927 Binuclearia lauterborn… (Schm… Binuclear… ##  8 Dictyochales                3000573 Dictyochales            Haeck… Dictyocha… ##  9 Diatoma vulgaris             238027 Diatoma vulgaris        Bory   Diatoma v… ## 10 Pseudopediastrum boryanum    257418 Pseudopediastrum borya… (Turp… Pseudoped…"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_dyntaxa_data.html","id":"retrieve-taxonomic-information","dir":"Articles","previous_headings":"","what":"Retrieve Taxonomic information","title":"Retrieve Taxonomic Data From Dyntaxa","text":"Taxonomic records can retrieved individual taxa using get_dyntaxa_records() function.","code":"# Get all Dyntaxa IDs dyntaxa_id <- unique(matches$taxon_id)  # Remove potential NAs dyntaxa_id <- dyntaxa_id[!is.na(dyntaxa_id)]  # Get Dyntaxa records dyntaxa_records <- get_dyntaxa_records(taxon_ids = dyntaxa_id,                                        subscription_key = dyntaxa_key)  # Print records tibble(dyntaxa_records) ## # A tibble: 10 × 24 ##    taxonId parentId secondaryParents sortOrder isMicrospecies externalComment    ##      <int>    <int> <list>               <int> <lgl>          <chr>              ##  1  236939  6018284 <list [0]>           68775 FALSE           NA                ##  2  237763  1010465 <list [0]>           71257 FALSE          \"Illustration (LM… ##  3  238027  1010523 <list [0]>           73171 FALSE          \"Illustration (LM… ##  4  238248  1010596 <list [0]>           69720 FALSE           NA                ##  5  238927  1016130 <list [0]>          113141 FALSE           NA                ##  6  257418  6001140 <list [0]>          112276 FALSE           NA                ##  7  263645  1016291 <list [0]>           67477 FALSE          \"2005. Published … ##  8 1010578  2003230 <list [0]>           69661 FALSE           NA                ##  9 1010594  2003235 <list [0]>           69704 FALSE           NA                ## 10 3000573  4000161 <list [0]>           71017 FALSE           NA                ## # ℹ 18 more variables: redlistCategory <lgl>, excludeFromReportingSystem <lgl>, ## #   nrOfChilds <int>, names <list>, typedRelations.parentRelations <list>, ## #   typedRelations.childRelations <list>, status.id <int>, status.value <chr>, ## #   status.name <chr>, statusReason.id <int>, statusReason.value <chr>, ## #   statusReason.name <chr>, category.id <int>, category.value <chr>, ## #   category.name <chr>, type.id <int>, type.value <chr>, type.name <chr>"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_dyntaxa_data.html","id":"retrieve-parent-ids","dir":"Articles","previous_headings":"","what":"Retrieve Parent IDs","title":"Retrieve Taxonomic Data From Dyntaxa","text":"parent taxa Dyntaxa ID can retrieved using get_dyntaxa_parent_ids() function.","code":"# Get all parents parents_id <- get_dyntaxa_parent_ids(taxon_ids = dyntaxa_id,                                       subscription_key = dyntaxa_key,                                      verbose = FALSE)  # List the IDs print(parents_id) ## [[1]] ## [1] 5000052 5000053 4000147 6020337 3000511 6012635 1016291  263645 ##  ## [[2]] ##  [1] 5000055 6011755 6011756 6011759 6011678 5000062 6011725 6011726 4000169 ## [10] 3000850 2003235 1010594 ##  ## [[3]] ## [1] 5000055 6011754 5000056 4000153 6012363 3000558 2003122 6018284  236939 ##  ## [[4]] ##  [1] 5000055 6011755 6011756 6011758 6322929 5000104 6323134 6323136 4000165 ## [10] 3000830 3000599 2003196 1010465  237763 ##  ## [[5]] ##  [1] 5000055 6011755 6011756 6011759 6011678 5000062 6011725 6011726 4000169 ## [10] 3000850 2003235 1010596  238248 ##  ## [[6]] ##  [1] 5000055 6011755 6011756 6011759 6011678 5000062 6011725 6011726 4000169 ## [10] 3000850 2003230 1010578 ##  ## [[7]] ## [1] 5000045 6000581 6000582 5000046 4000178 3000405 2003796 1016130  238927 ##  ## [[8]] ##  [1] 5000055 6011755 6011756 6011758 6322929 5000104 6323134 6323135 4000161 ## [10] 3000573 ##  ## [[9]] ##  [1] 5000055 6011755 6011756 6011758 6322929 5000104 6323134 6323136 4000165 ## [10] 4000166 3000610 2003217 1010523  238027 ##  ## [[10]] ## [1] 5000045 6000581 6000582 5000046 4000128 3000412 2003286 6001140  257418"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_dyntaxa_data.html","id":"construct-complete-taxonomic-table","dir":"Articles","previous_headings":"","what":"Construct Complete Taxonomic Table","title":"Retrieve Taxonomic Data From Dyntaxa","text":"comprehensive taxonomic table, including related taxa, can created construct_dyntaxa_table() function. Use add_synonyms parameter include synonyms, add_parents add_descendants parameters include parent descendant taxa, respectively. Taxon IDs missing DwC-export downloaded get_dyntaxa_dwca() (e.g. species complex pseudotaxon), can matched using add_missing_taxa argument. Additionally, complete hierarchy information can added string parent taxa separated “-” using add_hierarchy argument.","code":"# Retrieve complete taxonomic table (including parents and descendants) taxonomy_table <- construct_dyntaxa_table(taxon_ids = dyntaxa_id,                                            subscription_key = dyntaxa_key,                                            shark_output = FALSE,                                            add_parents = TRUE,                                           add_synonyms = TRUE,                                            add_descendants = TRUE,                                           add_descendants_rank = \"genus\",                                           add_missing_taxa = FALSE,                                           add_hierarchy = FALSE,                                           verbose = FALSE)  # Print the taxonomy table as a tibble tibble(taxonomy_table) ## # A tibble: 287 × 16 ##    taxonId        acceptedNameUsageID parentNameUsageID scientificName taxonRank ##    <chr>          <chr>               <chr>             <chr>          <chr>     ##  1 urn:lsid:dynt… urn:lsid:dyntaxa.s… urn:lsid:dyntaxa… Chrysotila ca… species   ##  2 urn:lsid:dynt… urn:lsid:dyntaxa.s… urn:lsid:dyntaxa… Scrippsiella   genus     ##  3 urn:lsid:dynt… urn:lsid:dyntaxa.s… urn:lsid:dyntaxa… Pseudopediast… species   ##  4 urn:lsid:dynt… urn:lsid:dyntaxa.s… urn:lsid:dyntaxa… Binuclearia l… species   ##  5 urn:lsid:dynt… urn:lsid:dyntaxa.s… urn:lsid:dyntaxa… Oblea          genus     ##  6 urn:lsid:dynt… urn:lsid:dyntaxa.s… urn:lsid:dyntaxa… Diatoma vulga… species   ##  7 urn:lsid:dynt… urn:lsid:dyntaxa.s… urn:lsid:dyntaxa… Cuspidothrix … species   ##  8 urn:lsid:dynt… urn:lsid:dyntaxa.s… urn:lsid:dyntaxa… Dictyochales   order     ##  9 urn:lsid:dynt… urn:lsid:dyntaxa.s… urn:lsid:dyntaxa… Bacillaria pa… species   ## 10 urn:lsid:dynt… urn:lsid:dyntaxa.s… urn:lsid:dyntaxa… Protoperidini… species   ## # ℹ 277 more rows ## # ℹ 11 more variables: scientificNameAuthorship <chr>, taxonomicStatus <chr>, ## #   nomenclaturalStatus <chr>, taxonRemarks <chr>, kingdom <chr>, phylum <chr>, ## #   class <chr>, order <chr>, family <chr>, genus <chr>, species <chr>"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_dyntaxa_data.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"Retrieve Taxonomic Data From Dyntaxa","text":"","code":"## To cite package 'SHARK4R' in publications use: ##  ##   Markus Lindh, Anders Torstensson (2025). SHARK4R: Retrieving, ##   Analyzing, and Validating Marine Data from SHARK and Nordic ##   Microalgae. R package version 0.1.7.9000. ##   https://doi.org/10.5281/zenodo.14169399 ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {SHARK4R: Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae}, ##     author = {Markus Lindh and Anders Torstensson}, ##     year = {2025}, ##     note = {R package version 0.1.7.9000}, ##     url = {https://doi.org/10.5281/zenodo.14169399}, ##   }"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_hab_data.html","id":"ioc-unesco-databases","dir":"Articles","previous_headings":"","what":"IOC-UNESCO Databases","title":"Retrieve HAB Data From IOC-UNESCO Databases","text":"Intergovernmental Oceanographic Commission UNESCO (IOC) United Nations body dedicated supporting global ocean science, services, governance. IOC-UNESCO Taxonomic Reference List Harmful Microalgae focuses species known produce toxins exhibit toxic effects, along species suspected toxin production. toxic species list verified WoRMS ensure accurate taxonomy. IOC-UNESCO Toxins database complements list providing detailed reference information toxins, associated harmful algal events. information databases can access APIs, demonstrated tutorial using SHARK4R.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_hab_data.html","id":"installation","dir":"Articles","previous_headings":"Getting Started","what":"Installation","title":"Retrieve HAB Data From IOC-UNESCO Databases","text":"can install latest version package GitHub using remotes package: Load SHARK4R dplyr libraries:","code":"# install.packages(\"remotes\") remotes::install_github(\"sharksmhi/SHARK4R\",                         ref = remotes::github_release(),                         dependencies = TRUE) library(SHARK4R) library(dplyr)"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_hab_data.html","id":"retrieve-hab-list-from-ioc-taxonomic-list","dir":"Articles","previous_headings":"","what":"Retrieve HAB List From IOC Taxonomic List","title":"Retrieve HAB Data From IOC-UNESCO Databases","text":"complete HAB list, including scientific names AphiaIDs, can downloaded IOC-UNESCO Taxonomic Reference List Harmful Microalgae. output fields customizable function parameters—example, setting classification = FALSE excludes higher taxonomic information results.","code":"# Retrieve complete HAB list hab_list <- get_hab_list()  # Print result as tibble tibble(hab_list) ## # A tibble: 703 × 29 ##    AphiaID ScientificName      Authority AphiaID_accepted ScientificName_accep…¹ ##      <dbl> <chr>               <chr>                <dbl> <chr>                  ##  1 1653558 Aerosakkonemataceae Struneck…          1653558 Aerosakkonemataceae    ##  2  836651 Aetokthonos         S.B.Wild…           836651 Aetokthonos            ##  3  841664 Aetokthonos hydril… S.B.Wild…           841664 Aetokthonos hydrillic… ##  4  231787 Akashiwo            G.Hansen…           231787 Akashiwo               ##  5  232546 Akashiwo sanguinea  (K.Hiras…           232546 Akashiwo sanguinea     ##  6  109470 Alexandrium         Halim, 1…           109470 Alexandrium            ##  7  109707 Alexandrium affine  (H.Inoue…           109707 Alexandrium affine     ##  8  231872 Alexandrium anders… Balech, …           246835 Alexandrium andersonii ##  9  246835 Alexandrium anders… Balech, …           246835 Alexandrium andersonii ## 10  233452 Alexandrium angust… F.J.R.Ta…           109711 Alexandrium minutum    ## # ℹ 693 more rows ## # ℹ abbreviated name: ¹​ScientificName_accepted ## # ℹ 24 more variables: Authority_accepted <chr>, Fossil <dbl>, Kingdom <chr>, ## #   Phylum <chr>, Class <chr>, Order <chr>, Family <chr>, taxonRank <chr>, ## #   Genus <chr>, Subgenus <lgl>, Species <chr>, Subspecies <lgl>, Marine <dbl>, ## #   Brackish <dbl>, Fresh <dbl>, Terrestrial <dbl>, taxonomicStatus <chr>, ## #   Qualitystatus <chr>, Unacceptreason <chr>, DateLastModified <date>, …"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_hab_data.html","id":"retrieve-hab-toxins-from-ioc-toxins-database","dir":"Articles","previous_headings":"","what":"Retrieve HAB Toxins From IOC Toxins Database","title":"Retrieve HAB Data From IOC-UNESCO Databases","text":"complete Toxin list can downloaded IOC-UNESCO Toxins database using get_toxin_list() function.","code":"# Retrieve complete toxin list toxin_list <- get_toxin_list()  # Print result as tibble tibble(toxin_list) ## # A tibble: 458 × 55 ##       id toxin_group recommended_name synonyms recommended_acronym acronyms ##    <int> <chr>       <chr>            <list>   <chr>               <list>   ##  1   542 None        trial            <NULL>   NA                  <NULL>   ##  2   541 Azaspiracid azaspiracid-27   <NULL>   AZA27               <NULL>   ##  3   540 Azaspiracid azaspiracid-26   <NULL>   AZA26               <NULL>   ##  4   539 Azaspiracid azaspiracid-23   <NULL>   AZA23               <NULL>   ##  5   538 Azaspiracid azaspiracid-21   <NULL>   AZA21               <NULL>   ##  6   537 Azaspiracid azaspriracid-19  <NULL>   AZA19               <NULL>   ##  7   536 Azaspiracid azaspriacid-18   <NULL>   AZA18               <NULL>   ##  8   535 Azaspiracid azaspiracid-17   <NULL>   AZA17               <NULL>   ##  9   534 Azaspiracid azaspiracid-16   <NULL>   AZA16               <NULL>   ## 10   533 Azaspiracid azaspriacid-15   <NULL>   AZA15               <NULL>   ## # ℹ 448 more rows ## # ℹ 49 more variables: cas_number <chr>, alternative_cas_numbers <list>, ## #   formula <chr>, exact_mono_isotopic_mass <dbl>, molfile <chr>, ## #   alternative_molfiles <lgl>, smiles <chr>, alternative_smiles <list>, ## #   inchi_key <chr>, alternative_inchi_keys <lgl>, inchi <chr>, ## #   alternative_inchies <lgl>, spectra_available <lgl>, certified <lgl>, ## #   non_certified_reference_material <lgl>, chemical_analysis_research <lgl>, …"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_hab_data.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"Retrieve HAB Data From IOC-UNESCO Databases","text":"","code":"## To cite package 'SHARK4R' in publications use: ##  ##   Markus Lindh, Anders Torstensson (2025). SHARK4R: Retrieving, ##   Analyzing, and Validating Marine Data from SHARK and Nordic ##   Microalgae. R package version 0.1.7.9000. ##   https://doi.org/10.5281/zenodo.14169399 ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {SHARK4R: Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae}, ##     author = {Markus Lindh and Anders Torstensson}, ##     year = {2025}, ##     note = {R package version 0.1.7.9000}, ##     url = {https://doi.org/10.5281/zenodo.14169399}, ##   }"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_nordic_microalgae_data.html","id":"nordic-microalgae","dir":"Articles","previous_headings":"","what":"Nordic Microalgae","title":"Retrieve Data From Nordic Microalgae","text":"Nordic Microalgae online platform providing high-quality images, illustrations, detailed information aquatic microalgae related organisms Nordic region, including phytoplankton, microzooplankton, benthic microalgae. features comprehensive species checklist, --date taxonomic data linked WoRMS AlgaeBase, supplementary resources biovolume lists occurrence maps. Established 1996 supported long-term funding Swedish Research Council Swedish Biodiversity Data Infrastructure (SBDI). data Nordic Microalgae accessible API. examples demonstrating extract data using SHARK4R package.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_nordic_microalgae_data.html","id":"installation","dir":"Articles","previous_headings":"Getting Started","what":"Installation","title":"Retrieve Data From Nordic Microalgae","text":"can install latest version package GitHub using remotes package: Load SHARK4R tibble libraries:","code":"# install.packages(\"remotes\") remotes::install_github(\"sharksmhi/SHARK4R\",                         ref = remotes::github_release(),                         dependencies = TRUE) library(SHARK4R) library(dplyr)"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_nordic_microalgae_data.html","id":"retrieve-complete-nordic-microalgae-taxon-table","dir":"Articles","previous_headings":"","what":"Retrieve Complete Nordic Microalgae Taxon Table","title":"Retrieve Data From Nordic Microalgae","text":"complete Nordic Microalgae taxa list can retrieved API. full taxonomic information can accessed unparsed list enabling unparsed parameter.","code":"# Get taxa information taxa <- get_nua_taxa(unparsed = FALSE)  # Print data tibble(taxa) ## # A tibble: 6,852 × 5 ##    scientific_name           authority                       rank  slug  nua_url ##    <chr>                     <chr>                           <chr> <chr> <chr>   ##  1 Abollifer                 Vørs, 1992                      Genus abol… https:… ##  2 Abollifer prolabens       Vørs, 1992                      Spec… abol… https:… ##  3 Acanthoceras              Honigm., 1910                   Genus acan… https:… ##  4 Acanthoceras zachariasii  (Brun) Simonsen, 1979           Spec… acan… https:… ##  5 Acanthocerataceae         Round, Crawford & Mann, 1990    Fami… acan… https:… ##  6 Acanthocorbis             S.Hara & E.Takahashi, 1984      Genus acan… https:… ##  7 Acanthocorbis apoda       (Leadbeater) Hara & Takahashi,… Spec… acan… https:… ##  8 Acanthocorbis asymmetrica (Thomsen) Hara & Takahashi, 19… Spec… acan… https:… ##  9 Acanthocorbis campanula   (Espeland) Thomsen, 1991        Spec… acan… https:… ## 10 Acanthocorbis haurakiana  Thomsen, 1991                   Spec… acan… https:… ## # ℹ 6,842 more rows"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_nordic_microalgae_data.html","id":"get-nordic-microalgae-external-links-or-facts","dir":"Articles","previous_headings":"","what":"Get Nordic Microalgae External Links or Facts","title":"Retrieve Data From Nordic Microalgae","text":"taxon sheet Nordic Microalgae contains facts, links external webpages (e.g. AlgaeBase, WoRMS Dyntaxa). links can retrieved API. full list facts can accessed unparsed list setting unparsed parameter TRUE.","code":"# Randomly select 10 taxa from shark_taxon$scientific_name slugs <- sample(taxa$slug, size = 10)  # Get external links external_links <- get_nua_external_links(slugs,                                           verbose = FALSE,                                           unparsed = FALSE)  # Print list tibble(external_links) ## # A tibble: 56 × 6 ##    slug               provider  label        external_id external_url collection ##    <chr>              <chr>     <chr>        <chr>       <chr>        <chr>      ##  1 ptychocylis-minor  AlgaeBase AlgaeBase    141096      https://www… External … ##  2 ptychocylis-minor  Dyntaxa   Dyntaxa      238510      https://nam… External … ##  3 ptychocylis-minor  ENA       ENA          1925337     https://www… External … ##  4 ptychocylis-minor  GBIF      GBIF         7865442     https://www… External … ##  5 ptychocylis-minor  NCBI      NCBI         1925337     https://www… External … ##  6 ptychocylis-minor  WoRMS     WoRMS        427510      https://www… External … ##  7 ptychocylis-minor  PR2       PR2: Ptycho… Ptychocyli… https://app… External … ##  8 rusalka-fusiformis AlgaeBase AlgaeBase    133790      https://www… External … ##  9 rusalka-fusiformis Dyntaxa   Dyntaxa      257549      https://nam… External … ## 10 rusalka-fusiformis ENA       ENA          71744       https://www… External … ## # ℹ 46 more rows"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_nordic_microalgae_data.html","id":"get-nordic-microalgae-harmfulness-information","dir":"Articles","previous_headings":"","what":"Get Nordic Microalgae Harmfulness Information","title":"Retrieve Data From Nordic Microalgae","text":"Taxa listed IOC-UNESCO Taxonomic Reference List Harmful Micro Algae contain information harmfulness. information can retrieved API.","code":"# Get external links harmfulness <- get_nua_harmfulness(c(\"dinophysis-acuta\",                                       \"alexandrium-ostenfeldii\"),                                     verbose = FALSE)  # Print list tibble(harmfulness) ## # A tibble: 11 × 6 ##    slug                    provider   label  external_id external_url collection ##    <chr>                   <chr>      <chr>  <chr>       <chr>        <chr>      ##  1 dinophysis-acuta        IOC        IOC H… 109604      https://www… Harmful a… ##  2 dinophysis-acuta        IOC-UNESCO IOC-U… 6           https://tox… Harmful a… ##  3 dinophysis-acuta        IOC-UNESCO IOC-U… 1           https://tox… Harmful a… ##  4 dinophysis-acuta        IOC-UNESCO IOC-U… 5           https://tox… Harmful a… ##  5 alexandrium-ostenfeldii IOC        IOC H… 109712      https://www… Harmful a… ##  6 alexandrium-ostenfeldii IOC-UNESCO IOC-U… 464         https://tox… Harmful a… ##  7 alexandrium-ostenfeldii IOC-UNESCO IOC-U… 463         https://tox… Harmful a… ##  8 alexandrium-ostenfeldii IOC-UNESCO IOC-U… 462         https://tox… Harmful a… ##  9 alexandrium-ostenfeldii IOC-UNESCO IOC-U… 12          https://tox… Harmful a… ## 10 alexandrium-ostenfeldii IOC-UNESCO IOC-U… 15          https://tox… Harmful a… ## 11 alexandrium-ostenfeldii IOC-UNESCO IOC-U… 17          https://tox… Harmful a…"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_nordic_microalgae_data.html","id":"get-nordic-microalgae-media-links","dir":"Articles","previous_headings":"","what":"Get Nordic Microalgae Media Links","title":"Retrieve Data From Nordic Microalgae","text":"Links images present Nordic Microalgae can retrieved API. images available four sizes: original (o), small (s), medium (m), large (l). Complete media information can retrieved unparsed list setting unparsed parameter TRUE.","code":"# Get all media links media <- get_nua_media_links(unparsed = FALSE)  # Print list tibble(media) ## # A tibble: 2,413 × 10 ##    slug              image_l_url image_o_url image_s_url image_m_url contributor ##    <chr>             <chr>       <chr>       <chr>       <chr>       <chr>       ##  1 NA                https://no… https://no… https://no… https://no… Per Wilhel… ##  2 NA                https://no… https://no… https://no… https://no… Per Wilhel… ##  3 NA                https://no… https://no… https://no… https://no… Per Wilhel… ##  4 dinophysis-odiosa https://no… https://no… https://no… https://no… Susanne Bu… ##  5 ebria-tripartita  https://no… https://no… https://no… https://no… Susanne Bu… ##  6 ebria-tripartita  https://no… https://no… https://no… https://no… Susanne Bu… ##  7 ebria-tripartita  https://no… https://no… https://no… https://no… Susanne Bu… ##  8 ebria-tripartita  https://no… https://no… https://no… https://no… Susanne Bu… ##  9 dicroerisma-psil… https://no… https://no… https://no… https://no… Susanne Bu… ## 10 volvox            https://no… https://no… https://no… https://no… Per Wilhel… ## # ℹ 2,403 more rows ## # ℹ 4 more variables: photographer_artist <chr>, copyright_holder <chr>, ## #   license <chr>, galleries <chr>"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_nordic_microalgae_data.html","id":"get-nomp-and-eg-phyto-biovolume-lists","dir":"Articles","previous_headings":"","what":"Get NOMP and EG Phyto Biovolume lists","title":"Retrieve Data From Nordic Microalgae","text":"standardize phytoplankton monitoring efforts Baltic Sea, Skagerrak, North Sea, various lists containing size class information taxon established. lists can retrieved directly R using SHARK4R: Please note SHARK4R also includes useful function reading exported Plankton Toolbox data files: read_ptbx().","code":"# Get EG Phyto Biovolume list peg_list <- get_peg_list() ## Reading PEG biovolume Excel file for year: 2025 # Print list tibble(peg_list) ## # A tibble: 3,527 × 36 ##    Division    Class Order Genus Species SFLAG STAGE Author AphiaID AphiaID_link ##    <chr>       <chr> <chr> <chr> <chr>   <chr> <chr> <chr>    <dbl> <chr>        ##  1 CYANOBACTE… Cyan… CHRO… Apha… Aphano… NA    NA    West …  146563 http://www.… ##  2 CYANOBACTE… Cyan… CHRO… Apha… Aphano… NA    NA    West …  146563 http://www.… ##  3 CYANOBACTE… Cyan… CHRO… Apha… Aphano… NA    NA    West …  146563 http://www.… ##  4 CYANOBACTE… Cyan… CHRO… Apha… Aphano… NA    NA    West …  146563 http://www.… ##  5 CYANOBACTE… Cyan… CHRO… Apha… Aphano… NA    NA    West …  146563 http://www.… ##  6 CYANOBACTE… Cyan… CHRO… Apha… Aphano… NA    NA    West …  146563 http://www.… ##  7 CYANOBACTE… Cyan… CHRO… Apha… Aphano… NA    NA    West …  146563 http://www.… ##  8 CYANOBACTE… Cyan… CHRO… Apha… Aphano… NA    NA    W. & …  146564 http://www.… ##  9 CYANOBACTE… Cyan… CHRO… Apha… Aphano… NA    NA    W. & …  146564 http://www.… ## 10 CYANOBACTE… Cyan… CHRO… Apha… Aphano… NA    NA    W. & …  146564 http://www.… ## # ℹ 3,517 more rows ## # ℹ 26 more variables: Trophy <chr>, Geometric_shape <chr>, FORMULA <chr>, ## #   SizeClassNo <dbl>, Nonvalid_SIZCL <lgl>, Not_accepted_name <lgl>, ## #   Unit <chr>, SizeRange <chr>, `Length(l1)µm` <dbl>, `Length(l2)µm` <dbl>, ## #   `Width(w)µm` <dbl>, `Height(h)µm` <dbl>, `Diameter(d1)µm` <dbl>, ## #   `Diameter(d2)µm` <dbl>, `No_of_cells/counting_unit` <dbl>, ## #   `Calculated_volume_µm3 (with formula) - NOT IMPORTED, NOT handled by ICES` <dbl>, … # Get NOMP Biovolume list nomp_list <- get_nomp_list() ## File for year 2025 not available. Trying previous year... # Print list tibble(nomp_list) ## # A tibble: 3,846 × 39 ##    List      `HELCOM area` `OSPAR area` Division Class Order Genus Species SFLAG ##    <chr>     <chr>         <chr>        <chr>    <chr> <chr> <chr> <chr>   <chr> ##  1 PEG_BVOL… x             NA           CYANOBA… Cyan… CHRO… Apha… Aphano… NA    ##  2 PEG_BVOL… x             NA           CYANOBA… Cyan… CHRO… Apha… Aphano… NA    ##  3 PEG_BVOL… x             NA           CYANOBA… Cyan… CHRO… Apha… Aphano… NA    ##  4 PEG_BVOL… x             NA           CYANOBA… Cyan… CHRO… Apha… Aphano… NA    ##  5 PEG_BVOL… x             NA           CYANOBA… Cyan… CHRO… Apha… Aphano… NA    ##  6 PEG_BVOL… x             NA           CYANOBA… Cyan… CHRO… Apha… Aphano… NA    ##  7 PEG_BVOL… x             NA           CYANOBA… Cyan… CHRO… Apha… Aphano… NA    ##  8 PEG_BVOL… x             NA           CYANOBA… Cyan… CHRO… Apha… Aphano… NA    ##  9 PEG_BVOL… x             NA           CYANOBA… Cyan… CHRO… Apha… Aphano… NA    ## 10 PEG_BVOL… x             NA           CYANOBA… Cyan… CHRO… Apha… Aphano… NA    ## # ℹ 3,836 more rows ## # ℹ 30 more variables: STAGE <chr>, Author <chr>, AphiaID <dbl>, ## #   AphiaID_link <chr>, Trophy <chr>, Geometric_shape <chr>, FORMULA <chr>, ## #   SizeClassNo <dbl>, Nonvalid_SIZCL <lgl>, Not_accepted_name <chr>, ## #   Unit <chr>, SizeRange <chr>, `Length(l1)µm` <dbl>, `Length(l2)µm` <dbl>, ## #   `Width(w)µm` <dbl>, `Height(h)µm` <dbl>, `Diameter(d1)µm` <dbl>, ## #   `Diameter(d2)µm` <dbl>, `No_of_cells/counting_unit` <dbl>, …"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_nordic_microalgae_data.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"Retrieve Data From Nordic Microalgae","text":"","code":"## To cite package 'SHARK4R' in publications use: ##  ##   Markus Lindh, Anders Torstensson (2025). SHARK4R: Retrieving, ##   Analyzing, and Validating Marine Data from SHARK and Nordic ##   Microalgae. R package version 0.1.7.9000. ##   https://doi.org/10.5281/zenodo.14169399 ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {SHARK4R: Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae}, ##     author = {Markus Lindh and Anders Torstensson}, ##     year = {2025}, ##     note = {R package version 0.1.7.9000}, ##     url = {https://doi.org/10.5281/zenodo.14169399}, ##   }"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_shark_data.html","id":"shark","dir":"Articles","previous_headings":"","what":"SHARK","title":"Retrieve Data From SHARK","text":"SHARK Swedish Ocean Archive’s platform data downloads. stores biological, physical, chemical marine environmental monitoring data. behalf Swedish Agency Marine Water Management, SMHI serves national data host oceanography marine biology designated UNESCO National Oceanographic Data Center (NODC). data can accessed via web interface API, demonstrated tutorial using SHARK4R.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_shark_data.html","id":"installation","dir":"Articles","previous_headings":"Getting Started","what":"Installation","title":"Retrieve Data From SHARK","text":"can install latest version package GitHub using remotes package: Load SHARK4R library:","code":"# install.packages(\"remotes\") remotes::install_github(\"sharksmhi/SHARK4R\",                         ref = remotes::github_release(),                         dependencies = TRUE) library(SHARK4R)"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_shark_data.html","id":"retrieve-data-table","dir":"Articles","previous_headings":"","what":"Retrieve Data Table","title":"Retrieve Data From SHARK","text":"Data can retrieved filtering options available SHARK. see available filtering options, please refer get_shark_options() information .","code":"# Retrieve chlorophyll data for April to June from 2019 to 2020 shark_data <- get_shark_data(fromYear = 2019,                               toYear = 2020,                              months = c(4, 5, 6),                               dataTypes = c(\"Chlorophyll\"),                              verbose = FALSE)  # Print data print(shark_data) ## # A tibble: 179 × 72 ##    delivery_datatype check_status_sv data_checked_by_sv visit_year visit_month ##    <chr>             <chr>           <chr>                   <dbl>       <dbl> ##  1 Chlorophyll       Klar            Leverantör               2020           6 ##  2 Chlorophyll       Klar            Leverantör               2020           6 ##  3 Chlorophyll       Klar            Leverantör               2020           6 ##  4 Chlorophyll       Klar            Leverantör               2020           6 ##  5 Chlorophyll       Klar            Leverantör               2020           6 ##  6 Chlorophyll       Klar            Leverantör               2020           6 ##  7 Chlorophyll       Klar            Leverantör               2020           6 ##  8 Chlorophyll       Klar            Leverantör               2020           6 ##  9 Chlorophyll       Klar            Leverantör               2020           6 ## 10 Chlorophyll       Klar            Leverantör               2020           6 ## # ℹ 169 more rows ## # ℹ 67 more variables: station_name <chr>, reported_station_name <chr>, ## #   sample_location_id <dbl>, station_id <dbl>, sample_project_name_sv <lgl>, ## #   sample_orderer_name_sv <lgl>, visit_id <dbl>, visit_date <lgl>, ## #   shark_sample_id_md5 <chr>, sample_date <date>, sample_time <time>, ## #   sample_enddate <lgl>, sample_endtime <lgl>, sample_latitude_dm <chr>, ## #   sample_longitude_dm <chr>, sample_latitude_dd <dbl>, …"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_shark_data.html","id":"get-shark-api-options","dir":"Articles","previous_headings":"","what":"Get SHARK API Options","title":"Retrieve Data From SHARK","text":"Filtering options, including data types, dataset names, stations, taxa, , can retrieved using get_shark_options() function.","code":"# Retrieve available search options shark_options <- get_shark_options()  # List the names of the available options names(shark_options) ##  [1] \"datasets\"              \"dataTypes\"             \"parameters\"            ##  [4] \"minYear\"               \"maxYear\"               \"months\"                ##  [7] \"checkStatuses\"         \"qualityFlags\"          \"deliverers\"            ## [10] \"orderers\"              \"projects\"              \"redListedCategories\"   ## [13] \"taxa\"                  \"stations\"              \"seaAreas\"              ## [16] \"vattenDistrikt\"        \"typOmraden\"            \"seaBasins\"             ## [19] \"counties\"              \"municipalities\"        \"waterCategories\"       ## [22] \"helcomOspar\"           \"parametersForDatatype\" \"headerlangers\"         ## [25] \"minYearPerDatatype\" # View available datatypes dataTypes <- shark_options$dataTypes print(dataTypes) ##  [1] \"Bacterioplankton\"      \"Chlorophyll\"           \"Epibenthos\"            ##  [4] \"Grey seal\"             \"Harbour Porpoise\"      \"Harbour seal\"          ##  [7] \"Physical and Chemical\" \"Phytoplankton\"         \"Picoplankton\"          ## [10] \"Plankton Barcoding\"    \"Plankton Imaging\"      \"Primary production\"    ## [13] \"Profile\"               \"Ringed seal\"           \"Seal pathology\"        ## [16] \"Sedimentation\"         \"Zoobenthos\"            \"Zooplankton\" # View available dataset names datasetNames <- shark_options$datasets head(datasetNames) # Print first few dataset names ## [1] \"SHARK_Bacterioplankton_ABUND_2023_UMSC_version_2024-06-04.zip\"         ## [2] \"SHARK_Bacterioplankton_ABU_2006_UMSC_Bactabund_version_2024-09-27.zip\" ## [3] \"SHARK_Bacterioplankton_ABU_2007_UMSC_Bactabund_version_2024-09-27.zip\" ## [4] \"SHARK_Bacterioplankton_ABU_2008_UMSC_Bactabund_version_2024-09-27.zip\" ## [5] \"SHARK_Bacterioplankton_ABU_2009_UMSC_Bactabund_version_2024-09-27.zip\" ## [6] \"SHARK_Bacterioplankton_ABU_2010_UMSC_Bactabund_version_2024-09-27.zip\""},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_shark_data.html","id":"retrieve-datasets-zip-archives","dir":"Articles","previous_headings":"","what":"Retrieve Datasets (Zip-archives)","title":"Retrieve Data From SHARK","text":"addition accessing data tabular form, can also download complete datasets packaged zip archives. useful want store complete datasets locally analysis. explore available dataset names, use get_shark_options(). know datasets need, can pass names (partial names) get_shark_datasets() function. Please note SHARK4R also includes several useful functions reading local SHARK data files, shark_read(), shark_read_zip(), shark_read_deliv() shark_read_deliv_xls().","code":"# Select a dataset name (e.g., the first two in the list) dataset_name <- datasetNames[1:2]  # Download the dataset as a zip-archive to a temporary directory shark_data_zip <- get_shark_datasets(dataset_name,                                      save_dir = tempdir(),                                      verbose = FALSE) # Quiet output  # Print the paths to the downloaded files print(shark_data_zip) ## $`SHARK_Bacterioplankton_ABUND_2023_UMSC_version_2024-06-04.zip` ## [1] \"/tmp/RtmpmNbkNM/SHARK_Bacterioplankton_ABUND_2023_UMSC_version_2024-06-04.zip\" ##  ## $`SHARK_Bacterioplankton_ABU_2006_UMSC_Bactabund_version_2024-09-27.zip` ## [1] \"/tmp/RtmpmNbkNM/SHARK_Bacterioplankton_ABU_2006_UMSC_Bactabund_version_2024-09-27.zip\""},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_shark_data.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"Retrieve Data From SHARK","text":"","code":"## To cite package 'SHARK4R' in publications use: ##  ##   Markus Lindh, Anders Torstensson (2025). SHARK4R: Retrieving, ##   Analyzing, and Validating Marine Data from SHARK and Nordic ##   Microalgae. R package version 0.1.7.9000. ##   https://doi.org/10.5281/zenodo.14169399 ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {SHARK4R: Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae}, ##     author = {Markus Lindh and Anders Torstensson}, ##     year = {2025}, ##     note = {R package version 0.1.7.9000}, ##     url = {https://doi.org/10.5281/zenodo.14169399}, ##   }"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_worms_data.html","id":"worms","dir":"Articles","previous_headings":"","what":"WoRMS","title":"Retrieve Taxonomic Data From WoRMS","text":"World Register Marine Species (WoRMS) comprehensive database providing authoritative lists marine organism names, managed taxonomic experts. combines data Aphia database sources like AlgaeBase FishBase, offering species names, higher classifications, additional data. WoRMS continuously updated maintained taxonomists. tutorial, source R package worrms access WoRMS data function. Please note authors SHARK4R affiliated WoRMS.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_worms_data.html","id":"installation","dir":"Articles","previous_headings":"Getting Started","what":"Installation","title":"Retrieve Taxonomic Data From WoRMS","text":"can install latest version package GitHub using remotes package: Load SHARK4R dplyr libraries:","code":"# install.packages(\"remotes\") remotes::install_github(\"sharksmhi/SHARK4R\",                         ref = remotes::github_release(),                         dependencies = TRUE) library(SHARK4R) library(dplyr) library(ggplot2)"},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_worms_data.html","id":"retrieve-phytoplankton-data-from-shark","dir":"Articles","previous_headings":"Retrieve Data Using SHARK4R","what":"Retrieve Phytoplankton Data From SHARK","title":"Retrieve Taxonomic Data From WoRMS","text":"Phytoplankton data, including scientific names AphiaIDs, downloaded SHARK. see download options, please visit Retrieve Data SHARK tutorial.","code":"# Retrieve all phytoplankton data from April 2015 shark_data <- get_shark_data(fromYear = 2015,                               toYear = 2015,                              months = 4,                               dataTypes = c(\"Phytoplankton\"),                              verbose = FALSE)"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_worms_data.html","id":"match-taxa-names","dir":"Articles","previous_headings":"Retrieve Data Using SHARK4R","what":"Match Taxa Names","title":"Retrieve Taxonomic Data From WoRMS","text":"Taxon names can matched WoRMS API retrieve Aphia IDs corresponding taxonomic information. get_worms_records_name() function incorporates retry logic handle temporary failures, ensuring names processed successfully.","code":"# Find taxa without Aphia ID no_aphia_id <- shark_data %>%   filter(is.na(aphia_id))  # Randomly select taxa with missing aphia_id taxa_names <- sample(unique(no_aphia_id$scientific_name),                       size = 10,                      replace = TRUE)  # Match taxa names with WoRMS worms_records <- get_worms_records_name(unique(taxa_names),                                         fuzzy = TRUE,                                         best_match_only = TRUE,                                         marine_only = TRUE,                                         verbose = FALSE)  # Print result as tibble tibble(worms_records) ## # A tibble: 4 × 28 ##   name  status AphiaID url   scientificname authority unacceptreason taxonRankID ##   <chr> <chr>    <int> <chr> <chr>          <chr>     <chr>                <int> ## 1 Unic… no co…      NA NA    NA             NA        NA                      NA ## 2 Scri… accep…  109545 http… Scrippsiella   Balech e… NA                     180 ## 3 Cyli… accep…  149004 http… Cylindrotheca… (Ehrenbe… NA                     220 ## 4 Dipl… accep…  109515 http… Diplopsalis    R.S.Berg… NA                     180 ## # ℹ 20 more variables: rank <chr>, valid_AphiaID <int>, valid_name <chr>, ## #   valid_authority <chr>, parentNameUsageID <int>, kingdom <chr>, ## #   phylum <chr>, class <chr>, order <chr>, family <chr>, genus <chr>, ## #   citation <chr>, lsid <chr>, isMarine <int>, isBrackish <int>, ## #   isFreshwater <int>, isTerrestrial <int>, isExtinct <lgl>, match_type <chr>, ## #   modified <chr>"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_worms_data.html","id":"get-worms-records-from-aphiaid","dir":"Articles","previous_headings":"Retrieve Data Using SHARK4R","what":"Get WoRMS records from AphiaID","title":"Retrieve Taxonomic Data From WoRMS","text":"Taxonomic records can also retrieved using Aphia IDs, employing retry error-handling logic get_worms_records_name() function.","code":"# Randomly select ten Aphia IDs aphia_ids <- sample(unique(shark_data$aphia_id),                      size = 10)  # Remove NAs aphia_ids <- aphia_ids[!is.na(aphia_ids)]  # Retrieve records worms_records <- get_worms_records(aphia_ids,                                    verbose = FALSE)  # Print result as tibble tibble(worms_records) ## # A tibble: 10 × 27 ##    AphiaID url        scientificname authority status unacceptreason taxonRankID ##      <int> <chr>      <chr>          <chr>     <chr>  <lgl>                <int> ##  1 1310442 https://w… Octactis spec… (Ehrenbe… accep… NA                     220 ##  2  146715 https://w… Aphanothece    Nägeli, … accep… NA                     180 ##  3  837459 https://w… Tripos lineat… (Ehrenbe… accep… NA                     220 ##  4  134529 https://w… Pyramimonas    Schmarda… accep… NA                     180 ##  5  575737 https://w… Binuclearia l… (Schmidl… accep… NA                     220 ##  6  110153 https://w… Heterocapsa t… (Ehrenbe… unacc… NA                     220 ##  7  148899 https://w… Bacillariophy… Haeckel,… accep… NA                      60 ##  8  106287 https://w… Hemiselmis     Parke, 1… accep… NA                     180 ##  9  249711 https://w… Desmodesmus    (R.Choda… accep… NA                     180 ## 10  109553 https://w… Protoperidini… Bergh, 1… accep… NA                     180 ## # ℹ 20 more variables: rank <chr>, valid_AphiaID <int>, valid_name <chr>, ## #   valid_authority <chr>, parentNameUsageID <int>, kingdom <chr>, ## #   phylum <chr>, class <chr>, order <chr>, family <chr>, genus <chr>, ## #   citation <chr>, lsid <chr>, isMarine <int>, isBrackish <int>, ## #   isFreshwater <int>, isTerrestrial <int>, isExtinct <lgl>, match_type <chr>, ## #   modified <chr>"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_worms_data.html","id":"get-worms-taxonomy","dir":"Articles","previous_headings":"Retrieve Data Using SHARK4R","what":"Get WoRMS Taxonomy","title":"Retrieve Taxonomic Data From WoRMS","text":"SHARK sources taxonomic information Dyntaxa, reflected columns starting taxon_xxxxx. Equivalent columns based WoRMS can retrieved using add_worms_taxonomy() function.","code":"# Retrieve taxonomic table worms_taxonomy <- add_worms_taxonomy(aphia_ids,                                      verbose = FALSE)  # Print result as tibble tibble(worms_taxonomy) ## # A tibble: 10 × 10 ##    aphia_id scientific_name   worms_kingdom worms_phylum worms_class worms_order ##       <dbl> <chr>             <chr>         <chr>        <chr>       <chr>       ##  1  1310442 Octactis speculum Chromista     Ochrophyta   Dictyochop… Dictyochal… ##  2   146715 Aphanothece       Bacteria      Cyanobacter… Cyanophyce… Chroococca… ##  3   837459 Tripos lineatus   Chromista     Myzozoa      Dinophyceae Gonyaulaca… ##  4   134529 Pyramimonas       Plantae       NA           Pyramimona… Pyramimona… ##  5   575737 Binuclearia laut… Plantae       NA           Ulvophyceae Ulotrichal… ##  6   110153 Heterocapsa triq… Chromista     Myzozoa      Dinophyceae Peridinial… ##  7   148899 Bacillariophyceae Chromista     Heterokonto… Bacillario… NA          ##  8   106287 Hemiselmis        Chromista     Cryptophyta  Cryptophyc… Pyrenomona… ##  9   249711 Desmodesmus       Plantae       NA           Chlorophyc… Sphaerople… ## 10   109553 Protoperidinium   Chromista     Myzozoa      Dinophyceae Peridinial… ## # ℹ 4 more variables: worms_family <chr>, worms_genus <chr>, ## #   worms_species <chr>, worms_hierarchy <chr> # Enrich data with data from WoRMS shark_data_with_worms <- shark_data %>%   left_join(worms_taxonomy, by = c(\"aphia_id\", \"scientific_name\"))"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_worms_data.html","id":"assign-phytoplankton-groups","dir":"Articles","previous_headings":"Retrieve Data Using SHARK4R","what":"Assign Phytoplankton Groups","title":"Retrieve Taxonomic Data From WoRMS","text":"Phytoplankton data often categorized major groups Dinoflagellates, Diatoms, Cyanobacteria, Others. grouping can achieved referencing information WoRMS assigning taxa groups based taxonomic classification, demonstrated example .  can add custom plankton groups using custom_groups parameter, allowing flexibility categorize plankton based specific taxonomic criteria. Please note order list matters: taxa assigned last matching group. example: Mesodinium rubrum excluded Ciliates group appears Ciliates list example .","code":"# Subset a few national monitoring stations nat_stations <- shark_data %>%   filter(station_name %in% c(\"BY5 BORNHOLMSDJ\"))  # Randomly select one sample from the nat_stations sample <- sample(unique(nat_stations$shark_sample_id_md5), 1)  # Subset the random sample shark_data_subset <- shark_data %>%   filter(shark_sample_id_md5 == sample)  # Assign groups by providing both scientific name and Aphia ID plankton_groups <- assign_phytoplankton_group(   scientific_names = shark_data_subset$scientific_name,   aphia_ids = shark_data_subset$aphia_id,   verbose = FALSE)  # Print result tibble(distinct(plankton_groups)) ## # A tibble: 23 × 2 ##    scientific_name      plankton_group  ##    <chr>                <chr>           ##  1 Pauliella taeniata   Diatoms         ##  2 Amylax triacantha    Dinoflagellates ##  3 Aphanocapsa          Cyanobacteria   ##  4 Aphanothece          Cyanobacteria   ##  5 Chaetoceros similis  Diatoms         ##  6 Dinobryon balticum   Other           ##  7 Dinophysis acuminata Dinoflagellates ##  8 Dinophysis norvegica Dinoflagellates ##  9 Gymnodinium          Dinoflagellates ## 10 Protodinium simplex  Other           ## # ℹ 13 more rows # Add plankton groups to data and summarize abundance results plankton_group_sum <- shark_data_subset %>%   mutate(plankton_group = plankton_groups$plankton_group) %>%   filter(parameter == \"Abundance\") %>%   group_by(plankton_group) %>%   summarise(sum_plankton_groups = sum(value, na.rm = TRUE))  # Plot a pie chart ggplot(plankton_group_sum,         aes(x = \"\", y = sum_plankton_groups, fill = plankton_group)) +   geom_col(width = 1) +   coord_polar(theta = \"y\") +   labs(     title = \"Phytoplankton Groups\",     subtitle = paste(unique(shark_data_subset$station_name),                      unique(shark_data_subset$sample_date)),     fill = \"Plankton Group\"   ) +   theme_void() +   theme(plot.background = element_rect(fill = \"white\", color = NA)) # Define custom plankton groups using a named list custom_groups <- list(   \"Cryptophytes\" = list(class = \"Cryptophyceae\"),   \"Green Algae\" = list(class = c(\"Trebouxiophyceae\",                                   \"Chlorophyceae\",                                   \"Pyramimonadophyceae\"),                        phylum = \"Chlorophyta\"),   \"Ciliates\" = list(phylum = \"Ciliophora\"),   \"Mesodinium rubrum\" = list(scientific_name = \"Mesodinium rubrum\"),   \"Dinophysis\" = list(genus = \"Dinophysis\") )  # Assign groups by providing scientific name only, and adding custom groups plankton_groups <- assign_phytoplankton_group(   scientific_names = shark_data_subset$scientific_name,   custom_groups = custom_groups,   verbose = FALSE)  # Add new plankton groups to data and summarize abundance results plankton_custom_group_sum <- shark_data_subset %>%   mutate(plankton_group = plankton_groups$plankton_group) %>%   filter(parameter == \"Abundance\") %>%   group_by(plankton_group) %>%   summarise(sum_plankton_groups = sum(value, na.rm = TRUE))  # Plot a new pie chart, including the custom groups ggplot(plankton_custom_group_sum,         aes(x = \"\", y = sum_plankton_groups, fill = plankton_group)) +   geom_col(width = 1) +   coord_polar(theta = \"y\") +   labs(     title = \"Phytoplankton Custom Groups\",     subtitle = paste(unique(shark_data_subset$station_name),                      unique(shark_data_subset$sample_date)),     fill = \"Plankton Group\"   ) +   theme_void() +   theme(plot.background = element_rect(fill = \"white\", color = NA))"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_worms_data.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"Retrieve Taxonomic Data From WoRMS","text":"","code":"## To cite package 'SHARK4R' in publications use: ##  ##   Markus Lindh, Anders Torstensson (2025). SHARK4R: Retrieving, ##   Analyzing, and Validating Marine Data from SHARK and Nordic ##   Microalgae. R package version 0.1.7.9000. ##   https://doi.org/10.5281/zenodo.14169399 ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {SHARK4R: Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae}, ##     author = {Markus Lindh and Anders Torstensson}, ##     year = {2025}, ##     note = {R package version 0.1.7.9000}, ##     url = {https://doi.org/10.5281/zenodo.14169399}, ##   }"},{"path":"https://sharksmhi.github.io/SHARK4R/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Markus Lindh. Author.            Swedish Meteorological Hydrological Institute Anders Torstensson. Author, maintainer.            Swedish Meteorological Hydrological Institute SHARK. Copyright holder.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Markus Lindh, Anders Torstensson (2025). SHARK4R: Retrieving, Analyzing, Validating Marine Data SHARK Nordic Microalgae. R package version 0.1.7.9000. https://doi.org/10.5281/zenodo.14169399","code":"@Manual{,   title = {SHARK4R: Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae},   author = {Markus Lindh and Anders Torstensson},   year = {2025},   note = {R package version 0.1.7.9000},   url = {https://doi.org/10.5281/zenodo.14169399}, }"},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae","text":"R package equipped client application designed integration API functions. facilitates access various databases, including SHARK, SLU Artdatabanken (Dyntaxa), WoRMS, AlgaeBase, IOC-UNESCO Taxonomic Reference List Harmful Micro Algae, IOC-UNESCO Toxins database Nordic Microalgae. package serves dual purpose, supporting data analysis automatic quality control physical, chemical, marine biological data. Developed SMHI, quality control functions modified https://iobis.github.io/obistools/","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae","text":"Installing SHARK4R requires remotes package. Install latest version SHARK4R GitHub: install development version:","code":"# install.packages(\"remotes\") remotes::install_github(\"sharksmhi/SHARK4R\",                          ref = remotes::github_release(),                         dependencies = TRUE) # install.packages(\"remotes\") remotes::install_github(\"sharksmhi/SHARK4R\",                          dependencies = TRUE)"},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/index.html","id":"website","dir":"","previous_headings":"Documentation and Tutorials","what":"Website","title":"Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae","text":"detailed information, please visit project’s webpage.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/index.html","id":"tutorials","dir":"","previous_headings":"Documentation and Tutorials","what":"Tutorials","title":"Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae","text":"Explore features capabilities SHARK4R tutorials: Retrieve Data SHARK Retrieve Data Dyntaxa Retrieve Data WoRMS Retrieve Data AlgaeBase Retrieve Data IOC HAB Toxin databases Retrieve Data Nordic Microalgae Quality Control SHARK Data","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/index.html","id":"reference","dir":"","previous_headings":"Documentation and Tutorials","what":"Reference","title":"Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae","text":"detailed overview available SHARK4R functions, please visit reference section: Function Reference","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/index.html","id":"repository","dir":"","previous_headings":"","what":"Repository","title":"Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae","text":"details latest updates, visit GitHub repository.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae","text":"package licensed MIT License.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae","text":"Provoost P Bosch S (2018). obistools: Tools data enhancement quality control. Ocean Biogeographic Information System. Intergovernmental Oceanographic Commission UNESCO. https://iobis.github.io/obistools/.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/SHARK4R-package.html","id":null,"dir":"Reference","previous_headings":"","what":"SHARK4R: Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae — SHARK4R-package","title":"SHARK4R: Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae — SHARK4R-package","text":"R package data analysis, automatic quality control data retrieval physical, chemical marine biological data generated SHARK Nordic Microalgae, developed SMHI. Parts modified `obistools`. Provoost P Bosch S (2018). \"obistools: Tools data enhancement quality control.\" Ocean Biogeographic Information System. Intergovernmental Oceanographic Commission UNESCO. https://iobis.github.io/obistools/.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/SHARK4R-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SHARK4R: Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae — SHARK4R-package","text":"Maintainer: Anders Torstensson anders.torstensson@smhi.se (ORCID) (Swedish Meteorological Hydrological Institute) Authors: Markus Lindh (ORCID) (Swedish Meteorological Hydrological Institute) contributors: SHARK shark@smhi.se [copyright holder]","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/add_hierarchy_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Taxonomic Hierarchy Column to a Dataset — add_hierarchy_column","title":"Add Taxonomic Hierarchy Column to a Dataset — add_hierarchy_column","text":"function adds new column, hierarchy, dataset, row contains taxonomic hierarchy parent scientificName values given taxonId. hierarchy constructed using recursive helper function.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/add_hierarchy_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Taxonomic Hierarchy Column to a Dataset — add_hierarchy_column","text":"","code":"add_hierarchy_column(data, data_dwca = NULL, verbose = TRUE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/add_hierarchy_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Taxonomic Hierarchy Column to a Dataset — add_hierarchy_column","text":"data data frame containing taxonomic information. Must include columns taxonId, parentNameUsageID, scientificName. data_dwca data frame representing complete taxonomic dataset (e.g., full taxonomy table). Must include columns data. Defaults data provided. verbose Logical. TRUE, function print additional messages provide feedback progress. Default TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/add_hierarchy_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Taxonomic Hierarchy Column to a Dataset — add_hierarchy_column","text":"data frame additional hierarchy column. hierarchy column contains string representing lineage parent scientificName values, separated \" > \".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/add_hierarchy_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Taxonomic Hierarchy Column to a Dataset — add_hierarchy_column","text":"","code":"# Example dataset data <- dplyr::tibble(   taxonId = c(\"1\", \"2\", \"3\"),   parentNameUsageID = c(NA, \"1\", \"2\"),   scientificName = c(\"Kingdom\", \"Phylum\", \"Class\") )  # Add hierarchy column data_with_hierarchy <- SHARK4R:::add_hierarchy_column(data) #>    |                                                                               |                                                                      |   0%   |                                                                               |=======================                                               |  33%   |                                                                               |===============================================                       |  67%   |                                                                               |======================================================================| 100% print(data_with_hierarchy) #> # A tibble: 3 × 4 #>   taxonId parentNameUsageID scientificName hierarchy                #>   <chr>   <chr>             <chr>          <chr>                    #> 1 1       NA                Kingdom        Kingdom                  #> 2 2       1                 Phylum         Kingdom - Phylum         #> 3 3       2                 Class          Kingdom - Phylum - Class"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/add_worms_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve and Organize WoRMS Taxonomy for SHARK Aphia IDs — add_worms_taxonomy","title":"Retrieve and Organize WoRMS Taxonomy for SHARK Aphia IDs — add_worms_taxonomy","text":"function collects WoRMS (World Register Marine Species) taxonomy information given set Aphia IDs. data organized full taxonomic table can joined data downloaded SHARK.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/add_worms_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve and Organize WoRMS Taxonomy for SHARK Aphia IDs — add_worms_taxonomy","text":"","code":"add_worms_taxonomy(aphia_id, scientific_name = NULL, verbose = TRUE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/add_worms_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve and Organize WoRMS Taxonomy for SHARK Aphia IDs — add_worms_taxonomy","text":"aphia_id numeric vector containing Aphia IDs WoRMS taxonomy needs updated. scientific_name character vector scientific names. provided, Aphia IDs retrieved scientific names. length scientific_name must match length aphia_id. Defaults NULL, case function add taxonomy provided Aphia IDs. verbose logical indicating whether print progress messages. Default TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/add_worms_taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve and Organize WoRMS Taxonomy for SHARK Aphia IDs — add_worms_taxonomy","text":"data frame containing current WoRMS taxonomy information.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/add_worms_taxonomy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve and Organize WoRMS Taxonomy for SHARK Aphia IDs — add_worms_taxonomy","text":"","code":"if (FALSE) { # \\dontrun{ # Update WoRMS taxonomy for a set of Aphia IDs updated_taxonomy <- add_worms_taxonomy(c(149619, 149122, 11)) print(updated_taxonomy)  # Update WoRMS with an unknown Aphia ID and scientific names with_names <- add_worms_taxonomy(c(149619, 149122, 11, NA),                                  c(\"Cerataulina pelagica\",                                    \"Chaetoceros didymus\",                                    \"Ciliophora\",                                    \"Dinophysis\")) print(with_names) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/assign_phytoplankton_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign Phytoplankton Group to Scientific Names — assign_phytoplankton_group","title":"Assign Phytoplankton Group to Scientific Names — assign_phytoplankton_group","text":"function assigns default phytoplankton groups (Diatoms, Dinoflagellates, Cyanobacteria, ) list scientific names Aphia IDs retrieving species information World Register Marine Species (WoRMS). function checks Aphia IDs scientific names, handles missing records, assigns appropriate plankton group based taxonomic classification WoRMS. Additionally, custom plankton groups can specified using custom_groups parameter, allowing users define additional classifications based specific taxonomic criteria.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/assign_phytoplankton_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign Phytoplankton Group to Scientific Names — assign_phytoplankton_group","text":"","code":"assign_phytoplankton_group(   scientific_names,   aphia_ids = NULL,   diatom_class = c(\"Bacillariophyceae\", \"Coscinodiscophyceae\", \"Mediophyceae\",     \"Diatomophyceae\"),   dinoflagellate_class = \"Dinophyceae\",   cyanobacteria_class = \"Cyanophyceae\",   cyanobacteria_phylum = \"Cyanobacteria\",   match_first_word = TRUE,   marine_only = FALSE,   return_class = FALSE,   custom_groups = list(),   verbose = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/assign_phytoplankton_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign Phytoplankton Group to Scientific Names — assign_phytoplankton_group","text":"scientific_names character vector scientific names marine species. aphia_ids numeric vector Aphia IDs corresponding scientific names. provided, improves accuracy speed matching process. length aphia_ids must match length scientific_names. Defaults NULL, case function attempt assign plankton groups based scientific names. diatom_class character string vector representing diatom class. Default \"Bacillariophyceae\", \"Coscinodiscophyceae\" \"Mediophyceae\". dinoflagellate_class character string vector representing dinoflagellate class. Default \"Dinophyceae\". cyanobacteria_class character string vector representing cyanobacteria class. Default \"Cyanophyceae\". cyanobacteria_phylum character string vector representing cyanobacteria phylum. Default \"Cyanobacteria\". match_first_word logical value indicating whether match first word scientific name Aphia ID missing. Default TRUE. marine_only logical value indicating whether restrict results marine taxa . Default FALSE. return_class logical value indicating whether include class information result. Default FALSE. custom_groups named list additional custom plankton groups (optional). names list correspond custom group names (e.g., \"Cryptophytes\"), values character vectors specifying one following taxonomic levels: phylum, class, order, family, genus, scientific_name. example: list(\"Green Algae\" = list(class = c(\"Chlorophyceae\", \"Ulvophyceae\"))). allows users extend default classifications (e.g., Cyanobacteria, Diatoms, Dinoflagellates) groups. verbose logical value indicating whether print progress messages. Default TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/assign_phytoplankton_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign Phytoplankton Group to Scientific Names — assign_phytoplankton_group","text":"data frame two columns: scientific_name plankton_group, plankton group assigned based taxonomic classification.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/assign_phytoplankton_group.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign Phytoplankton Group to Scientific Names — assign_phytoplankton_group","text":"aphia_ids parameter necessary , provided, improve certainty matching process. aphia_ids available, used directly retrieve accurate WoRMS records. missing, function attempt match scientific names Aphia IDs querying WoRMS using scientific name(s), additional fallback mechanism match based first word scientific name. skip one default plankton groups, can set class phylum respective group empty string (\"\"). example, skip \"Cyanobacteria\" group, can set cyanobacteria_class = \"\" cyanobacteria_phylum = \"\". taxa placed Others. Custom groups processed order appear custom_groups list. taxon matches multiple custom groups, assigned group appears last list, later matches overwrite earlier ones. example, Teleaulax amphioxeia matches Cryptophytes (class-based) specific group Teleaulax (name-based), assigned Teleaulax Teleaulax listed Cryptophytes custom_groups list.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/assign_phytoplankton_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign Phytoplankton Group to Scientific Names — assign_phytoplankton_group","text":"","code":"if (FALSE) { # \\dontrun{ # Assign plankton groups to a list of species result <- assign_phytoplankton_group(   scientific_names = c(\"Tripos fusus\", \"Diatoma\", \"Nodularia spumigena\", \"Octactis speculum\"),   aphia_ids = c(840626, 149013, 160566, NA))  print(result)  # Assign plankton groups using additional custom grouping custom_groups <- list(     Cryptophytes = list(class = \"Cryptophyceae\"),     Ciliates = list(phylum = \"Ciliophora\") )  # Assign with custom groups result_custom <- assign_phytoplankton_group(   scientific_names = c(\"Teleaulax amphioxeia\", \"Mesodinium rubrum\", \"Dinophysis acuta\"),   aphia_ids = c(106306, 232069, 109604),   custom_groups = custom_groups,         # Adding custom groups   verbose = TRUE )  print(result_custom) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Bacterioplankton.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Bacterioplankton","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Bacterioplankton","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Bacterioplankton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Bacterioplankton","text":"","code":"check_Bacterioplankton(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Bacterioplankton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Bacterioplankton","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Bacterioplankton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Bacterioplankton","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Chlorophyll.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Chlorophyll","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Chlorophyll","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Chlorophyll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Chlorophyll","text":"","code":"check_Chlorophyll(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Chlorophyll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Chlorophyll","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Chlorophyll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Chlorophyll","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Epibenthos.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Epibenthos","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Epibenthos","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Epibenthos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Epibenthos","text":"","code":"check_Epibenthos(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Epibenthos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Epibenthos","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Epibenthos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Epibenthos","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_EpibenthosDropvideo.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_EpibenthosDropvideo","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_EpibenthosDropvideo","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_EpibenthosDropvideo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_EpibenthosDropvideo","text":"","code":"check_EpibenthosDropvideo(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_EpibenthosDropvideo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_EpibenthosDropvideo","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_EpibenthosDropvideo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_EpibenthosDropvideo","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_GreySeal.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_GreySeal","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_GreySeal","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_GreySeal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_GreySeal","text":"","code":"check_GreySeal(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_GreySeal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_GreySeal","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_GreySeal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_GreySeal","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_HarbourPorpoise.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_HarbourPorpoise","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_HarbourPorpoise","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_HarbourPorpoise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_HarbourPorpoise","text":"","code":"check_HarbourPorpoise(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_HarbourPorpoise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_HarbourPorpoise","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_HarbourPorpoise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_HarbourPorpoise","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_HarbourSeal.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_HarbourSeal","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_HarbourSeal","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_HarbourSeal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_HarbourSeal","text":"","code":"check_HarbourSeal(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_HarbourSeal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_HarbourSeal","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_HarbourSeal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_HarbourSeal","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_PhysicalChemical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_PhysicalChemical","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_PhysicalChemical","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_PhysicalChemical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_PhysicalChemical","text":"","code":"check_PhysicalChemical(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_PhysicalChemical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_PhysicalChemical","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_PhysicalChemical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_PhysicalChemical","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Phytoplankton.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Phytoplankton","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Phytoplankton","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Phytoplankton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Phytoplankton","text":"","code":"check_Phytoplankton(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Phytoplankton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Phytoplankton","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Phytoplankton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Phytoplankton","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Picoplankton.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Picoplankton","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Picoplankton","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Picoplankton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Picoplankton","text":"","code":"check_Picoplankton(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Picoplankton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Picoplankton","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Picoplankton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Picoplankton","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_PrimaryProduction.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_PrimaryProduction","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_PrimaryProduction","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_PrimaryProduction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_PrimaryProduction","text":"","code":"check_PrimaryProduction(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_PrimaryProduction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_PrimaryProduction","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_PrimaryProduction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_PrimaryProduction","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_RingedSeal.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_RingedSeal","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_RingedSeal","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_RingedSeal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_RingedSeal","text":"","code":"check_RingedSeal(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_RingedSeal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_RingedSeal","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_RingedSeal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_RingedSeal","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_SealPathology.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_SealPathology","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_SealPathology","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_SealPathology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_SealPathology","text":"","code":"check_SealPathology(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_SealPathology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_SealPathology","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_SealPathology.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_SealPathology","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Sedimentation.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Sedimentation","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Sedimentation","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Sedimentation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Sedimentation","text":"","code":"check_Sedimentation(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Sedimentation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Sedimentation","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Sedimentation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Sedimentation","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Zoobenthos.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Zoobenthos","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Zoobenthos","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Zoobenthos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Zoobenthos","text":"","code":"check_Zoobenthos(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Zoobenthos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Zoobenthos","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Zoobenthos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Zoobenthos","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Zooplankton.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Zooplankton","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Zooplankton","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Zooplankton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Zooplankton","text":"","code":"check_Zooplankton(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Zooplankton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Zooplankton","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Zooplankton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Zooplankton","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_algaebase_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Check AlgaeBase API Operational Status — check_algaebase_api","title":"Check AlgaeBase API Operational Status — check_algaebase_api","text":"Internal function verify whether AlgaeBase API operational. sends request stable genus endpoint confirm API availability.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_algaebase_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check AlgaeBase API Operational Status — check_algaebase_api","text":"","code":"check_algaebase_api(   subscription_key = Sys.getenv(\"ALGAEBASE_KEY\"),   genus_id = 43375,   apikey = deprecated() )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_algaebase_api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check AlgaeBase API Operational Status — check_algaebase_api","text":"subscription_key character string containing API key accessing AlgaeBase API. default, key read environment variable ALGAEBASE_KEY. can provide key three ways: Directly parameter: check_algaebase_api(subscription_key = \"your_key_here\") Temporarily session: Sys.setenv(ALGAEBASE_KEY = \"your_key_here\") Permanently across sessions adding ~/.Renviron file. Use usethis::edit_r_environ() open file, add: ALGAEBASE_KEY=your_key_here genus_id numeric value. unique genus ID used test API endpoint. Default 43375, corresponding Haematococcus genus record AlgaeBase. apikey Use subscription_key instead.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_algaebase_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check AlgaeBase API Operational Status — check_algaebase_api","text":"logical value: TRUE API operational, FALSE otherwise.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_algaebase_api.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check AlgaeBase API Operational Status — check_algaebase_api","text":"valid API key requested AlgaeBase team. function performs GET request AlgaeBase API using stable genus ID ensure API accessible provided API key valid. used internally prevent unnecessary queries API unavailable.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_algaebase_api.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check AlgaeBase API Operational Status — check_algaebase_api","text":"","code":"if (FALSE) { # \\dontrun{ # Check API status with an API key check_algaebase_api(subscription_key = \"your_api_key\") } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_bacterial_carbon.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_carbon","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_carbon","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_bacterial_carbon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_carbon","text":"","code":"check_bacterial_carbon(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_bacterial_carbon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_carbon","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_bacterial_carbon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_carbon","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_bacterial_concentration.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_concentration","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_concentration","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_bacterial_concentration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_concentration","text":"","code":"check_bacterial_concentration(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_bacterial_concentration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_concentration","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_bacterial_concentration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_concentration","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_bacterial_production.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_production","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_production","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_bacterial_production.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_production","text":"","code":"check_bacterial_production(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_bacterial_production.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_production","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_bacterial_production.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_production","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_chlorophyll_conc.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_chlorophyll_conc","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_chlorophyll_conc","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_chlorophyll_conc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_chlorophyll_conc","text":"","code":"check_chlorophyll_conc(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_chlorophyll_conc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_chlorophyll_conc","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_chlorophyll_conc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_chlorophyll_conc","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_code_proj.html","id":null,"dir":"Reference","previous_headings":"","what":"Check matches of reported project (PROJ) codes in SMHIs codelist — check_code_proj","title":"Check matches of reported project (PROJ) codes in SMHIs codelist — check_code_proj","text":"Check matches reported project (PROJ) codes SMHIs codelist","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_code_proj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check matches of reported project (PROJ) codes in SMHIs codelist — check_code_proj","text":"","code":"check_code_proj(data, clean_cache_days = 30)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_code_proj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check matches of reported project (PROJ) codes in SMHIs codelist — check_code_proj","text":"data tibble checked clean_cache_days Numeric; NULL, cached SHARK code Excel files older number days automatically deleted replaced new download. Defaults 30. Set NULL disable automatic cleanup.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_code_proj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check matches of reported project (PROJ) codes in SMHIs codelist — check_code_proj","text":"unmatched codes true false results","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_datatype.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended global and datatype-specific SHARK system fields (different between different datatypes) are present. — check_datatype","title":"Check if the required and recommended global and datatype-specific SHARK system fields (different between different datatypes) are present. — check_datatype","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_datatype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended global and datatype-specific SHARK system fields (different between different datatypes) are present. — check_datatype","text":"","code":"check_datatype(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_datatype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended global and datatype-specific SHARK system fields (different between different datatypes) are present. — check_datatype","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_datatype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended global and datatype-specific SHARK system fields (different between different datatypes) are present. — check_datatype","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Bacterioplankton.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended global and datatype-specific SHARK system fields (different between different datatypes) are present in initial deliveries of data (delivery validation). — check_deliv_Bacterioplankton","title":"Check if the required and recommended global and datatype-specific SHARK system fields (different between different datatypes) are present in initial deliveries of data (delivery validation). — check_deliv_Bacterioplankton","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Bacterioplankton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended global and datatype-specific SHARK system fields (different between different datatypes) are present in initial deliveries of data (delivery validation). — check_deliv_Bacterioplankton","text":"","code":"check_deliv_Bacterioplankton(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Bacterioplankton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended global and datatype-specific SHARK system fields (different between different datatypes) are present in initial deliveries of data (delivery validation). — check_deliv_Bacterioplankton","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Bacterioplankton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended global and datatype-specific SHARK system fields (different between different datatypes) are present in initial deliveries of data (delivery validation). — check_deliv_Bacterioplankton","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Chlorophyll.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Chlorophyll","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Chlorophyll","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Chlorophyll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Chlorophyll","text":"","code":"check_deliv_Chlorophyll(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Chlorophyll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Chlorophyll","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Chlorophyll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Chlorophyll","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Epibenthos.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Epibenthos","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Epibenthos","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Epibenthos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Epibenthos","text":"","code":"check_deliv_Epibenthos(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Epibenthos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Epibenthos","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Epibenthos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Epibenthos","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_EpibenthosDropvideo.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_EpibenthosDropvideo","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_EpibenthosDropvideo","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_EpibenthosDropvideo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_EpibenthosDropvideo","text":"","code":"check_deliv_EpibenthosDropvideo(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_EpibenthosDropvideo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_EpibenthosDropvideo","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_EpibenthosDropvideo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_EpibenthosDropvideo","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_GreySeal.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_GreySeal","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_GreySeal","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_GreySeal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_GreySeal","text":"","code":"check_deliv_GreySeal(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_GreySeal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_GreySeal","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_GreySeal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_GreySeal","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_HarbourPorpoise.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_HarbourPorpoise","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_HarbourPorpoise","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_HarbourPorpoise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_HarbourPorpoise","text":"","code":"check_deliv_HarbourPorpoise(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_HarbourPorpoise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_HarbourPorpoise","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_HarbourPorpoise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_HarbourPorpoise","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_HarbourSeal.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_HarbourSeal","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_HarbourSeal","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_HarbourSeal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_HarbourSeal","text":"","code":"check_deliv_HarbourSeal(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_HarbourSeal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_HarbourSeal","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_HarbourSeal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_HarbourSeal","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_PhysicalChemical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_PhysicalChemical","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_PhysicalChemical","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_PhysicalChemical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_PhysicalChemical","text":"","code":"check_deliv_PhysicalChemical(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_PhysicalChemical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_PhysicalChemical","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_PhysicalChemical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_PhysicalChemical","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Phytoplankton.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Phytoplankton","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Phytoplankton","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Phytoplankton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Phytoplankton","text":"","code":"check_deliv_Phytoplankton(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Phytoplankton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Phytoplankton","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Phytoplankton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Phytoplankton","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Picoplankton.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Picoplankton","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Picoplankton","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Picoplankton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Picoplankton","text":"","code":"check_deliv_Picoplankton(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Picoplankton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Picoplankton","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Picoplankton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Picoplankton","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_PrimaryProduction.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_PrimaryProduction","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_PrimaryProduction","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_PrimaryProduction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_PrimaryProduction","text":"","code":"check_deliv_PrimaryProduction(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_PrimaryProduction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_PrimaryProduction","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_PrimaryProduction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_PrimaryProduction","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_RingedSeal.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_RingedSeal","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_RingedSeal","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_RingedSeal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_RingedSeal","text":"","code":"check_deliv_RingedSeal(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_RingedSeal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_RingedSeal","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_RingedSeal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_RingedSeal","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_SealPathology.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_SealPathology","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_SealPathology","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_SealPathology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_SealPathology","text":"","code":"check_deliv_SealPathology(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_SealPathology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_SealPathology","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_SealPathology.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_SealPathology","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Sedimentation.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Sedimentation","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Sedimentation","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Sedimentation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Sedimentation","text":"","code":"check_deliv_Sedimentation(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Sedimentation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Sedimentation","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Sedimentation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Sedimentation","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Zoobenthos.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Zoobenthos","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Zoobenthos","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Zoobenthos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Zoobenthos","text":"","code":"check_deliv_Zoobenthos(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Zoobenthos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Zoobenthos","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Zoobenthos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Zoobenthos","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Zooplankton.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Zooplankton","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Zooplankton","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Zooplankton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Zooplankton","text":"","code":"check_deliv_Zooplankton(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Zooplankton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Zooplankton","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Zooplankton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Zooplankton","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_depth.html","id":null,"dir":"Reference","previous_headings":"","what":"Check which points have potentially invalid depths. — check_depth","title":"Check which points have potentially invalid depths. — check_depth","text":"Check points potentially invalid depths.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_depth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check which points have potentially invalid depths. — check_depth","text":"","code":"check_depth(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_depth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check which points have potentially invalid depths. — check_depth","text":"data data frame.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_depth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check which points have potentially invalid depths. — check_depth","text":"Problematic records errors report.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_abundclass_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Abundance class exceeds 10 — check_epibenthos_abundclass_logical","title":"Check if Abundance class exceeds 10 — check_epibenthos_abundclass_logical","text":"Check Abundance class exceeds 10","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_abundclass_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Abundance class exceeds 10 — check_epibenthos_abundclass_logical","text":"","code":"check_epibenthos_abundclass_logical(data, return_df = FALSE, return_logical = FALSE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_abundclass_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Abundance class exceeds 10 — check_epibenthos_abundclass_logical","text":"data data frame. Must contain columns parameter value. return_df Logical. TRUE, return plain data.frame problematic rows. return_logical Logical. TRUE, return logical vector length nrow(data) indicating rows exceed 10 Abundance class. Overrides return_df.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_abundclass_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Abundance class exceeds 10 — check_epibenthos_abundclass_logical","text":"DT datatable, data.frame, logical vector, NULL problems found.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_counted.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_counted","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_counted","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_counted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_counted","text":"","code":"check_epibenthos_counted(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_counted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_counted","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_counted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_counted","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_cover_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Epibenthos Cover exceeds 100% — check_epibenthos_cover_logical","title":"Check if Epibenthos Cover exceeds 100% — check_epibenthos_cover_logical","text":"Check Epibenthos Cover exceeds 100%","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_cover_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Epibenthos Cover exceeds 100% — check_epibenthos_cover_logical","text":"","code":"check_epibenthos_cover_logical(data, return_df = FALSE, return_logical = FALSE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_cover_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Epibenthos Cover exceeds 100% — check_epibenthos_cover_logical","text":"data data frame. Must contain columns parameter value. return_df Logical. TRUE, return plain data.frame problematic rows. return_logical Logical. TRUE, return logical vector length nrow(data) indicating rows exceed 100% Cover. Overrides return_df.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_cover_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Epibenthos Cover exceeds 100% — check_epibenthos_cover_logical","text":"DT datatable, data.frame, logical vector, NULL problems found.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_coverclass_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Epibenthos Cover class exceeds 10 — check_epibenthos_coverclass_logical","title":"Check if Epibenthos Cover class exceeds 10 — check_epibenthos_coverclass_logical","text":"Check Epibenthos Cover class exceeds 10","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_coverclass_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Epibenthos Cover class exceeds 10 — check_epibenthos_coverclass_logical","text":"","code":"check_epibenthos_coverclass_logical(data, return_df = FALSE, return_logical = FALSE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_coverclass_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Epibenthos Cover class exceeds 10 — check_epibenthos_coverclass_logical","text":"data data frame. Must contain columns parameter value. return_df Logical. TRUE, return plain data.frame problematic rows. return_logical Logical. TRUE, return logical vector length nrow(data) indicating rows exceed 10 Cover class. Overrides return_df.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_coverclass_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Epibenthos Cover class exceeds 10 — check_epibenthos_coverclass_logical","text":"DT datatable, data.frame, logical vector, NULL problems found.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_coverpercent_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Epibenthos Cover (%) exceeds 100% — check_epibenthos_coverpercent_logical","title":"Check if Epibenthos Cover (%) exceeds 100% — check_epibenthos_coverpercent_logical","text":"Check Epibenthos Cover (%) exceeds 100%","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_coverpercent_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Epibenthos Cover (%) exceeds 100% — check_epibenthos_coverpercent_logical","text":"","code":"check_epibenthos_coverpercent_logical(data, return_df = FALSE, return_logical = FALSE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_coverpercent_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Epibenthos Cover (%) exceeds 100% — check_epibenthos_coverpercent_logical","text":"data data frame. Must contain columns parameter value. return_df Logical. TRUE, return plain data.frame problematic rows. return_logical Logical. TRUE, return logical vector length nrow(data) indicating rows exceed 100% Cover (%). Overrides return_df.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_coverpercent_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Epibenthos Cover (%) exceeds 100% — check_epibenthos_coverpercent_logical","text":"DT datatable, data.frame, logical vector, NULL problems found.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_dryweight.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_dryweight","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_dryweight","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_dryweight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_dryweight","text":"","code":"check_epibenthos_dryweight(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_dryweight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_dryweight","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_dryweight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_dryweight","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_sedimentdepos_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Sediment deposition cover (%) exceeds 100% — check_epibenthos_sedimentdepos_logical","title":"Check if Sediment deposition cover (%) exceeds 100% — check_epibenthos_sedimentdepos_logical","text":"Check Sediment deposition cover (%) exceeds 100%","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_sedimentdepos_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Sediment deposition cover (%) exceeds 100% — check_epibenthos_sedimentdepos_logical","text":"","code":"check_epibenthos_sedimentdepos_logical(data, return_df = FALSE, return_logical = FALSE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_sedimentdepos_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Sediment deposition cover (%) exceeds 100% — check_epibenthos_sedimentdepos_logical","text":"data data frame. Must contain columns parameter value. return_df Logical. TRUE, return plain data.frame problematic rows. return_logical Logical. TRUE, return logical vector length nrow(data) indicating rows exceed 100% Sediment deposition cover (%). Overrides return_df.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_sedimentdepos_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Sediment deposition cover (%) exceeds 100% — check_epibenthos_sedimentdepos_logical","text":"DT datatable, data.frame, logical vector, NULL problems found.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_specdistr_maxdepth.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_specdistr_maxdepth","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_specdistr_maxdepth","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_specdistr_maxdepth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_specdistr_maxdepth","text":"","code":"check_epibenthos_specdistr_maxdepth(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_specdistr_maxdepth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_specdistr_maxdepth","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_specdistr_maxdepth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_specdistr_maxdepth","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_specdistr_mindepth.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_specdistr_mindepth","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_specdistr_mindepth","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_specdistr_mindepth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_specdistr_mindepth","text":"","code":"check_epibenthos_specdistr_mindepth(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_specdistr_mindepth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_specdistr_mindepth","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_specdistr_mindepth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_specdistr_mindepth","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_totcover_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Epibenthos Total Cover exceeds 100% — check_epibenthos_totcover_logical","title":"Check if Epibenthos Total Cover exceeds 100% — check_epibenthos_totcover_logical","text":"Check Epibenthos Total Cover exceeds 100%","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_totcover_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Epibenthos Total Cover exceeds 100% — check_epibenthos_totcover_logical","text":"","code":"check_epibenthos_totcover_logical(data, return_df = FALSE, return_logical = FALSE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_totcover_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Epibenthos Total Cover exceeds 100% — check_epibenthos_totcover_logical","text":"data data frame. Must contain columns parameter value. return_df Logical. TRUE, return plain data.frame problematic rows. return_logical Logical. TRUE, return logical vector length nrow(data) indicating rows exceed 100% Total cover. Overrides return_df.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_totcover_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Epibenthos Total Cover exceeds 100% — check_epibenthos_totcover_logical","text":"DT datatable, data.frame, logical vector, NULL problems found.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_greyseal_counted.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_greyseal_counted","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_greyseal_counted","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_greyseal_counted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_greyseal_counted","text":"","code":"check_greyseal_counted(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_greyseal_counted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_greyseal_counted","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_greyseal_counted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_greyseal_counted","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_harbourseal_counted.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_harbourseal_counted","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_harbourseal_counted","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_harbourseal_counted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_harbourseal_counted","text":"","code":"check_harbourseal_counted(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_harbourseal_counted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_harbourseal_counted","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_harbourseal_counted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_harbourseal_counted","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_harbporp_positivemin.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_harbporp_positivemin","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_harbporp_positivemin","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_harbporp_positivemin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_harbporp_positivemin","text":"","code":"check_harbporp_positivemin(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_harbporp_positivemin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_harbporp_positivemin","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_harbporp_positivemin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_harbporp_positivemin","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_onland.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Whether Points Are Located on Land — check_onland","title":"Check Whether Points Are Located on Land — check_onland","text":"Identifies records whose coordinates fall land, optionally applying buffer allow points near coast. function supports offline online modes:","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_onland.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Whether Points Are Located on Land — check_onland","text":"","code":"check_onland(data, land = NULL, report = FALSE, buffer = 0, offline = FALSE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_onland.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Whether Points Are Located on Land — check_onland","text":"data data frame containing least sample_longitude_dd sample_latitude_dd. columns must numeric within valid ranges (-180 180 longitude, -90 90 latitude). land Optional sf object containing land polygons. Used offline mode. report Logical; TRUE, returns tibble listing rows land warnings. FALSE (default), returns subset data containing records land. buffer Numeric; distance meters inland points still considered valid. used online mode. Default 0. offline Logical; TRUE, function uses local cached shoreline. FALSE (default), OBIS web service queried.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_onland.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Whether Points Are Located on Land — check_onland","text":"report = TRUE, tibble columns: field: always NA (placeholder future extension) level: \"warning\" flagged rows row: row numbers data flagged located land message: description issue report = FALSE, returns subset data flagged rows.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_onland.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check Whether Points Are Located on Land — check_onland","text":"Offline mode (offline = TRUE): uses local simplified shoreline cached geopackage (land.gpkg). file exist, downloaded automatically cached across R sessions. Online mode (offline = FALSE): uses OBIS web service determine distance shore. function first validates longitude latitude columns using. offline mode, land converted terra::SpatVector points tested using terra::relate() detect intersections land polygons. buffer parameter ignored mode. online mode, lookup_xy() used fetch distances nearest shoreline. Points negative distances (inland) beyond buffer flagged. Warnings issued land provided online mode buffer used offline mode.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_onland.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Whether Points Are Located on Land — check_onland","text":"","code":"if (FALSE) { # \\dontrun{ # Report points on land with a 100 m buffer report <- check_onland(abra, report = TRUE, buffer = 100) print(report)  # Plot flagged points on a map plot_map_leaflet(abra[report$row, ], popup = \"id\")  # Remove points on land ok <- abra[-report$row, ] ok <- check_onland(abra, report = FALSE, buffer = 100) print(nrow(ok)) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_abund.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_abund","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_abund","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_abund.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_abund","text":"","code":"check_phytoplankton_abund(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_abund.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_abund","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_abund.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_abund","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_biovol.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_biovol","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_biovol","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_biovol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_biovol","text":"","code":"check_phytoplankton_biovol(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_biovol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_biovol","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_biovol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_biovol","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_carbon.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_carbon","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_carbon","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_carbon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_carbon","text":"","code":"check_phytoplankton_carbon(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_carbon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_carbon","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_carbon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_carbon","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_counted.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_counted","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_counted","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_counted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_counted","text":"","code":"check_phytoplankton_counted(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_counted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_counted","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_counted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_counted","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_abundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_abundance","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_abundance","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_abundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_abundance","text":"","code":"check_picoplankton_abundance(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_abundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_abundance","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_abundance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_abundance","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_biovol.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_biovol","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_biovol","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_biovol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_biovol","text":"","code":"check_picoplankton_biovol(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_biovol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_biovol","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_biovol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_biovol","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_carbon.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_carbon","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_carbon","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_carbon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_carbon","text":"","code":"check_picoplankton_carbon(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_carbon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_carbon","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_carbon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_carbon","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_counted.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_counted","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_counted","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_counted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_counted","text":"","code":"check_picoplankton_counted(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_counted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_counted","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_counted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_counted","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_primaryproduction_carbonprod.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprod","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprod","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_primaryproduction_carbonprod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprod","text":"","code":"check_primaryproduction_carbonprod(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_primaryproduction_carbonprod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprod","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_primaryproduction_carbonprod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprod","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_primaryproduction_carbonprod_hour.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprod_hour","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprod_hour","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_primaryproduction_carbonprod_hour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprod_hour","text":"","code":"check_primaryproduction_carbonprod_hour(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_primaryproduction_carbonprod_hour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprod_hour","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_primaryproduction_carbonprod_hour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprod_hour","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_primaryproduction_carbonprodlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprodlight","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprodlight","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_primaryproduction_carbonprodlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprodlight","text":"","code":"check_primaryproduction_carbonprodlight(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_primaryproduction_carbonprodlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprodlight","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_primaryproduction_carbonprodlight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprodlight","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_ringedseal_calccounted.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_ringedseal_calccounted","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_ringedseal_calccounted","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_ringedseal_calccounted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_ringedseal_calccounted","text":"","code":"check_ringedseal_calccounted(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_ringedseal_calccounted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_ringedseal_calccounted","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_ringedseal_calccounted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_ringedseal_calccounted","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_station_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Station distance check using SMHI station list — check_station_distance","title":"Station distance check using SMHI station list — check_station_distance","text":"Matches reported station names data curated station list (\"station.txt\"), synced \"Stationsregistret\": https://stationsregister.miljodatasamverkan.se/, checks stations within preset distance limits.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_station_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Station distance check using SMHI station list — check_station_distance","text":"","code":"check_station_distance(names, station_file = NULL)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_station_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Station distance check using SMHI station list — check_station_distance","text":"names Character vector station names check. station_file Optional path custom station file (tab-delimited). NULL (default), function extract use bundled \"station.zip\" SHARK4R package.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_value_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check logical assumptions of data for specific variables and parameters — check_value_logical","title":"Check logical assumptions of data for specific variables and parameters — check_value_logical","text":"Check logical assumptions data specific variables parameters","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_value_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check logical assumptions of data for specific variables and parameters — check_value_logical","text":"","code":"check_value_logical(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_value_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check logical assumptions of data for specific variables and parameters — check_value_logical","text":"data data frame. Must contain column named value.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_value_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check logical assumptions of data for specific variables and parameters — check_value_logical","text":"DT datatable problematic entries, NULL (invisibly) values valid.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zero_positions.html","id":null,"dir":"Reference","previous_headings":"","what":"Check logical assumptions of data for station positions — check_zero_positions","title":"Check logical assumptions of data for station positions — check_zero_positions","text":"Check logical assumptions data station positions","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zero_positions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check logical assumptions of data for station positions — check_zero_positions","text":"","code":"check_zero_positions(   data,   coord = \"longitude\",   return_df = FALSE,   return_logical = FALSE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zero_positions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check logical assumptions of data for station positions — check_zero_positions","text":"data data frame. Must contain sample_longitude_dd /sample_latitude_dd. coord Character. coordinate(s) check: \"longitude\", \"latitude\", \"\". Default = \"longitude\". return_df Logical. TRUE, return plain data.frame problematic rows instead DT datatable. Default = FALSE. return_logical Logical. TRUE, return logical vector length nrow(data) indicating rows zero selected coordinate(s). Overrides return_df. Default = FALSE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zero_positions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check logical assumptions of data for station positions — check_zero_positions","text":"DT datatable, data.frame, logical vector, NULL (problems found return_logical = FALSE).","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zero_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Check logical assumptions of data for specific variables and parameters — check_zero_value","title":"Check logical assumptions of data for specific variables and parameters — check_zero_value","text":"Check logical assumptions data specific variables parameters","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zero_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check logical assumptions of data for specific variables and parameters — check_zero_value","text":"","code":"check_zero_value(data, return_df = FALSE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zero_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check logical assumptions of data for specific variables and parameters — check_zero_value","text":"data data frame. Must contain column named value. return_df Logical. TRUE, return plain data.frame problematic rows instead DT datatable. Default = FALSE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zero_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check logical assumptions of data for specific variables and parameters — check_zero_value","text":"DT datatable zero-value records, NULL (invisibly) none found.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_BQIm.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_BQIm","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_BQIm","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_BQIm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_BQIm","text":"","code":"check_zoobenthos_BQIm(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_BQIm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_BQIm","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_BQIm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_BQIm","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_BQIm_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check logical relationship between Abundance and BQIm — check_zoobenthos_BQIm_logical","title":"Check logical relationship between Abundance and BQIm — check_zoobenthos_BQIm_logical","text":"Check logical relationship Abundance BQIm","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_BQIm_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check logical relationship between Abundance and BQIm — check_zoobenthos_BQIm_logical","text":"","code":"check_zoobenthos_BQIm_logical(data, return_df = FALSE, return_logical = FALSE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_BQIm_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check logical relationship between Abundance and BQIm — check_zoobenthos_BQIm_logical","text":"data data frame. Must contain columns parameter value. return_df Logical. TRUE, return plain data.frame problematic rows. return_logical Logical. TRUE, return logical vector length nrow(data) indicating rows violate logical assumption. Overrides return_df.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_BQIm_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check logical relationship between Abundance and BQIm — check_zoobenthos_BQIm_logical","text":"DT datatable, data.frame, logical vector, NULL problems found.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_abund.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_abund","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_abund","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_abund.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_abund","text":"","code":"check_zoobenthos_abund(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_abund.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_abund","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_abund.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_abund","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_counted.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_counted","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_counted","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_counted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_counted","text":"","code":"check_zoobenthos_counted(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_counted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_counted","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_counted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_counted","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_wetweight.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_wetweight","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_wetweight","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_wetweight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_wetweight","text":"","code":"check_zoobenthos_wetweight(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_wetweight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_wetweight","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_wetweight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_wetweight","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_wetweight_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Wet weight measurements are zero — check_zoobenthos_wetweight_logical","title":"Check if Wet weight measurements are zero — check_zoobenthos_wetweight_logical","text":"Check Wet weight measurements zero","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_wetweight_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Wet weight measurements are zero — check_zoobenthos_wetweight_logical","text":"","code":"check_zoobenthos_wetweight_logical(data, return_df = FALSE, return_logical = FALSE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_wetweight_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Wet weight measurements are zero — check_zoobenthos_wetweight_logical","text":"data data frame. Must contain columns parameter value. return_df Logical. TRUE, return plain data.frame problematic rows. return_logical Logical. TRUE, return logical vector length nrow(data) indicating rows Wet weight == 0. Overrides return_df.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_wetweight_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Wet weight measurements are zero — check_zoobenthos_wetweight_logical","text":"DT datatable, data.frame, logical vector, NULL problems found.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_abund.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_abund","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_abund","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_abund.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_abund","text":"","code":"check_zooplankton_abund(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_abund.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_abund","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_abund.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_abund","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_carbon.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_carbon","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_carbon","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_carbon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_carbon","text":"","code":"check_zooplankton_carbon(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_carbon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_carbon","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_carbon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_carbon","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_counted.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_counted","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_counted","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_counted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_counted","text":"","code":"check_zooplankton_counted(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_counted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_counted","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_counted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_counted","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_length_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_length_mean","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_length_mean","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_length_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_length_mean","text":"","code":"check_zooplankton_length_mean(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_length_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_length_mean","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_length_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_length_mean","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_length_median.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_length_median","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_length_median","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_length_median.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_length_median","text":"","code":"check_zooplankton_length_median(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_length_median.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_length_median","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_length_median.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_length_median","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_wetweight.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_wetweight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight","text":"","code":"check_zooplankton_wetweight(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_wetweight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_wetweight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_wetweight_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight_area","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight_area","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_wetweight_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight_area","text":"","code":"check_zooplankton_wetweight_area(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_wetweight_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight_area","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_wetweight_area.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight_area","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_wetweight_volume.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight_volume","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight_volume","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_wetweight_volume.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight_volume","text":"","code":"check_zooplankton_wetweight_volume(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_wetweight_volume.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight_volume","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_wetweight_volume.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight_volume","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/clean_shark4r_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean SHARK4R cache by file age and session — clean_shark4r_cache","title":"Clean SHARK4R cache by file age and session — clean_shark4r_cache","text":"Deletes cached files SHARK4R cache directory older specified number days, also clears -memory session cache used functions like get_dyntaxa_dwca().","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/clean_shark4r_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean SHARK4R cache by file age and session — clean_shark4r_cache","text":"","code":"clean_shark4r_cache(   days = 1,   cache_dir = tools::R_user_dir(\"SHARK4R\", \"cache\"),   clear_perm_cache = FALSE,   search_pattern = NULL,   verbose = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/clean_shark4r_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean SHARK4R cache by file age and session — clean_shark4r_cache","text":"days Numeric; remove files older number days. Default 1. cache_dir Character; path cache directory clean. Defaults SHARK4R cache directory user-specific R folder (via tools::R_user_dir(\"SHARK4R\", \"cache\")). can override parameter custom cache locations. clear_perm_cache Logical. TRUE, filed cached across R sessions cleared. Defaults FALSE. search_pattern Character; optional regex pattern filter files consider deletion. verbose Logical. TRUE, displays messages cache cleaning progress. Defaults TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/clean_shark4r_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean SHARK4R cache by file age and session — clean_shark4r_cache","text":"Invisible NULL. Messages printed deleted whether -memory session cache cleared.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/clean_shark4r_cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean SHARK4R cache by file age and session — clean_shark4r_cache","text":"cache automatically cleared 24h.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/clean_shark4r_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean SHARK4R cache by file age and session — clean_shark4r_cache","text":"","code":"if (FALSE) { # \\dontrun{   # Remove files older than 60 days and clear session cache   clean_shark4r_cache(days = 60) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/construct_dyntaxa_missing_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct Dyntaxa Taxonomy Table From Individual API — construct_dyntaxa_missing_table","title":"Construct Dyntaxa Taxonomy Table From Individual API — construct_dyntaxa_missing_table","text":"internal function constructs taxonomy table individually querying SLU Artdatabanken API (Dyntaxa) using list parent taxon IDs. fetches taxonomy information provided taxon IDs organizes hierarchical structure. function capable filtering based recommended (accepted) names, handling genus-related children, formatting results SHARK output.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/construct_dyntaxa_missing_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct Dyntaxa Taxonomy Table From Individual API — construct_dyntaxa_missing_table","text":"","code":"construct_dyntaxa_missing_table(   parent_ids,   subscription_key = Sys.getenv(\"DYNTAXA_KEY\"),   shark_output = TRUE,   recommended_only = TRUE,   add_genus_children = FALSE,   drop_morphotypes = TRUE,   add_hierarchy = FALSE,   verbose = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/construct_dyntaxa_missing_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct Dyntaxa Taxonomy Table From Individual API — construct_dyntaxa_missing_table","text":"parent_ids list vector parent taxon IDs taxonomy information requested. IDs must valid according Dyntaxa API can combination single multiple IDs. subscription_key Dyntaxa API subscription key. default, key read environment variable DYNTAXA_KEY. can provide key three ways: Directly parameter: construct_dyntaxa_missing_table(list(c(5000055, 6011755)), subscription_key = \"your_key_here\") Temporarily session: Sys.setenv(DYNTAXA_KEY = \"your_key_here\") Permanently across sessions adding ~/.Renviron file. Use usethis::edit_r_environ() open file, add: DYNTAXA_KEY=your_key_here shark_output Logical. TRUE, function return columns formatted match SHARK data submission format. FALSE, return broader set taxonomy information. Defaults TRUE. recommended_only Logical. TRUE, recommended (accepted) names returned. Defaults TRUE. add_genus_children Logical. TRUE, function include valid genus-level children parent taxon. Defaults FALSE. drop_morphotypes Logical. TRUE, taxa rank \"MorphoType\" excluded output simplify taxonomy structure. Defaults TRUE. add_hierarchy Logical. TRUE, hierarchical relationship taxa (parent child) included output. Defaults FALSE. verbose Logical. TRUE, progress bar displayed execution. Defaults TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/construct_dyntaxa_missing_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct Dyntaxa Taxonomy Table From Individual API — construct_dyntaxa_missing_table","text":"data frame taxonomy information, including taxon IDs, parent IDs, ranks, names, details. data frame may also include hierarchical information depending parameters set.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/construct_dyntaxa_missing_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct Dyntaxa Taxonomy Table From Individual API — construct_dyntaxa_missing_table","text":"valid Dyntaxa API subscription key required. can request free key \"Taxonomy\" service ArtDatabanken API portal: https://api-portal.artdatabanken.se/ Note: Please review API conditions register access using API. Data collected API stored SLU Artdatabanken. Please also note authors SHARK4R affiliated SLU Artdatabanken.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/construct_dyntaxa_missing_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct Dyntaxa Taxonomy Table From Individual API — construct_dyntaxa_missing_table","text":"","code":"if (FALSE) { # \\dontrun{ # Construct Dyntaxa taxonomy table for taxon IDs 238366 and 1010380 parent_ids <- get_dyntaxa_parent_ids(c(238366, 1010380), \"your_subscription_key\") taxonomy_table <- SHARK4R:::construct_dyntaxa_missing_table(parent_ids, \"your_subscription_key\") print(taxonomy_table) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/construct_dyntaxa_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct Dyntaxa Taxonomy Table From API — construct_dyntaxa_table","title":"Construct Dyntaxa Taxonomy Table From API — construct_dyntaxa_table","text":"function constructs taxonomy table based Dyntaxa taxon IDs. queries SLU Artdatabanken API (Dyntaxa) fetch taxonomy information organizes data hierarchical table.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/construct_dyntaxa_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct Dyntaxa Taxonomy Table From API — construct_dyntaxa_table","text":"","code":"construct_dyntaxa_table(   taxon_ids,   subscription_key = Sys.getenv(\"DYNTAXA_KEY\"),   shark_output = TRUE,   add_parents = TRUE,   add_descendants = FALSE,   add_descendants_rank = \"genus\",   add_synonyms = TRUE,   add_missing_taxa = FALSE,   add_hierarchy = FALSE,   verbose = TRUE,   add_genus_children = deprecated(),   recommended_only = deprecated(),   parent_ids = deprecated() )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/construct_dyntaxa_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct Dyntaxa Taxonomy Table From API — construct_dyntaxa_table","text":"taxon_ids integer vector containing taxon IDs taxonomy information requested. IDs correspond specific taxonomic entities within Dyntaxa database. subscription_key Dyntaxa API subscription key. default, key read environment variable DYNTAXA_KEY. can provide key three ways: Directly parameter: construct_dyntaxa_table(238366, subscription_key = \"your_key_here\") Temporarily session: Sys.setenv(DYNTAXA_KEY = \"your_key_here\") Permanently across sessions adding ~/.Renviron file. Use usethis::edit_r_environ() open file, add: DYNTAXA_KEY=your_key_here shark_output Logical. TRUE, function return table formatted SHARK-compatible columns. FALSE, available columns returned. Default TRUE. add_parents Logical. TRUE, function include parent taxa (higher ranks) specified taxon IDs output. Default TRUE. add_descendants Logical. TRUE, output include descendant taxa (lower ranks) specified taxon IDs rank specified add_descendants_rank. Default FALSE. add_descendants_rank Character string specifying rank descendant taxa include. Allowed values \"kingdom\", \"phylum\", \"class\", \"order\", \"family\", \"genus\", \"species\". Default \"genus\". add_synonyms Logical. TRUE, function include synonyms accepted taxa output. Default TRUE. add_missing_taxa Logical. TRUE, function attempt fetch missing taxa (.e., taxa found initial Dyntaxa DwC-query, species complexes). Default FALSE. add_hierarchy Logical. TRUE, function add hierarchy column indicating taxonomic relationships (e.g., parent-child) among taxa. Default FALSE. verbose Logical. TRUE, function print additional messages provide feedback progress. Default TRUE. add_genus_children Use add_descendants instead. recommended_only Use add_synonyms instead. parent_ids Use taxon_ids instead. construct_dyntaxa_table now handles taxon IDs.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/construct_dyntaxa_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct Dyntaxa Taxonomy Table From API — construct_dyntaxa_table","text":"data frame representing constructed taxonomy table.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/construct_dyntaxa_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct Dyntaxa Taxonomy Table From API — construct_dyntaxa_table","text":"valid Dyntaxa API subscription key required. can request free key \"Taxonomy\" service ArtDatabanken API portal: https://api-portal.artdatabanken.se/ Note: Please review API conditions register access using API. Data collected API stored SLU Artdatabanken. Please also note authors SHARK4R affiliated SLU Artdatabanken.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/construct_dyntaxa_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct Dyntaxa Taxonomy Table From API — construct_dyntaxa_table","text":"","code":"if (FALSE) { # \\dontrun{ # Construct Dyntaxa taxonomy table for taxon IDs 238366 and 1010380 taxon_ids <- c(238366, 1010380) taxonomy_table <- construct_dyntaxa_table(taxon_ids, \"your_subscription_key\") print(taxonomy_table) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Defunct functions — defunct","title":"Defunct functions — defunct","text":"functions deprecated made defunct. known replacement, calling function tell .","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defunct functions — defunct","text":"","code":"# Deprecated in 0.1.7.9000 -------------------------------------  get_shark_table(...)  # Deprecated in 0.1.4 -------------------------------------  check_data_version(...)  update_data(...)  download_sharkdata(...)  load_dataset_names(...)  load_sharkdata(...)  load_dataset_types(...)  download_file(...)  year_filter(datasets, year)  data_deliverer_filter(datasets, data_deliverer)  read_data(temp, filtered_datasets, dataset_name)  validate_dataset_names(filtered_datasets, dataset_names)  load_dyntaxa_taxonomy(dyntaxa_id_input)  read_species_list(filename)  gather_species_info(shark_species_list)  add_species_info(shark_species_list, species)  load_worms_taxonomy(aphia_id_input)  gather_worms_species_info(taxa_worms)  add_worms_species_info(taxa_worms, species)  get_geographical_info(latitude_dd, longitude_dd)  filter_outdated_datasets(data, datasets_to_update)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/extract_algaebase_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract specific field from AlgaeBase query result — extract_algaebase_field","title":"Extract specific field from AlgaeBase query result — extract_algaebase_field","text":"helper function extracts specified field list object returned AlgaeBase query. requested field present, returns NA indicate missing data.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/extract_algaebase_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract specific field from AlgaeBase query result — extract_algaebase_field","text":"","code":"extract_algaebase_field(query_result, field_name)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/extract_algaebase_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract specific field from AlgaeBase query result — extract_algaebase_field","text":"query_result list object containing output AlgaeBase query. field_name character string specifying field name extract query result.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/extract_algaebase_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract specific field from AlgaeBase query result — extract_algaebase_field","text":"character vector containing values specified field, NA field found.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/extract_algaebase_field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract specific field from AlgaeBase query result — extract_algaebase_field","text":"","code":"# Example output from an AlgaeBase query query_result <- list(species = \"Skeletonema marinoi\", kingdom = \"Chromista\") field_value <- SHARK4R:::extract_algaebase_field(query_result, \"species\") print(field_value) #> [1] \"Skeletonema marinoi\""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/fill_na_below_first_non_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to fill NA values below the first non-NA value in a vector — fill_na_below_first_non_na","title":"Function to fill NA values below the first non-NA value in a vector — fill_na_below_first_non_na","text":"internal function fills NA values first non-NA value vector.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/fill_na_below_first_non_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to fill NA values below the first non-NA value in a vector — fill_na_below_first_non_na","text":"","code":"fill_na_below_first_non_na(x)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/fill_na_below_first_non_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to fill NA values below the first non-NA value in a vector — fill_na_below_first_non_na","text":"x vector.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/fill_na_below_first_non_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to fill NA values below the first non-NA value in a vector — fill_na_below_first_non_na","text":"vector NAs filled first non-NA value.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/find_descendants.html","id":null,"dir":"Reference","previous_headings":"","what":"Find All Descendants of a Taxon — find_descendants","title":"Find All Descendants of a Taxon — find_descendants","text":"helper function recursively finds descendant taxa given taxon ID traversing parent-child hierarchy provided dataset.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/find_descendants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find All Descendants of a Taxon — find_descendants","text":"","code":"find_descendants(taxon_id, data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/find_descendants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find All Descendants of a Taxon — find_descendants","text":"taxon_id character string representing taxon ID find descendants. data data frame containing taxonomic information columns taxonId parentNameUsageID.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/find_descendants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find All Descendants of a Taxon — find_descendants","text":"tibble containing descendants given taxon, including taxonId, parentNameUsageID, columns present input data.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/find_descendants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find All Descendants of a Taxon — find_descendants","text":"","code":"# Example data data <- dplyr::tibble(   taxonId = c(\"1\", \"2\", \"3\", \"4\"),   parentNameUsageID = c(NA, \"1\", \"2\", \"2\"),   scientificName = c(\"Root\", \"Child1\", \"Child2\", \"Grandchild1\") )  # Find descendants of taxon \"1\" SHARK4R:::find_descendants(\"1\", data) #> # A tibble: 3 × 3 #>   taxonId parentNameUsageID scientificName #>   <chr>   <chr>             <chr>          #> 1 2       1                 Child1         #> 2 3       2                 Child2         #> 3 4       2                 Grandchild1"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_algaebase_genus.html","id":null,"dir":"Reference","previous_headings":"","what":"Search AlgaeBase for Information About a Genus of Algae — get_algaebase_genus","title":"Search AlgaeBase for Information About a Genus of Algae — get_algaebase_genus","text":"function searches AlgaeBase API genus information returns detailed taxonomic data, including higher taxonomy, taxonomic status, scientific names, related metadata.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_algaebase_genus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search AlgaeBase for Information About a Genus of Algae — get_algaebase_genus","text":"","code":"get_algaebase_genus(   genus,   subscription_key = Sys.getenv(\"ALGAEBASE_KEY\"),   higher = TRUE,   unparsed = FALSE,   newest_only = TRUE,   exact_matches_only = TRUE,   apikey = deprecated() )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_algaebase_genus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search AlgaeBase for Information About a Genus of Algae — get_algaebase_genus","text":"genus genus name search (character string). parameter required. subscription_key character string containing API key accessing AlgaeBase API. default, key read environment variable ALGAEBASE_KEY. can provide key three ways: Directly parameter: get_algaebase_genus(\"Skeletonema\", subscription_key = \"your_key_here\") Temporarily session: Sys.setenv(ALGAEBASE_KEY = \"your_key_here\") Permanently across sessions adding ~/.Renviron file. Use usethis::edit_r_environ() open file, add: ALGAEBASE_KEY=your_key_here higher boolean flag indicating whether include higher taxonomy output (default TRUE). unparsed boolean flag indicating whether return raw JSON output API (default FALSE). newest_only boolean flag return recent entry (default TRUE). exact_matches_only boolean flag limit results exact matches (default TRUE). apikey Use subscription_key instead.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_algaebase_genus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search AlgaeBase for Information About a Genus of Algae — get_algaebase_genus","text":"data frame containing taxonomic data AlgaeBase following possible columns: data frame following columns: id — AlgaeBase identifier. accepted_name — Accepted scientific name (different input). input_name — genus name supplied user. input_match — Indicator exact match (1 = exact, 0 = exact). currently_accepted — Indicator taxon currently accepted (1 = TRUE, 0 = FALSE). genus_only — Indicator search genus (1 = genus, 0 = genus + species). kingdom, phylum, class, order, family — Higher taxonomy (returned higher = TRUE). taxonomic_status — Status taxon (e.g., currently accepted, synonym, unverified). taxon_rank — Taxonomic rank accepted name (e.g., genus, species). mod_date — Date entry last modified. long_name — Full scientific name including author date (available). authorship — Author information (available).","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_algaebase_genus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search AlgaeBase for Information About a Genus of Algae — get_algaebase_genus","text":"valid API key requested AlgaeBase team.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_algaebase_genus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search AlgaeBase for Information About a Genus of Algae — get_algaebase_genus","text":"","code":"if (FALSE) { # \\dontrun{   get_algaebase_genus(\"Anabaena\", subscription_key = \"your_api_key\") } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_algaebase_species.html","id":null,"dir":"Reference","previous_headings":"","what":"AlgaeBase Species Search — get_algaebase_species","title":"AlgaeBase Species Search — get_algaebase_species","text":"function searches AlgaeBase API species based genus species names. allows flexible search parameters filtering exact matches, returning recent results, including higher taxonomy details.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_algaebase_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AlgaeBase Species Search — get_algaebase_species","text":"","code":"get_algaebase_species(   genus,   species,   subscription_key = Sys.getenv(\"ALGAEBASE_KEY\"),   higher = TRUE,   unparsed = FALSE,   newest_only = TRUE,   exact_matches_only = TRUE,   apikey = deprecated() )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_algaebase_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AlgaeBase Species Search — get_algaebase_species","text":"genus character string specifying genus name. species character string specifying species specific epithet. subscription_key character string containing API key accessing AlgaeBase API. default, key read environment variable ALGAEBASE_KEY. can provide key three ways: Directly parameter: get_algaebase_species(\"Skeletonema\", \"marinoi\", subscription_key = \"your_key_here\") Temporarily session: Sys.setenv(ALGAEBASE_KEY = \"your_key_here\") Permanently across sessions adding ~/.Renviron file. Use usethis::edit_r_environ() open file, add: ALGAEBASE_KEY=your_key_here higher logical value indicating whether include higher taxonomy details (default TRUE). unparsed logical value indicating whether print full JSON response API (default FALSE). newest_only logical value indicating whether return recent entries (default TRUE). exact_matches_only logical value indicating whether return exact matches (default TRUE). apikey Use subscription_key instead.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_algaebase_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AlgaeBase Species Search — get_algaebase_species","text":"data frame details species, including: taxonomic_status — current status taxon (e.g., accepted, synonym, unverified). taxon_rank — rank taxon (e.g., species, genus). accepted_name — currently accepted scientific name, applicable. authorship — Author information scientific name (available). mod_date — Date taxonomic record last modified. ... — relevant information returned data source.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_algaebase_species.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"AlgaeBase Species Search — get_algaebase_species","text":"valid API key requested AlgaeBase team. function queries AlgaeBase API species based genus species names, filters results based various parameters. function handles different taxonomic ranks formats output easy use. can merge higher taxonomy data requested.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_algaebase_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AlgaeBase Species Search — get_algaebase_species","text":"","code":"if (FALSE) { # \\dontrun{ # Search for a species with exact matches only, return the most recent results result <- get_algaebase_species(   genus = \"Skeletonema\", species = \"marinoi\", subscription_key = \"your_api_key\" )  # Print result print(result) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_all_parents.html","id":null,"dir":"Reference","previous_headings":"","what":"Get All Parent Taxa for a Set of Taxon IDs — get_all_parents","title":"Get All Parent Taxa for a Set of Taxon IDs — get_all_parents","text":"helper function iteratively retrieves parent taxa given set initial taxon IDs, traversing taxonomic hierarchy root (taxa parents) reached.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_all_parents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get All Parent Taxa for a Set of Taxon IDs — get_all_parents","text":"","code":"get_all_parents(data, initial_taxon_ids)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_all_parents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get All Parent Taxa for a Set of Taxon IDs — get_all_parents","text":"data data frame containing taxonomic information columns taxonId parentNameUsageID. data can collected using get_dyntaxa_dwca() function. initial_taxon_ids character vector initial taxon IDs retrieve parent taxa. IDs correspond taxonId column dataset.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_all_parents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get All Parent Taxa for a Set of Taxon IDs — get_all_parents","text":"tibble containing parent taxa given initial taxon IDs, including taxonId, parentNameUsageID, columns present input data.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_all_parents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get All Parent Taxa for a Set of Taxon IDs — get_all_parents","text":"","code":"# Example data data <- dplyr::tibble(   taxonId = c(\"1\", \"2\", \"3\", \"4\"),   parentNameUsageID = c(NA, \"1\", \"1\", \"2\"),   scientificName = c(\"Root\", \"Child1\", \"Child2\", \"Grandchild1\") )  # Find all parents of taxon IDs \"3\" and \"4\" SHARK4R:::get_all_parents(data, initial_taxon_ids = c(\"3\", \"4\")) #> # A tibble: 0 × 3 #> # ℹ 3 variables: taxonId <chr>, parentNameUsageID <chr>, scientificName <chr>"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_children_hierarchy.html","id":null,"dir":"Reference","previous_headings":"","what":"Get children hierarchies for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_hierarchy","title":"Get children hierarchies for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_hierarchy","text":"function queries SLU Artdatabanken API (Dyntaxa) retrieve children taxon hierarchy information specified taxon IDs. constructs request provided taxon IDs, sends request SLU Artdatabanken API, processes response return data frame taxon children.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_children_hierarchy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get children hierarchies for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_hierarchy","text":"","code":"get_dyntaxa_children_hierarchy(   taxon_ids,   subscription_key = Sys.getenv(\"DYNTAXA_KEY\"),   levels = 1,   main_children = TRUE,   verbose = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_children_hierarchy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get children hierarchies for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_hierarchy","text":"taxon_ids vector numeric taxon IDs children taxon IDs requested. subscription_key Dyntaxa API subscription key. default, key read environment variable DYNTAXA_KEY. can provide key three ways: Directly parameter: get_dyntaxa_children_hierarchy(1010608, subscription_key = \"your_key_here\") Temporarily session: Sys.setenv(DYNTAXA_KEY = \"your_key_here\") Permanently across sessions adding ~/.Renviron file. Use usethis::edit_r_environ() open file, add: DYNTAXA_KEY=your_key_here levels Integer. Default 1 main_children Logical. Default TRUE. verbose Logical. Default TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_children_hierarchy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get children hierarchies for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_hierarchy","text":"data frame containing children taxon information corresponding specified taxon IDs.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_children_hierarchy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get children hierarchies for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_hierarchy","text":"valid Dyntaxa API subscription key required. can request free key \"Taxonomy\" service ArtDatabanken API portal: https://api-portal.artdatabanken.se/ Note: Please review API conditions register access using API. Data collected API stored SLU Artdatabanken. Please also note authors SHARK4R affiliated SLU Artdatabanken.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_children_hierarchy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get children hierarchies for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_hierarchy","text":"","code":"if (FALSE) { # \\dontrun{ # Get children taxon hierarchy for taxon IDs 1010608 and 5000062 children_hierarchy <- get_dyntaxa_children_hierarchy(c(1010608, 5000062), \"your_subscription_key\") print(children_hierarchy) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_children_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get children taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_ids","title":"Get children taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_ids","text":"function queries SLU Artdatabanken API (Dyntaxa) retrieve children taxon IDs specified taxon IDs. constructs request provided taxon IDs, sends request SLU Artdatabanken API, processes response return list children taxon IDs.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_children_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get children taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_ids","text":"","code":"get_dyntaxa_children_ids(   taxon_ids,   subscription_key = Sys.getenv(\"DYNTAXA_KEY\"),   main_children = TRUE,   verbose = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_children_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get children taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_ids","text":"taxon_ids vector numeric taxon IDs children taxon IDs requested. subscription_key Dyntaxa API subscription key. default, key read environment variable DYNTAXA_KEY. can provide key three ways: Directly parameter: get_dyntaxa_children_ids(1010608, subscription_key = \"your_key_here\") Temporarily session: Sys.setenv(DYNTAXA_KEY = \"your_key_here\") Permanently across sessions adding ~/.Renviron file. Use usethis::edit_r_environ() open file, add: DYNTAXA_KEY=your_key_here main_children Logical. Default TRUE. verbose Logical. Default TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_children_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get children taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_ids","text":"list containing children taxon IDs corresponding specified taxon IDs.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_children_ids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get children taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_ids","text":"valid Dyntaxa API subscription key required. can request free key \"Taxonomy\" service ArtDatabanken API portal: https://api-portal.artdatabanken.se/ Note: Please review API conditions register access using API. Data collected API stored SLU Artdatabanken. Please also note authors SHARK4R affiliated SLU Artdatabanken.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_children_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get children taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_ids","text":"","code":"if (FALSE) { # \\dontrun{ # Get children taxon IDs for taxon IDs 1010608 and 5000062 children_ids <- get_dyntaxa_children_ids(c(1010608, 5000062), \"your_subscription_key\") print(children_ids) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_dwca.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and Read Darwin Core Archive Files from Dyntaxa — get_dyntaxa_dwca","title":"Download and Read Darwin Core Archive Files from Dyntaxa — get_dyntaxa_dwca","text":"function downloads complete Darwin Core Archive (DwCA) Dyntaxa SLU Artdatabanken API, extracts archive, reads specified CSV file R.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_dwca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and Read Darwin Core Archive Files from Dyntaxa — get_dyntaxa_dwca","text":"","code":"get_dyntaxa_dwca(   subscription_key = Sys.getenv(\"DYNTAXA_KEY\"),   file_to_read = \"Taxon.csv\",   force = FALSE,   verbose = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_dwca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and Read Darwin Core Archive Files from Dyntaxa — get_dyntaxa_dwca","text":"subscription_key Dyntaxa API subscription key. default, key read environment variable DYNTAXA_KEY. can provide key three ways: Directly parameter: get_dyntaxa_dwca(subscription_key = \"your_key_here\") Temporarily session: Sys.setenv(DYNTAXA_KEY = \"your_key_here\") Permanently across sessions adding ~/.Renviron file. Use usethis::edit_r_environ() open file, add: DYNTAXA_KEY=your_key_here file_to_read string specifying name CSV file read extracted archive. Allowed options : \"Reference.csv\", \"SpeciesDistribution.csv\", \"Taxon.csv\", \"VernacularName.csv\". Defaults \"Taxon.csv\". force logical value indicating whether force fresh download archive, even cached copy available. Defaults FALSE. verbose logical value indicating whether show download progress. Defaults TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_dwca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and Read Darwin Core Archive Files from Dyntaxa — get_dyntaxa_dwca","text":"tibble containing data specified CSV file.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_dwca.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download and Read Darwin Core Archive Files from Dyntaxa — get_dyntaxa_dwca","text":"default, archive downloaded per R session. subsequent calls, function reuses cached copy extracted files avoid repeated downloads. Use force parameter re-download archive needed. valid Dyntaxa API subscription key required. can request free key \"Taxonomy\" service ArtDatabanken API portal: https://api-portal.artdatabanken.se/ Note: Please review API conditions register access using API. Data collected API stored SLU Artdatabanken. Please also note authors SHARK4R affiliated SLU Artdatabanken.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_dwca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download and Read Darwin Core Archive Files from Dyntaxa — get_dyntaxa_dwca","text":"","code":"if (FALSE) { # \\dontrun{ # Provide your Dyntaxa API subscription key subscription_key <- \"your_subscription_key\"  # Download and read the Taxon.csv file taxon_data <- get_dyntaxa_dwca(subscription_key, file_to_read = \"Taxon.csv\") } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_parent_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get parent taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_parent_ids","title":"Get parent taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_parent_ids","text":"function queries SLU Artdatabanken API (Dyntaxa) retrieve parent taxon IDs specified taxon IDs. constructs request provided taxon IDs, sends request SLU Artdatabanken API, processes response return list parent taxon IDs.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_parent_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get parent taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_parent_ids","text":"","code":"get_dyntaxa_parent_ids(   taxon_ids,   subscription_key = Sys.getenv(\"DYNTAXA_KEY\"),   verbose = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_parent_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get parent taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_parent_ids","text":"taxon_ids vector numeric taxon IDs parent taxon IDs requested. subscription_key Dyntaxa API subscription key. default, key read environment variable DYNTAXA_KEY. can provide key three ways: Directly parameter: get_dyntaxa_parent_ids(238366, subscription_key = \"your_key_here\") Temporarily session: Sys.setenv(DYNTAXA_KEY = \"your_key_here\") Permanently across sessions adding ~/.Renviron file. Use usethis::edit_r_environ() open file, add: DYNTAXA_KEY=your_key_here verbose Logical. Default TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_parent_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get parent taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_parent_ids","text":"list containing parent taxon IDs corresponding specified taxon IDs.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_parent_ids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get parent taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_parent_ids","text":"valid Dyntaxa API subscription key required. can request free key \"Taxonomy\" service ArtDatabanken API portal: https://api-portal.artdatabanken.se/ Note: Please review API conditions register access using API. Data collected API stored SLU Artdatabanken. Please also note authors SHARK4R affiliated SLU Artdatabanken.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_parent_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get parent taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_parent_ids","text":"","code":"if (FALSE) { # \\dontrun{ # Get parent taxon IDs for taxon IDs 238366 and 1010380 parent_ids <- get_dyntaxa_parent_ids(c(238366, 1010380), \"your_subscription_key\") print(parent_ids) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_records.html","id":null,"dir":"Reference","previous_headings":"","what":"Get taxonomic information from SLU Artdatabanken API for specified taxon IDs — get_dyntaxa_records","title":"Get taxonomic information from SLU Artdatabanken API for specified taxon IDs — get_dyntaxa_records","text":"function queries SLU Artdatabanken API (Dyntaxa) retrieve taxonomic information specified taxon IDs. constructs request provided taxon IDs, sends request SLU Artdatabanken API, processes response return taxonomic information data frame.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get taxonomic information from SLU Artdatabanken API for specified taxon IDs — get_dyntaxa_records","text":"","code":"get_dyntaxa_records(taxon_ids, subscription_key = Sys.getenv(\"DYNTAXA_KEY\"))"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_records.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get taxonomic information from SLU Artdatabanken API for specified taxon IDs — get_dyntaxa_records","text":"taxon_ids vector numeric taxon IDs (Dyntaxa ID) taxonomic information requested. subscription_key Dyntaxa API subscription key. default, key read environment variable DYNTAXA_KEY. can provide key three ways: Directly parameter: get_dyntaxa_records(238366, subscription_key = \"your_key_here\") Temporarily session: Sys.setenv(DYNTAXA_KEY = \"your_key_here\") Permanently across sessions adding ~/.Renviron file. Use usethis::edit_r_environ() open file, add: DYNTAXA_KEY=your_key_here","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_records.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get taxonomic information from SLU Artdatabanken API for specified taxon IDs — get_dyntaxa_records","text":"data frame containing taxonomic information specified taxon IDs. Columns include taxonId, names, category, rank, isRecommended, parentTaxonId.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_records.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get taxonomic information from SLU Artdatabanken API for specified taxon IDs — get_dyntaxa_records","text":"valid Dyntaxa API subscription key required. can request free key \"Taxonomy\" service ArtDatabanken API portal: https://api-portal.artdatabanken.se/ Note: Please review API conditions register access using API. Data collected API stored SLU Artdatabanken. Please also note authors SHARK4R affiliated SLU Artdatabanken.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_records.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get taxonomic information from SLU Artdatabanken API for specified taxon IDs — get_dyntaxa_records","text":"","code":"if (FALSE) { # \\dontrun{ # Get taxonomic information for taxon IDs 238366 and 1010380 taxon_info <- get_dyntaxa_records(c(238366, 1010380), \"your_subscription_key\") print(taxon_info) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_hab_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Download the IOC-UNESCO Taxonomic Reference List of Harmful Micro Algae — get_hab_list","title":"Download the IOC-UNESCO Taxonomic Reference List of Harmful Micro Algae — get_hab_list","text":"function retrieves IOC-UNESCO Taxonomic Reference List Harmful Micro Algae World Register Marine Species (WoRMS). data returned dataframe, options customize fields included download.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_hab_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download the IOC-UNESCO Taxonomic Reference List of Harmful Micro Algae — get_hab_list","text":"","code":"get_hab_list(   aphia_id = TRUE,   scientific_name = TRUE,   authority = TRUE,   fossil = TRUE,   rank_name = TRUE,   status_name = TRUE,   qualitystatus_name = TRUE,   modified = TRUE,   lsid = TRUE,   parent_id = TRUE,   stored_path = TRUE,   citation = TRUE,   classification = TRUE,   environment = TRUE,   accepted_taxon = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_hab_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download the IOC-UNESCO Taxonomic Reference List of Harmful Micro Algae — get_hab_list","text":"aphia_id Logical. Include AphiaID field. Defaults TRUE. scientific_name Logical. Include scientific name field. Defaults TRUE. authority Logical. Include authority field. Defaults TRUE. fossil Logical. Include information fossil status. Defaults TRUE. rank_name Logical. Include taxonomic rank (e.g., species, variety, forma). Defaults TRUE. status_name Logical. Include taxonomic status field. Defaults TRUE. qualitystatus_name Logical. Include quality status field. Defaults TRUE. modified Logical. Include date last modification field. Defaults TRUE. lsid Logical. Include Life Science Identifier (LSID) field. Defaults TRUE. parent_id Logical. Include parent AphiaID field. Defaults TRUE. stored_path Logical. Include stored path field. Defaults TRUE. citation Logical. Include citation information. Defaults TRUE. classification Logical. Include full taxonomic classification (e.g., kingdom, phylum, class). Defaults TRUE. environment Logical. Include environmental data (e.g., marine, brackish, freshwater, terrestrial). Defaults TRUE. accepted_taxon Logical. Include information accepted taxon (e.g., scientific name authority). Defaults TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_hab_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download the IOC-UNESCO Taxonomic Reference List of Harmful Micro Algae — get_hab_list","text":"dataframe containing HABs taxonomic list, columns based selected parameters.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_hab_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download the IOC-UNESCO Taxonomic Reference List of Harmful Micro Algae — get_hab_list","text":"function submits POST request WoRMS database retrieve IOC-UNESCO Taxonomic Reference List Harmful Micro Algae. downloaded data can include various fields, controlled input parameters. field required, set corresponding parameter FALSE exclude output.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_hab_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download the IOC-UNESCO Taxonomic Reference List of Harmful Micro Algae — get_hab_list","text":"","code":"if (FALSE) { # \\dontrun{ # Download the default HABs taxonomic list habs_taxlist_df <- get_hab_list() head(habs_taxlist_df)  # Include only specific fields in the output habs_taxlist_df <- get_hab_list(aphia_id = TRUE, scientific_name = TRUE, authority = FALSE) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_hierarchy.html","id":null,"dir":"Reference","previous_headings":"","what":"Recursively Retrieve Parent Taxonomic Hierarchy — get_hierarchy","title":"Recursively Retrieve Parent Taxonomic Hierarchy — get_hierarchy","text":"helper function retrieves taxonomic hierarchy given taxon ID recursively traversing parent relationships provided dataset.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_hierarchy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recursively Retrieve Parent Taxonomic Hierarchy — get_hierarchy","text":"","code":"get_hierarchy(taxon_id, data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_hierarchy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recursively Retrieve Parent Taxonomic Hierarchy — get_hierarchy","text":"taxon_id character string representing taxon ID hierarchy retrieved. data data frame containing taxonomic information. Must include columns taxonId, parentNameUsageID, scientificName.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_hierarchy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recursively Retrieve Parent Taxonomic Hierarchy — get_hierarchy","text":"character vector containing hierarchy parent scientificName values, starting immediate parent ascending.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_hierarchy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recursively Retrieve Parent Taxonomic Hierarchy — get_hierarchy","text":"","code":"# Example dataset data <- dplyr::tibble(   taxonId = c(\"1\", \"2\", \"3\"),   parentNameUsageID = c(NA, \"1\", \"2\"),   scientificName = c(\"Kingdom\", \"Phylum\", \"Class\") )  # Get hierarchy for taxon ID \"3\" SHARK4R:::get_hierarchy(\"3\", data) #> [1] \"Kingdom\" \"Phylum\"  # [1] \"Phylum\" \"Kingdom\""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nomp_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the latest NOMP biovolume Excel list — get_nomp_list","title":"Get the latest NOMP biovolume Excel list — get_nomp_list","text":"function downloads latest available Nordic Marine Phytoplankton Group (NOMP) biovolume zip archive SMHI (using cache_nomp_zip()), unzips , reads first Excel file default. can also specify file archive read.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nomp_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the latest NOMP biovolume Excel list — get_nomp_list","text":"","code":"get_nomp_list(   year = as.numeric(format(Sys.Date(), \"%Y\")),   file = NULL,   force = FALSE,   base_url = NULL,   clean_cache_days = 30 )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nomp_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the latest NOMP biovolume Excel list — get_nomp_list","text":"year Numeric year download. Default current year; available, previous years automatically tried. file Character string specifying file zip archive read. Defaults first Excel file archive. force Logical; TRUE, forces re-download zip file even cached copy exists. base_url Base URL (without \"/nomp_taxa_biovolumes_and_carbon_YYYY.zip\") NOMP biovolume files. Defaults SMHI directory. clean_cache_days Numeric; NULL, cached NOMP zip files older number days automatically deleted replaced new download. Defaults 30. Set NULL disable automatic cleanup.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nomp_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the latest NOMP biovolume Excel list — get_nomp_list","text":"tibble contents requested Excel file.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nomp_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the latest NOMP biovolume Excel list — get_nomp_list","text":"","code":"if (FALSE) { # \\dontrun{   # Get the latest available list   nomp_list <- get_nomp_list()    # Get the 2023 list and clean old cache files older than 60 days   nomp_list_2023 <- get_nomp_list(2023, clean_cache_days = 60) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_external_links.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve External Links or Facts for Taxa from Nordic Microalgae — get_nua_external_links","title":"Retrieve External Links or Facts for Taxa from Nordic Microalgae — get_nua_external_links","text":"function retrieves external links related algae taxa Nordic Microalgae API. takes vector slugs (taxon identifiers) returns data frame containing external links associated taxon. data includes provider, label, external ID, URL external link.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_external_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve External Links or Facts for Taxa from Nordic Microalgae — get_nua_external_links","text":"","code":"get_nua_external_links(slug, verbose = TRUE, unparsed = FALSE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_external_links.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve External Links or Facts for Taxa from Nordic Microalgae — get_nua_external_links","text":"slug vector taxon slugs (identifiers) retrieve external links. verbose logical flag indicating whether display progress bar. Default TRUE. unparsed Logical. TRUE, API response facts returned unparsed list. Default FALSE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_external_links.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve External Links or Facts for Taxa from Nordic Microalgae — get_nua_external_links","text":"unparsed = FALSE: data frame containing following columns: slug slug (identifier) taxon. provider provider external link. label label external link. external_id external ID associated external link. external_url URL external link. collection collection category, \"External Links\" rows.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_external_links.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve External Links or Facts for Taxa from Nordic Microalgae — get_nua_external_links","text":"slugs (taxon identifiers) used function can retrieved using get_nua_taxa() function, returns data frame column taxon slugs, along relevant metadata taxon.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_external_links.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve External Links or Facts for Taxa from Nordic Microalgae — get_nua_external_links","text":"","code":"if (FALSE) { # \\dontrun{   # Retrieve external links for a vector of slugs   external_links <- get_nua_external_links(slug = c(\"chaetoceros-debilis\", \"alexandrium-tamarense\"))   head(external_links) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_harmfulness.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Harmfulness for Taxa from Nordic Microalgae — get_nua_harmfulness","title":"Retrieve Harmfulness for Taxa from Nordic Microalgae — get_nua_harmfulness","text":"function retrieves harmfulness information related algae taxa Nordic Microalgae API. takes vector slugs (taxon identifiers) returns data frame containing harmfulness information associated taxon. data includes provider, label, external ID, URL external link.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_harmfulness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Harmfulness for Taxa from Nordic Microalgae — get_nua_harmfulness","text":"","code":"get_nua_harmfulness(slug, verbose = TRUE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_harmfulness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Harmfulness for Taxa from Nordic Microalgae — get_nua_harmfulness","text":"slug vector taxon slugs (identifiers) retrieve external links. verbose logical flag indicating whether display progress bar. Default TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_harmfulness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Harmfulness for Taxa from Nordic Microalgae — get_nua_harmfulness","text":"data frame containing following columns: slug slug (identifier) taxon. provider provider external link. label label external link. external_id external ID associated external link. external_url URL external link. collection collection category, \"Harmful algae blooms\" rows.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_harmfulness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve Harmfulness for Taxa from Nordic Microalgae — get_nua_harmfulness","text":"slugs (taxon identifiers) used function can retrieved using get_nua_taxa() function, returns data frame column taxon slugs, along relevant metadata taxon.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_harmfulness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Harmfulness for Taxa from Nordic Microalgae — get_nua_harmfulness","text":"","code":"if (FALSE) { # \\dontrun{   # Retrieve external links for a vector of slugs   harmfulness <- get_nua_harmfulness(slug = c(\"dinophysis-acuta\",                                               \"alexandrium-ostenfeldii\"))   print(harmfulness) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_media_links.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve and Extract Media URLs from Nordic Microalgae — get_nua_media_links","title":"Retrieve and Extract Media URLs from Nordic Microalgae — get_nua_media_links","text":"function retrieves media information Nordic Microalgae API extracts slugs URLs different renditions (large, original, small, medium) media item.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_media_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve and Extract Media URLs from Nordic Microalgae — get_nua_media_links","text":"","code":"get_nua_media_links(unparsed = FALSE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_media_links.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve and Extract Media URLs from Nordic Microalgae — get_nua_media_links","text":"unparsed Logical. TRUE, complete API response returned unparsed list. Default FALSE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_media_links.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve and Extract Media URLs from Nordic Microalgae — get_nua_media_links","text":"unparsed = FALSE: data frame following columns: slug: slug related taxon. l_url: URL \"large\" rendition. o_url: URL \"original\" rendition. s_url: URL \"small\" rendition. m_url: URL \"medium\" rendition.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_media_links.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve and Extract Media URLs from Nordic Microalgae — get_nua_media_links","text":"","code":"if (FALSE) { # \\dontrun{ # Retrieve media information media_info <- get_nua_media_links(unparsed = FALSE)  # Preview the extracted data head(media_info) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_taxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Taxa Information from Nordic Microalgae — get_nua_taxa","title":"Retrieve Taxa Information from Nordic Microalgae — get_nua_taxa","text":"function retrieves taxonomic information algae taxa Nordic Microalgae API. fetches details including scientific names, authorities, ranks, image URLs (different sizes: large, medium, original, small).","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_taxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Taxa Information from Nordic Microalgae — get_nua_taxa","text":"","code":"get_nua_taxa(unparsed = FALSE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_taxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Taxa Information from Nordic Microalgae — get_nua_taxa","text":"unparsed Logical. TRUE, complete API response returned unparsed list. Default FALSE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_taxa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Taxa Information from Nordic Microalgae — get_nua_taxa","text":"unparsed = FALSE: data frame containing following columns: slug unique identifier taxon. scientific_name scientific name taxon. authority authority associated scientific name. rank taxonomic rank taxon.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_taxa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Taxa Information from Nordic Microalgae — get_nua_taxa","text":"","code":"if (FALSE) { # \\dontrun{   # Retrieve and display taxa data   taxa_data <- get_nua_taxa(unparsed = FALSE)   head(taxa_data) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_peg_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Get PEG biovolume Excel list — get_peg_list","title":"Get PEG biovolume Excel list — get_peg_list","text":"function downloads PEG biovolume zip archive ICES (using cache_peg_zip()), unzips , reads first Excel file default. can also specify file archive read.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_peg_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get PEG biovolume Excel list — get_peg_list","text":"","code":"get_peg_list(   file = NULL,   force = FALSE,   url = \"https://www.ices.dk/data/Documents/ENV/PEG_BVOL.zip\",   clean_cache_days = 30 )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_peg_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get PEG biovolume Excel list — get_peg_list","text":"file Character string specifying file zip archive read. Defaults first Excel file archive. force Logical; TRUE, forces re-download zip file even cached copy exists. url Character string URL PEG zip file. Defaults official ICES link. clean_cache_days Numeric; NULL, cached PEG zip files older number days automatically deleted replaced new download. Defaults 30. Set NULL disable automatic cleanup.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_peg_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get PEG biovolume Excel list — get_peg_list","text":"tibble contents requested Excel file.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_peg_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get PEG biovolume Excel list — get_peg_list","text":"","code":"if (FALSE) { # \\dontrun{   # Read the first Excel file from the PEG zip   peg_list <- get_peg_list()    # Read a specific file inside the zip   peg_list2 <- get_peg_list(file = \"PEG_extra_sheet.xlsx\") } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get SHARK codelist from SMHI — get_shark_codes","title":"Get SHARK codelist from SMHI — get_shark_codes","text":"function downloads SHARK codes Excel file SMHI (already cached) reads R. file stored persistent cache directory need downloaded subsequent sessions.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get SHARK codelist from SMHI — get_shark_codes","text":"","code":"get_shark_codes(   url =     \"https://smhi.se/oceanografi/oce_info_data/shark_web/downloads/codelist_SMHI.xlsx\",   sheet = 1,   skip = 1,   force = FALSE,   clean_cache_days = 30 )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get SHARK codelist from SMHI — get_shark_codes","text":"url Character string URL SHARK codes Excel file. Defaults official SMHI codelist. sheet Sheet read. Can either sheet name index (default 1). skip Number rows skip reading data (default 1, skip header row). force Logical; TRUE, forces re-download Excel file even cached copy available. Default FALSE. clean_cache_days Numeric; NULL, cached SHARK code Excel files older number days automatically deleted. Defaults 30. Set NULL disable automatic cleanup.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get SHARK codelist from SMHI — get_shark_codes","text":"tibble containing contents requested sheet.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get SHARK codelist from SMHI — get_shark_codes","text":"","code":"if (FALSE) { # \\dontrun{   # Read the first sheet, skipping the first row   codes <- get_shark_codes()    # Read second sheet without skipping rows   codes2 <- get_shark_codes(sheet = 2, skip = 0)    # Force re-download of the Excel file   codes3 <- get_shark_codes(force = TRUE) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Data from SHARK API — get_shark_data","title":"Retrieve Data from SHARK API — get_shark_data","text":"get_shark_data function retrieves tabular data SHARK database hosted SMHI. function sends POST request SHARK API customizable filters, including year, month, taxon name, water category, , returns retrieved data structured data.frame. view available filter options, see get_shark_options.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Data from SHARK API — get_shark_data","text":"","code":"get_shark_data(   tableView = \"sharkweb_overview\",   headerLang = \"internal_key\",   save_data = FALSE,   file_path = NULL,   delimiters = \"point-tab\",   lineEnd = \"win\",   encoding = \"utf_8\",   dataTypes = c(),   bounds = c(),   fromYear = NULL,   toYear = NULL,   months = c(),   parameters = c(),   checkStatus = \"\",   qualityFlags = c(),   deliverers = c(),   orderers = c(),   projects = c(),   datasets = c(),   minSamplingDepth = \"\",   maxSamplingDepth = \"\",   redListedCategory = c(),   taxonName = c(),   stationName = c(),   vattenDistrikt = c(),   seaBasins = c(),   counties = c(),   municipalities = c(),   waterCategories = c(),   typOmraden = c(),   helcomOspar = c(),   seaAreas = c(),   hideEmptyColumns = FALSE,   row_limit = 10^7,   prod = TRUE,   verbose = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Data from SHARK API — get_shark_data","text":"tableView Character. Specifies columns table retrieve. Options include: \"sharkweb_overview\": Overview table \"sharkweb_all\": available columns \"sharkdata_bacterioplankton\": Bacterioplankton table \"sharkdata_chlorophyll\": Chlorophyll table \"sharkdata_epibenthos\": Epibenthos table \"sharkdata_greyseal\": Greyseal table \"sharkdata_harbourporpoise\": Harbour porpoise table \"sharkdata_harbourseal: Harbour seal table \"sharkdata_jellyfish\": Jellyfish table \"sharkdata_physicalchemical\": Physical chemical table \"sharkdata_physicalchemical_columns\": Physical chemical table: column view \"sharkdata_phytoplankton\": Phytoplankton table \"sharkdata_picoplankton\": Picoplankton table \"sharkdata_planktonbarcoding\": Plankton barcoding table \"sharkdata_primaryproduction\": Primary production table \"sharkdata_ringedseal\": Ringed seal table \"sharkdata_sealpathology\": Seal pathology table \"sharkdata_sedimentation\": Sedimentation table \"sharkdata_zoobenthos\": Zoobenthos table \"sharkdata_zooplankton\": Zooplankton table \"report_sum_year_param\": Report sum per year parameter \"report_sum_year_param_taxon\": Report sum per year, parameter taxon \"report_sampling_per_station\": Report sampling per station \"report_obs_taxon\": Report observed taxa \"report_stations\": Report stations \"report_taxon\": Report taxa Default \"sharkweb_overview\". headerLang Character. Language option column headers. Possible values: \"sv\": Swedish. \"en\": English. \"short\": Shortened version. \"internal_key\": Internal key (default). save_data Logical. TRUE, data saved specified file (see file_path). FALSE, temporary file created instead. temporary file automatically deleted loaded memory. file_path Character. file path data saved. Required save_data TRUE. Ignored save_data FALSE. delimiters Character. Specifies delimiter used separate values file, save_data TRUE. Options \"point-tab\" (tab-separated) \"point-semi\" (semicolon-separated). Default \"point-tab\". lineEnd Character. Defines type line endings file, save_data TRUE. Options \"win\" (Windows-style, \\r\\n) \"unix\" (Unix-style, \\n). Default \"win\". encoding Character. Sets file's text encoding, save_data TRUE. Options \"cp1252\", \"utf_8\", \"utf_16\", \"latin_1\". Default \"utf_8\". dataTypes Character vector. Specifies data types filter. Possible values include: \"Bacterioplankton\" \"Chlorophyll\" \"Epibenthos\" \"Grey seal\" \"Harbour Porpoise\" \"Harbour seal\" \"Jellyfish\" \"Physical Chemical\" \"Phytoplankton\" \"Picoplankton\" \"PlanktonBarcoding\" \"Primary production\" \"Profile\" \"Ringed seal\" \"Seal pathology\" \"Sedimentation\" \"Zoobenthos\" \"Zooplankton\" bounds numeric vector length 4 specifying geographical search boundaries decimal degrees, formatted c(lon_min, lat_min, lon_max, lat_max), e.g., c(11, 58, 12, 59). Default c() include data. fromYear Integer (optional). starting year data retrieval. set NULL (default), function use earliest available year SHARK. toYear Integer (optional). ending year data retrieval. set NULL (default), function use latest available year SHARK. months Integer vector. months retrieve data , e.g., c(4, 5, 6) April June. parameters Character vector. Optional parameters filter results , \"Chlorophyll-\". checkStatus Character string. Optional status check filter results. qualityFlags Character vector. Specifies quality flags filter data. default, data included, including \"B\" flag (Bad). deliverers Character vector. Specifies data deliverers filter . orderers Character vector. Orderers filter specific organizations individuals. projects Character vector. Projects filter data specific research monitoring projects. datasets Character vector. Datasets filter data specific datasets. minSamplingDepth Numeric. Minimum sampling depth (meters) filter data. maxSamplingDepth Numeric. Maximum sampling depth (meters) filter data. redListedCategory Character vector. Red-listed taxa conservation filtering. taxonName Character vector. Optional vector taxa names filter . stationName Character vector. Station names filter data specific stations. vattenDistrikt Character vector. Water district names filter Swedish water districts. seaBasins Character vector. Sea basins filter . counties Character vector. Counties filter specific administrative regions. municipalities Character vector. Municipalities filter . waterCategories Character vector. Water categories filter . typOmraden Character vector. Type areas filter . helcomOspar Character vector. HELCOM OSPAR areas regional filtering. seaAreas Character vector. Sea area codes filter specific sea areas. hideEmptyColumns Logical. Whether hide empty columns. Default FALSE. row_limit Numeric. Specifies maximum number rows can retrieved single request. requested data exceeds limit, function automatically downloads data yearly chunks. default value 10 million rows. prod Logical. Whether query PROD (production) server SMHI internal TEST (testing) server. Default TRUE (PROD). verbose Logical. Whether display progress information. Default TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Data from SHARK API — get_shark_data","text":"data.frame containing retrieved SHARK data, column names based API's response.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve Data from SHARK API — get_shark_data","text":"function sends POST request SHARK API specified filters. response parsed JSON converted data.frame. function handles dynamic construction query body filter data based provided parameters. row_limit parameter reached, data retrieval process split manageable chunks avoid overwhelming API running memory issues. Please note making large requests, retrieving entire database, can extremely memory-intensive.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Data from SHARK API — get_shark_data","text":"","code":"if (FALSE) { # \\dontrun{   # Retrieve chlorophyll data from 2019 to 2020 for April to June   shark_data <- get_shark_data(fromYear = 2019, toYear = 2020,                                months = c(4, 5, 6), dataTypes = c(\"Chlorophyll\"))   View(shark_data) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Download SHARK dataset zip archives — get_shark_datasets","title":"Download SHARK dataset zip archives — get_shark_datasets","text":"Downloads one datasets (zip-archives) SHARK database (Swedish national marine environmental data archive) optionally unzips . function matches provided dataset names available SHARK datasets.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download SHARK dataset zip archives — get_shark_datasets","text":"","code":"get_shark_datasets(   dataset_name,   save_dir = \"\",   prod = TRUE,   unzip_file = FALSE,   verbose = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download SHARK dataset zip archives — get_shark_datasets","text":"dataset_name Character vector one dataset names (partial names). entry matched available SHARK dataset identifiers (e.g., \"SHARK_Phytoplankton_2023_SMHI_BVVF\" specific dataset, \"SHARK_Phytoplankton\" Phytoplankton datasets). save_dir Directory zip files (optionally extracted contents) stored. Defaults \"\". NULL \"\", current working directory used. prod Logical, whether download production (TRUE, default) test (FALSE) SHARK server. unzip_file Logical, whether extract downloaded zip archives (TRUE) save (FALSE, default). verbose Logical, whether show download extraction progress messages. Default TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download SHARK dataset zip archives — get_shark_datasets","text":"named list character vectors. element corresponds one matched dataset contains either path downloaded zip file (unzip_file = FALSE) path extraction directory (unzip_file = TRUE).","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download SHARK dataset zip archives — get_shark_datasets","text":"","code":"if (FALSE) { # \\dontrun{ # Download one dataset to a temporary folder get_shark_datasets(\"SHARK_Phytoplankton_2023_SMHI_BVVF\")  # Download multiple datasets and unzip them into the data directory get_shark_datasets(   dataset_name = c(\"Phytoplankton_2023\", \"Zooplankton_2022\"),   save_dir = \"data\",   unzip_file = TRUE ) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Available Search Options from SHARK API — get_shark_options","title":"Retrieve Available Search Options from SHARK API — get_shark_options","text":"get_shark_options function retrieves available search options SHARK database. sends GET request SHARK API returns results structured data.frame.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Available Search Options from SHARK API — get_shark_options","text":"","code":"get_shark_options(prod = TRUE, unparsed = FALSE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Available Search Options from SHARK API — get_shark_options","text":"prod Logical. Query PROD TEST (SMHI internal) server. Default TRUE (PROD). unparsed Logical. TRUE, returns complete JSON output list. Defaults FALSE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Available Search Options from SHARK API — get_shark_options","text":"data.frame containing available search options SHARK API.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve Available Search Options from SHARK API — get_shark_options","text":"function sends GET request SHARK API options endpoint retrieve available search filters options querying database. API returns data JSON format, parsed data.frame.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Available Search Options from SHARK API — get_shark_options","text":"","code":"if (FALSE) { # \\dontrun{   # Retrieve available search options   shark_options <- get_shark_options()   View(shark_options)    # View available datatypes   dataTypes <- shark_options$dataTypes   print(dataTypes) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_table_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve SHARK Data Table Row Counts — get_shark_table_counts","title":"Retrieve SHARK Data Table Row Counts — get_shark_table_counts","text":"get_shark_table_counts function retrieves row counts data records various SHARK data tables. view available filter options, see get_shark_options.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_table_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve SHARK Data Table Row Counts — get_shark_table_counts","text":"","code":"get_shark_table_counts(   tableView = \"sharkweb_overview\",   fromYear = 2019,   toYear = 2020,   months = c(),   dataTypes = c(),   parameters = c(),   orderers = c(),   qualityFlags = c(),   deliverers = c(),   projects = c(),   datasets = c(),   minSamplingDepth = \"\",   maxSamplingDepth = \"\",   checkStatus = \"\",   redListedCategory = c(),   taxonName = c(),   stationName = c(),   vattenDistrikt = c(),   seaBasins = c(),   counties = c(),   municipalities = c(),   waterCategories = c(),   typOmraden = c(),   helcomOspar = c(),   seaAreas = c(),   prod = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_table_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve SHARK Data Table Row Counts — get_shark_table_counts","text":"tableView Character. Specifies view table retrieve. Options include: \"sharkweb_overview\": Overview table \"sharkweb_all\": available columns \"sharkdata_bacterioplankton\": Bacterioplankton table \"sharkdata_chlorophyll\": Chlorophyll table \"sharkdata_epibenthos\": Epibenthos table \"sharkdata_greyseal\": Greyseal table \"sharkdata_harbourporpoise\": Harbour porpoise table \"sharkdata_harbourseal: Harbour seal table \"sharkdata_jellyfish\": Jellyfish table \"sharkdata_physicalchemical\": Physical chemical table \"sharkdata_physicalchemical_columns\": Physical chemical table: column view \"sharkdata_phytoplankton\": Phytoplankton table \"sharkdata_picoplankton\": Picoplankton table \"sharkdata_planktonbarcoding\": Plankton barcoding table \"sharkdata_primaryproduction\": Primary production table \"sharkdata_ringedseal\": Ringed seal table \"sharkdata_sealpathology\": Seal pathology table \"sharkdata_sedimentation\": Sedimentation table \"sharkdata_zoobenthos\": Zoobenthos table \"sharkdata_zooplankton\": Zooplankton table \"report_sum_year_param\": Report sum per year parameter \"report_sum_year_param_taxon\": Report sum per year, parameter taxon \"report_sampling_per_station\": Report sampling per station \"report_obs_taxon\": Report observed taxa \"report_stations\": Report stations \"report_taxon\": Report taxa Default \"sharkweb_overview\". fromYear Integer. starting year data retrieve. Default 2019. toYear Integer. ending year data retrieve. Default 2020. months Integer vector. months retrieve data (e.g., c(4, 5, 6) April June). dataTypes Character vector. Specifies data types filter, \"Chlorophyll\" \"Epibenthos\". parameters Character vector. Optional. Parameters filter results, \"Chlorophyll-\". orderers Character vector. Optional. Orderers filter data specific organizations. qualityFlags Character vector. Optional. Quality flags filter data. deliverers Character vector. Optional. Deliverers filter data data providers. projects Character vector. Optional. Projects filter data specific research monitoring projects. datasets Character vector. Optional. Datasets filter data specific dataset names. minSamplingDepth Numeric. Optional. Minimum depth (meters) sampling data. maxSamplingDepth Numeric. Optional. Maximum depth (meters) sampling data. checkStatus Character string. Optional. Status check filter results. redListedCategory Character vector. Optional. Red-listed taxa conservation filtering. taxonName Character vector. Optional. Taxa names filtering specific species taxa. stationName Character vector. Optional. Station names retrieve data specific stations. vattenDistrikt Character vector. Optional. Water district names filter data Swedish water districts. seaBasins Character vector. Optional. Sea basin names filter data different sea areas. counties Character vector. Optional. Counties filter data within specific administrative regions Sweden. municipalities Character vector. Optional. Municipalities filter data within specific local regions. waterCategories Character vector. Optional. Water categories filter data . typOmraden Character vector. Optional. Type areas filter data specific areas. helcomOspar Character vector. Optional. HELCOM OSPAR areas regional filtering. seaAreas Character vector. Optional. Sea area codes filtering specific sea areas. prod Logical. Query PROD TEST (SMHI internal) server. Default TRUE (PROD).","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_table_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve SHARK Data Table Row Counts — get_shark_table_counts","text":"","code":"if (FALSE) { # \\dontrun{   # Retrieve chlorophyll data for April to June from 2019 to 2020   shark_data_counts <- get_shark_table_counts(fromYear = 2019, toYear = 2020,                                               months = c(4, 5, 6), dataTypes = c(\"Chlorophyll\"))   print(shark_data_counts) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_toxin_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Toxin Data from IOC-UNESCO Toxins Database — get_toxin_list","title":"Retrieve Toxin Data from IOC-UNESCO Toxins Database — get_toxin_list","text":"function collects data IOC-UNESCO Toxins Database returns information toxins.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_toxin_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Toxin Data from IOC-UNESCO Toxins Database — get_toxin_list","text":"","code":"get_toxin_list(return_count = FALSE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_toxin_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Toxin Data from IOC-UNESCO Toxins Database — get_toxin_list","text":"return_count Logical. TRUE, function returns count toxins available database. FALSE (default), returns detailed toxin data.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_toxin_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Toxin Data from IOC-UNESCO Toxins Database — get_toxin_list","text":"return_count = TRUE, function returns numeric value representing number toxins database. Otherwise, returns list toxins detailed information.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_toxin_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Toxin Data from IOC-UNESCO Toxins Database — get_toxin_list","text":"","code":"if (FALSE) { # \\dontrun{ # Retrieve the full list of toxins toxin_list <- get_toxin_list()  # Retrieve only the count of toxins toxin_count <- get_toxin_list(return_count = TRUE) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_worms_records.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve WoRMS Records — get_worms_records","title":"Retrieve WoRMS Records — get_worms_records","text":"function retrieves records WoRMS (World Register Marine Species) database using worrms R package given list Aphia IDs. retrieval fails, retries specified number times stopping.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_worms_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve WoRMS Records — get_worms_records","text":"","code":"get_worms_records(aphia_id, max_retries = 3, sleep_time = 10, verbose = TRUE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_worms_records.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve WoRMS Records — get_worms_records","text":"aphia_id vector Aphia IDs records retrieved. max_retries integer specifying maximum number retry attempts Aphia ID case failure. Default 3. sleep_time numeric value specifying time (seconds) wait retry attempts. Default 10 seconds. verbose logical indicating whether print progress messages. Default TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_worms_records.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve WoRMS Records — get_worms_records","text":"data frame containing retrieved WoRMS records provided Aphia IDs. row corresponds one Aphia ID.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_worms_records.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve WoRMS Records — get_worms_records","text":"function attempts fetch records Aphia ID provided vector. retrieval fails, retries specified max_retries, pause sleep_time seconds attempts. retries fail Aphia ID, function stops error message.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_worms_records.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve WoRMS Records — get_worms_records","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage with a vector of Aphia IDs aphia_ids <- c(12345, 67890, 112233) worms_records <- retrieve_worms_records(aphia_ids) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_worms_records_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve WoRMS Records by Taxonomic Names with Retry Logic — get_worms_records_name","title":"Retrieve WoRMS Records by Taxonomic Names with Retry Logic — get_worms_records_name","text":"function retrieves records WoRMS database using worrms R package vector taxonomic names. includes retry logic handle temporary failures ensures names processed.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_worms_records_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve WoRMS Records by Taxonomic Names with Retry Logic — get_worms_records_name","text":"","code":"get_worms_records_name(   taxa_names,   fuzzy = TRUE,   best_match_only = TRUE,   max_retries = 3,   sleep_time = 10,   marine_only = TRUE,   verbose = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_worms_records_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve WoRMS Records by Taxonomic Names with Retry Logic — get_worms_records_name","text":"taxa_names vector taxonomic names retrieve records. fuzzy logical value indicating whether search using fuzzy search pattern. Default TRUE. best_match_only logical value indicating whether automatically select first match return single match. Default TRUE. max_retries integer specifying maximum number retries request case failure. Default 3. sleep_time numeric value specifying number seconds wait retrying failed request. Default 10. marine_only logical value indicating whether restrict results marine taxa . Default FALSE. verbose logical indicating whether print progress messages. Default TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_worms_records_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve WoRMS Records by Taxonomic Names with Retry Logic — get_worms_records_name","text":"data frame containing retrieved WoRMS records. row corresponds record taxonomic name.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_worms_records_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve WoRMS Records by Taxonomic Names with Retry Logic — get_worms_records_name","text":"function attempts retrieve records input taxonomic names using wm_records_names function WoRMS API. request fails, retries max_retries times, pausing sleep_time seconds attempts. attempts fail, function stops throws error.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_worms_records_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve WoRMS Records by Taxonomic Names with Retry Logic — get_worms_records_name","text":"","code":"if (FALSE) { # \\dontrun{ # Retrieve WoRMS records for the taxonomic names \"Amphidinium\" and \"Karenia\" records <- retrieve_worms_records_name(c(\"Amphidinium\", \"Karenia\"),                                        max_retries = 3, sleep_time = 5, marine_only = TRUE) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/ifcb_is_near_land.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if Positions are Near Land — ifcb_is_near_land","title":"Determine if Positions are Near Land — ifcb_is_near_land","text":"function deprecated. Users encouraged use positions_are_near_land instead. Determines whether given positions near land based coastline shape file. Natural Earth 1:50m land vectors included default shapefile SHARK4R.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/ifcb_is_near_land.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if Positions are Near Land — ifcb_is_near_land","text":"","code":"ifcb_is_near_land(   latitudes,   longitudes,   distance = 500,   shape = NULL,   crs = 4326,   utm_zone = 33,   remove_small_islands = TRUE,   small_island_threshold = 2e+06 )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/ifcb_is_near_land.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if Positions are Near Land — ifcb_is_near_land","text":"latitudes Numeric vector latitudes positions. longitudes Numeric vector longitudes positions. distance Buffer distance meters around coastline. Default 500 m. shape Optional path shapefile containing coastline data. provided, function use shapefile instead default Natural Earth 1:50m land vectors. Using detailed shapefile allows smaller buffer distance. detailed European coastlines, download polygons EEA https://www.eea.europa.eu/data--maps/data/eea-coastline--analysis-2/gis-data/eea-coastline-polygon. detailed world maps, download Natural Earth https://www.naturalearthdata.com/downloads/10m-physical-vectors/. crs Coordinate reference system (CRS) use positions output. Default EPSG code 4326 (WGS84). utm_zone UTM zone buffering coastline. Default 33 (12°E 18°E, northern hemisphere). remove_small_islands Logical indicating whether remove small islands coastline custom shapefile provided. Default TRUE. small_island_threshold Area threshold square meters islands considered small removed, remove_small_islands set TRUE. Default 2 sqkm.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/ifcb_is_near_land.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if Positions are Near Land — ifcb_is_near_land","text":"Logical vector indicating whether position near land.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/ifcb_is_near_land.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine if Positions are Near Land — ifcb_is_near_land","text":"function calculates buffered area around coastline checks given positions (specified longitudes latitudes) within buffer intersect land. function re-exported iRfcb package available https://github.com/EuropeanIFCBGroup/iRfcb","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/ifcb_is_near_land.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if Positions are Near Land — ifcb_is_near_land","text":"","code":"if (FALSE) { # \\dontrun{ # Define coordinates latitudes <- c(62.500353, 58.964498, 57.638725, 56.575338) longitudes <- c(17.845993, 20.394418, 18.284523, 16.227174)  # Call the function # near_land <- ifcb_is_near_land(latitudes, longitudes, distance = 300, crs = 4326) # -> near_land <- positions_are_near_land(latitudes, longitudes, distance = 300, crs = 4326)  # Print the result print(near_land) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/ifcb_which_basin.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","title":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","text":"function deprecated. Users encouraged use which_basin instead. function identifies sub-basin set latitude longitude points belong , using user-specified default shapefile. default shapefile includes Baltic Sea, Kattegat, Skagerrak basins included SHARK4R package.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/ifcb_which_basin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","text":"","code":"ifcb_which_basin(latitudes, longitudes, plot = FALSE, shape_file = NULL)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/ifcb_which_basin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","text":"latitudes numeric vector latitude points. longitudes numeric vector longitude points. plot boolean indicating whether plot points along sea basins. Default FALSE. shape_file absolute path custom polygon shapefile WGS84 (EPSG:4326) represents sea basin. Defaults Baltic Sea, Kattegat, Skagerrak basins included SHARK4R package.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/ifcb_which_basin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","text":"vector indicating basin point belongs , ggplot object plot = TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/ifcb_which_basin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","text":"function reads pre-packaged shapefile Baltic Sea, Kattegat, Skagerrak basins SHARK4R package default, user-supplied shapefile provided. shapefiles originate SHARK (https://shark.smhi.se/). sets CRS, transforms CRS WGS84 (EPSG:4326) necessary, checks given points fall within specified sea basin. Optionally, plots points sea basin polygons together. function re-exported iRfcb package available https://github.com/EuropeanIFCBGroup/iRfcb","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/ifcb_which_basin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","text":"","code":"# Define example latitude and longitude vectors latitudes <- c(55.337, 54.729, 56.311, 57.975) longitudes <- c(12.674, 14.643, 12.237, 10.637)  # Check in which Baltic sea basin the points are in # points_in_the_baltic <- ifcb_which_basin(latitudes, longitudes) # -> points_in_the_baltic <- which_basin(latitudes, longitudes) print(points_in_the_baltic) #> [1] \"13 - Arkona Basin\"   \"12 - Bornholm Basin\" \"16 - Kattegat\"       #> [4] \"17 - Skagerrak\"       # Plot the points and the basins # ifcb_which_basin(latitudes, longitudes, plot = TRUE) # -> which_basin(latitudes, longitudes, plot = TRUE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/is_in_dyntaxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if taxon names exist in Dyntaxa — is_in_dyntaxa","title":"Check if taxon names exist in Dyntaxa — is_in_dyntaxa","text":"Checks whether supplied scientific names exist Swedish taxonomic database Dyntaxa.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/is_in_dyntaxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if taxon names exist in Dyntaxa — is_in_dyntaxa","text":"","code":"is_in_dyntaxa(   taxon_names,   subscription_key = Sys.getenv(\"DYNTAXA_KEY\"),   verbose = FALSE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/is_in_dyntaxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if taxon names exist in Dyntaxa — is_in_dyntaxa","text":"taxon_names Character vector taxon names check. subscription_key Dyntaxa API subscription key. default, key read environment variable DYNTAXA_KEY. can provide key three ways: Directly parameter: is_in_dyntaxa(\"Skeletonema marinoi\", subscription_key = \"your_key_here\") Temporarily session: Sys.setenv(DYNTAXA_KEY = \"your_key_here\") Permanently across sessions adding ~/.Renviron file. Use usethis::edit_r_environ() open file, add: DYNTAXA_KEY=your_key_here verbose Logical; TRUE (default), prints messages unmatched taxa.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/is_in_dyntaxa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if taxon names exist in Dyntaxa — is_in_dyntaxa","text":"logical vector indicating whether input name found Dyntaxa. Returned invisibly verbose = TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/is_in_dyntaxa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if taxon names exist in Dyntaxa — is_in_dyntaxa","text":"valid Dyntaxa API subscription key required. can request free key \"Taxonomy\" service ArtDatabanken API portal: https://api-portal.artdatabanken.se/","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/is_in_dyntaxa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if taxon names exist in Dyntaxa — is_in_dyntaxa","text":"","code":"if (FALSE) { # \\dontrun{ # Using an environment variable (recommended for convenience) Sys.setenv(DYNTAXA_KEY = \"your_key_here\") is_in_dyntaxa(c(\"Skeletonema marinoi\", \"Nonexistent species\"))  # Or pass the key directly is_in_dyntaxa(\"Skeletonema marinoi\", subscription_key = \"your_key_here\")  # Suppress messages is_in_dyntaxa(\"Skeletonema marinoi\", verbose = FALSE) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/lookup_xy.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup Spatial Data for a Set of Points — lookup_xy","title":"Lookup Spatial Data for a Set of Points — lookup_xy","text":"Retrieves spatial information (e.g., distance shore, environmental grids, area data) set geographic coordinates. function handles invalid duplicate coordinates automatically supports returning results either data frame list.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/lookup_xy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup Spatial Data for a Set of Points — lookup_xy","text":"","code":"lookup_xy(   data,   shoredistance = TRUE,   grids = TRUE,   areas = FALSE,   as_data_frame = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/lookup_xy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup Spatial Data for a Set of Points — lookup_xy","text":"data data frame containing geographic coordinates. required columns sample_longitude_dd sample_latitude_dd. must numeric within valid ranges (-180 180 longitude, -90 90 latitude). shoredistance Logical; TRUE (default), distance nearest shore returned. grids Logical; TRUE (default), environmental grid values (e.g., temperature, bathymetry) returned. areas Logical numeric; TRUE, area values returned points 0 m radius. positive integer provided, areas within radius (meters) returned. Default FALSE. as_data_frame Logical; TRUE (default), results returned data frame one row per input coordinate. FALSE, results returned list.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/lookup_xy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup Spatial Data for a Set of Points — lookup_xy","text":"Either data frame list requested spatial data: data frame output, row corresponds input coordinates. Columns include shoredistance, environmental grids, areas (requested). Invalid coordinates filled NA. list output, element corresponds one input coordinate. Invalid coordinates NULL.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/lookup_xy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lookup Spatial Data for a Set of Points — lookup_xy","text":"function first cleans coordinates, removing invalid missing values identifying unique points avoid redundant lookups. Coordinates queried chunks 25,000 avoid overloading OBIS web service. areas positive integer, area values within radius returned. value TRUE equivalent 0 m, FALSE disables area retrieval. Results mapped back original input order, duplicates input correctly handled.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/lookup_xy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup Spatial Data for a Set of Points — lookup_xy","text":"","code":"if (FALSE) { # \\dontrun{ # Retrieve shore distances and environmental grids for a dataset xy_data <- lookup_xy(abra, shoredistance = TRUE, grids = TRUE, areas = FALSE)  # Retrieve area data within a 500-meter radius xy_areas <- lookup_xy(abra, shoredistance = FALSE, grids = FALSE, areas = 500)  # Get results as a list instead of a data frame xy_list <- lookup_xy(abra, shoredistance = TRUE, grids = TRUE, areas = FALSE, as_data_frame = FALSE) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_algaebase.html","id":null,"dir":"Reference","previous_headings":"","what":"Search AlgaeBase for Taxonomic Information — match_algaebase","title":"Search AlgaeBase for Taxonomic Information — match_algaebase","text":"function queries AlgaeBase API retrieve taxonomic information list algae names based genus (optionally) species. supports exact matching, genus-searches, retrieval higher taxonomic ranks.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_algaebase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search AlgaeBase for Taxonomic Information — match_algaebase","text":"","code":"match_algaebase(   genus,   species,   subscription_key = Sys.getenv(\"ALGAEBASE_KEY\"),   genus_only = FALSE,   higher = TRUE,   unparsed = FALSE,   exact_matches_only = TRUE,   sleep_time = 1,   newest_only = TRUE,   verbose = TRUE,   apikey = deprecated() )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_algaebase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search AlgaeBase for Taxonomic Information — match_algaebase","text":"genus character vector genus names. species character vector species names corresponding genus vector. Must length genus. subscription_key character string containing API key accessing AlgaeBase API. default, key read environment variable ALGAEBASE_KEY. can provide key three ways: Directly parameter: match_algaebase(\"Skeletonema\", \"marinoi\", subscription_key = \"your_key_here\") Temporarily session: Sys.setenv(ALGAEBASE_KEY = \"your_key_here\") Permanently across sessions adding ~/.Renviron file. Use usethis::edit_r_environ() open file, add: ALGAEBASE_KEY=your_key_here genus_only Logical. TRUE, searches based solely genus name, ignoring species. Defaults FALSE. higher Logical. TRUE, includes higher taxonomy (e.g., kingdom, phylum) output. Defaults TRUE. unparsed Logical. TRUE, returns raw JSON output instead R data frame. Defaults FALSE. exact_matches_only Logical. TRUE, restricts results exact matches. Defaults TRUE. sleep_time Numeric. delay (seconds) consecutive AlgaeBase API queries. Defaults 1. delay recommended avoid overwhelming API large queries. newest_only logical value indicating whether return recent entries (default TRUE). verbose Logical. TRUE, displays progress bar indicate query status. Defaults TRUE. apikey Use subscription_key instead.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_algaebase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search AlgaeBase for Taxonomic Information — match_algaebase","text":"data frame containing taxonomic information input genus–species combination. following columns may included: id — AlgaeBase ID (available). kingdom, phylum, class, order, family — Higher taxonomy (returned higher = TRUE). genus, species, infrasp — Genus, species, infraspecies names (applicable). taxonomic_status — Status name (e.g., accepted, synonym, unverified). currently_accepted — Logical indicator whether name currently accepted (TRUE/FALSE). accepted_name — Currently accepted name different input name. input_name — name supplied user. input_match — Indicator exact match (1 = exact, 0 = exact). taxon_rank — Taxonomic rank accepted name (e.g., genus, species). mod_date — Date entry last modified AlgaeBase. long_name — Full species name authorship date. authorship — Author(s) associated species name.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_algaebase.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search AlgaeBase for Taxonomic Information — match_algaebase","text":"valid API key requested AlgaeBase team. Scientific names can parsed using parse_scientific_names() function processed match_algaebase(). Duplicate genus-species combinations handled efficiently querying unique combination . Genus-searches performed genus_only = TRUE species name missing invalid. Errors API queries gracefully handled returning rows NA values missing unavailable data. function allows integration data analysis workflows require resolving verifying taxonomic names AlgaeBase.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_algaebase.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search AlgaeBase for Taxonomic Information — match_algaebase","text":"","code":"if (FALSE) { # \\dontrun{ # Example with genus and species vectors genus_vec <- c(\"Thalassiosira\", \"Skeletonema\", \"Tripos\") species_vec <- c(\"pseudonana\", \"costatum\", \"furca\")  algaebase_results <- match_algaebase(   genus = genus_vec,   species = species_vec,   subscription_key = \"your_api_key\",   exact_matches_only = TRUE,   verbose = TRUE ) head(algaebase_results) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_dyntaxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxon matching using Dyntaxa (https://www.dyntaxa.se/) — match_dyntaxa","title":"Taxon matching using Dyntaxa (https://www.dyntaxa.se/) — match_dyntaxa","text":"function deprecated replaced is_in_dyntaxa().","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_dyntaxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxon matching using Dyntaxa (https://www.dyntaxa.se/) — match_dyntaxa","text":"","code":"match_dyntaxa(names, subscription_key = Sys.getenv(\"DYNTAXA_KEY\"))"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_dyntaxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxon matching using Dyntaxa (https://www.dyntaxa.se/) — match_dyntaxa","text":"names Character vector scientific names check Dyntaxa. subscription_key Dyntaxa API subscription key. default, key read environment variable DYNTAXA_KEY.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_dyntaxa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taxon matching using Dyntaxa (https://www.dyntaxa.se/) — match_dyntaxa","text":"logical vector indicating whether input name found Dyntaxa, is_in_dyntaxa(). Messages unmatched taxa printed.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_dyntaxa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Taxon matching using Dyntaxa (https://www.dyntaxa.se/) — match_dyntaxa","text":"function retained backward compatibility may removed future versions. Use newer function is_in_dyntaxa() instead. valid Dyntaxa API subscription key required. can request free key \"Taxonomy\" service ArtDatabanken API portal: https://api-portal.artdatabanken.se/","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_dyntaxa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Taxon matching using Dyntaxa (https://www.dyntaxa.se/) — match_dyntaxa","text":"","code":"if (FALSE) { # \\dontrun{ # Deprecated function usage match_dyntaxa(c(\"Skeletonema marinoi\", \"Nonexistent species\"),               subscription_key = \"your_key_here\") } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_station.html","id":null,"dir":"Reference","previous_headings":"","what":"Station matching using SMHI station list — match_station","title":"Station matching using SMHI station list — match_station","text":"Matches reported station names data curated station list (\"station.txt\"), synced \"Stationsregistret\": https://stationsregister.miljodatasamverkan.se/.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_station.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Station matching using SMHI station list — match_station","text":"","code":"match_station(names, station_file = NULL)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_station.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Station matching using SMHI station list — match_station","text":"names Character vector station names match. station_file Optional path custom station file (tab-delimited). NULL (default), function extract use bundled \"station.zip\" SHARK4R package.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_taxon_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Match Dyntaxa taxon names via API — match_taxon_name","title":"Match Dyntaxa taxon names via API — match_taxon_name","text":"function matches list taxon names SLU Artdatabanken API (Dyntaxa) retrieves best matches along taxon IDs.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_taxon_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match Dyntaxa taxon names via API — match_taxon_name","text":"","code":"match_taxon_name(   taxon_names,   subscription_key = Sys.getenv(\"DYNTAXA_KEY\"),   multiple_options = FALSE,   searchFields = \"Both\",   isRecommended = \"NotSet\",   isOkForObservationSystems = \"NotSet\",   culture = \"sv_SE\",   page = 1,   pageSize = 100,   verbose = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_taxon_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match Dyntaxa taxon names via API — match_taxon_name","text":"taxon_names vector taxon names match. subscription_key Dyntaxa API subscription key. default, key read environment variable DYNTAXA_KEY. can provide key three ways: Directly parameter: match_taxon_name(\"Skeletonema marinoi\", subscription_key = \"your_key_here\") Temporarily session: Sys.setenv(DYNTAXA_KEY = \"your_key_here\") Permanently across sessions adding ~/.Renviron file. Use usethis::edit_r_environ() open file, add: DYNTAXA_KEY=your_key_here multiple_options Logical. TRUE, function return multiple matching names. Default FALSE, selecting first match. searchFields character string indicating search fields. Defaults ''. isRecommended character string indicating whether taxon recommended. Defaults 'NotSet'. isOkForObservationSystems character string indicating whether taxon suitable observation systems. Defaults 'NotSet'. culture character string indicating culture. Defaults 'sv_SE'. page integer specifying page number pagination. Defaults 1. pageSize integer specifying page size pagination. Defaults 100. verbose Logical. Print progress bar. Default TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_taxon_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match Dyntaxa taxon names via API — match_taxon_name","text":"data frame containing search pattern, taxon ID, best match taxon name.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_taxon_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Match Dyntaxa taxon names via API — match_taxon_name","text":"valid Dyntaxa API subscription key required. can request free key \"Taxonomy\" service ArtDatabanken API portal: https://api-portal.artdatabanken.se/ Note: Please review API conditions register access using API. Data collected API stored SLU Artdatabanken. Please also note authors SHARK4R affiliated SLU Artdatabanken.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_taxon_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match Dyntaxa taxon names via API — match_taxon_name","text":"","code":"if (FALSE) { # \\dontrun{ # Match taxon names against SLU Artdatabanken API matched_taxa <- match_taxon_name(c(\"Homo sapiens\", \"Canis lupus\"), \"your_subscription_key\") print(matched_taxa) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_wormstaxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxon matching using WoRMS (http://www.marinespecies.org/) matches latin name in data with WoRMS taxon list — match_wormstaxa","title":"Taxon matching using WoRMS (http://www.marinespecies.org/) matches latin name in data with WoRMS taxon list — match_wormstaxa","text":"Taxon matching using WoRMS (http://www.marinespecies.org/) matches latin name data WoRMS taxon list","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_wormstaxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxon matching using WoRMS (http://www.marinespecies.org/) matches latin name in data with WoRMS taxon list — match_wormstaxa","text":"","code":"match_wormstaxa(names, ask = TRUE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_wormstaxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxon matching using WoRMS (http://www.marinespecies.org/) matches latin name in data with WoRMS taxon list — match_wormstaxa","text":"names Vector scientific names. ask Ask user case multiple matches.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_wormstaxa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taxon matching using WoRMS (http://www.marinespecies.org/) matches latin name in data with WoRMS taxon list — match_wormstaxa","text":"Data frame scientific name, scientific name ID match type.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/nominal_station.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if stations are reported as nominal position or not Function makes an estimated guess whether stations are nominal — nominal_station","title":"Check if stations are reported as nominal position or not Function makes an estimated guess whether stations are nominal — nominal_station","text":"Check stations reported nominal position Function makes estimated guess whether stations nominal","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/nominal_station.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if stations are reported as nominal position or not Function makes an estimated guess whether stations are nominal — nominal_station","text":"","code":"nominal_station(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/nominal_station.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if stations are reported as nominal position or not Function makes an estimated guess whether stations are nominal — nominal_station","text":"data Data frame.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/nominal_station.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if stations are reported as nominal position or not Function makes an estimated guess whether stations are nominal — nominal_station","text":"Data frame station name latitude longitude positions.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/parse_scientific_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse scientific names into genus and species components. — parse_scientific_names","title":"Parse scientific names into genus and species components. — parse_scientific_names","text":"function processes character vector scientific names, splitting genus species components. handles binomial names (e.g., \"Homo sapiens\"), removes undesired descriptors (e.g., 'Cfr.', 'cf.', 'sp.', 'spp.'), manages cases involving varieties, subspecies, invalid species names. Special characters whitespace handled appropriately.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/parse_scientific_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse scientific names into genus and species components. — parse_scientific_names","text":"","code":"parse_scientific_names(   scientific_name,   remove_undesired_descriptors = TRUE,   remove_subspecies = TRUE,   remove_invalid_species = TRUE,   encoding = \"UTF-8\" )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/parse_scientific_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse scientific names into genus and species components. — parse_scientific_names","text":"scientific_name character vector containing scientific names, may include binomials, additional descriptors, varieties. remove_undesired_descriptors Logical, TRUE, undesired descriptors (e.g., 'Cfr.', 'cf.', 'colony', 'cells', etc.) removed. Default TRUE. remove_subspecies Logical, TRUE, subspecies/variety descriptors (e.g., 'var.', 'subsp.', 'f.', etc.) removed. Default TRUE. remove_invalid_species Logical, TRUE, invalid species names (e.g., 'sp.', 'spp.') removed. Default TRUE. encoding string specifying encoding used input names (e.g., 'UTF-8'). Default 'UTF-8'.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/parse_scientific_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse scientific names into genus and species components. — parse_scientific_names","text":"data frame two columns: genus — Genus names. species — Species names (empty unavailable invalid). Invalid descriptors \"sp.\", \"spp.\", numeric entries excluded column.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/parse_scientific_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse scientific names into genus and species components. — parse_scientific_names","text":"","code":"# Example with a vector of scientific names scientific_names <- c(\"Skeletonema marinoi\", \"Cf. Azadinium perforatum\", \"Gymnodinium sp.\",                       \"Melosira varians\", \"Aulacoseira islandica var. subarctica\") result <- parse_scientific_names(scientific_names)  # Check the resulting data frame print(result) #>         genus              species #> 1 Skeletonema              marinoi #> 2   Azadinium           perforatum #> 3 Gymnodinium                      #> 4    Melosira              varians #> 5 Aulacoseira islandica subarctica"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/plot_map_leaflet.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Leaflet map. — plot_map_leaflet","title":"Create a Leaflet map. — plot_map_leaflet","text":"Create Leaflet map.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/plot_map_leaflet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Leaflet map. — plot_map_leaflet","text":"","code":"plot_map_leaflet(data, provider = \"Esri.OceanBasemap\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/plot_map_leaflet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Leaflet map. — plot_map_leaflet","text":"data data frame. provider Tile provider, see https://leaflet-extras.github.io/leaflet-providers/preview/. Default Esri.OceanBasemap.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/plot_map_leaflet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Leaflet map. — plot_map_leaflet","text":"HTML widget object.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/plot_map_leaflet_deliv.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Leaflet map. — plot_map_leaflet_deliv","title":"Create a Leaflet map. — plot_map_leaflet_deliv","text":"Create Leaflet map.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/plot_map_leaflet_deliv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Leaflet map. — plot_map_leaflet_deliv","text":"","code":"plot_map_leaflet_deliv(data, provider = \"Esri.OceanBasemap\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/plot_map_leaflet_deliv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Leaflet map. — plot_map_leaflet_deliv","text":"data data frame. provider Tile provider, see https://leaflet-extras.github.io/leaflet-providers/preview/. Default Esri.OceanBasemap.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/plot_map_leaflet_deliv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Leaflet map. — plot_map_leaflet_deliv","text":"HTML widget object.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/positions_are_near_land.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if Positions are Near Land — positions_are_near_land","title":"Determine if Positions are Near Land — positions_are_near_land","text":"function wrapper/re-export iRfcb::ifcb_is_near_land(). iRfcb package required want actually call function.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/positions_are_near_land.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if Positions are Near Land — positions_are_near_land","text":"","code":"positions_are_near_land(   latitudes,   longitudes,   distance = 500,   shape = NULL,   source = \"obis\",   crs = 4326,   remove_small_islands = TRUE,   small_island_threshold = 2e+06,   plot = FALSE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/positions_are_near_land.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if Positions are Near Land — positions_are_near_land","text":"latitudes Numeric vector latitudes positions. longitudes Numeric vector longitudes positions. Must length latitudes. distance Buffer distance (meters) coastline consider \"near land.\" Default 500 meters. shape Optional path shapefile (.shp) containing coastline data. provided, file used instead default OBIS land vectors. high-resolution shapefile can improve accuracy buffer distance calculations. can retrieve detailed European coastline setting source argument \"eea\". Downloaded shape files cached across R sessions user-specific cache directory. source Character string indicating default coastline source use shape = NULL. Options \"obis\" (Ocean Biodiversity Information System, default), \"ne\" (Natural Earth 1:10 vectors) \"eea\" (European Environment Agency). Ignored shape provided. crs Coordinate reference system (CRS) use input output. Default EPSG code 4326 (WGS84). remove_small_islands Logical indicating whether remove small islands coastline. Useful archipelagos. Default TRUE. small_island_threshold Area threshold square meters islands considered small removed, remove_small_islands set TRUE. Default 2 square km. plot boolean indicating whether plot points, land polygon buffer. Default FALSE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/positions_are_near_land.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if Positions are Near Land — positions_are_near_land","text":"plot = FALSE (default), logical vector returned indicating whether position near land , NA positions coordinates missing. plot = TRUE, ggplot object returned showing land polygon, buffer area, position points colored proximity land.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/positions_are_near_land.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine if Positions are Near Land — positions_are_near_land","text":"Determines whether given positions near land based land polygon shape file. function calculates buffered area around coastline using polygon shapefile determines input position intersects buffer landmass . default, uses OBIS land vector dataset. EEA shapefile downloaded https://www.eea.europa.eu/data--maps/data/eea-coastline--analysis-2/gis-data/eea-coastline-polygon source = \"eea\".","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/positions_are_near_land.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if Positions are Near Land — positions_are_near_land","text":"","code":"if (FALSE) { # \\dontrun{ # Define coordinates latitudes <- c(62.500353, 58.964498, 57.638725, 56.575338) longitudes <- c(17.845993, 20.394418, 18.284523, 16.227174)  # Call the function near_land <- positions_are_near_land(latitudes, longitudes, distance = 300, crs = 4326)  # Print the result print(near_land) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/read_ptbx.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a Plankton Toolbox export file — read_ptbx","title":"Read a Plankton Toolbox export file — read_ptbx","text":"function reads sample file exported Excel (.xlsx) file Plankton Toolbox extracts data specified sheet. default sheet \"sample_data.txt\", contains count data.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/read_ptbx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a Plankton Toolbox export file — read_ptbx","text":"","code":"read_ptbx(   file_path,   sheet = c(\"sample_data.txt\", \"sample_info.txt\", \"counting_method.txt\",     \"Sample summary\", \"README\") )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/read_ptbx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a Plankton Toolbox export file — read_ptbx","text":"file_path Character. Path Excel file. sheet Character. name sheet read. Must one : \"sample_data.txt\", \"Sample summary\", \"sample_info.txt\", \"counting_method.txt\", \"README\". Default \"sample_data.txt\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/read_ptbx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a Plankton Toolbox export file — read_ptbx","text":"data frame containing contents selected sheet.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/read_ptbx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a Plankton Toolbox export file — read_ptbx","text":"","code":"# Read the default data sheet sample_data <- read_ptbx(system.file(\"extdata/Anholt_E_2024-09-15_0-10m.xlsx\",                                      package = \"SHARK4R\"))  # Print output sample_data #> # A tibble: 89 × 23 #>    scientific_full_name       taxon_class scientific_name size_class method_step #>    <chr>                      <chr>       <chr>           <chr>      <chr>       #>  1 Alexandrium pseudogonyaul… Dinophyceae Alexandrium ps… 2          A1 - Uterm… #>  2 Cerataulina pelagica       Bacillario… Cerataulina pe… 2          A2 - Uterm… #>  3 Chaetoceros affinis        Bacillario… Chaetoceros af… 2          A1 - Uterm… #>  4 Chaetoceros cf. affinis    Bacillario… Chaetoceros af… 4          A1 - Uterm… #>  5 Chaetoceros cf. peruvianus Bacillario… Chaetoceros pe… 1          A1 - Uterm… #>  6 Chaetoceros debilis        Bacillario… Chaetoceros de… 3          A2 - Uterm… #>  7 Chaetoceros similis        Bacillario… Chaetoceros si… 5          A1 - Uterm… #>  8 Chaetoceros socialis       Bacillario… Chaetoceros so… 1          A4 - Uterm… #>  9 Chaetoceros tenuissimus    Bacillario… Chaetoceros te… 2          A4 - Uterm… #> 10 Chaetoceros                Bacillario… Chaetoceros     2          A4 - Uterm… #> # ℹ 79 more rows #> # ℹ 18 more variables: count_area_number <chr>, locked_at_area <chr>, #> #   counted_units <chr>, counted_units_list <chr>, abundance_class <lgl>, #> #   coefficient <chr>, abundance_units_l <chr>, volume_mm3_l <chr>, #> #   carbon_ugc_l <chr>, volume_um3_unit <chr>, carbon_pgc_unit <chr>, #> #   variable_comment <lgl>, trophic_type <chr>, unit_type <chr>, #> #   species_flag_code <chr>, cf <chr>, bvol_list <chr>, bvol_list_calc <chr>   # Read a specific sheet sample_info <- read_ptbx(system.file(\"extdata/Anholt_E_2024-09-15_0-10m.xlsx\",                                      package = \"SHARK4R\"),                          sheet = \"sample_info.txt\") # Print output sample_info #> # A tibble: 41 × 2 #>    key                      value                     #>    <chr>                    <chr>                     #>  1 plankton_toolbox_version 1.4.2                     #>  2 sample_name              Anholt E_2024-09-15_0-10m #>  3 sample_id                Anholt E_2024-09-15_0-10m #>  4 sample_date              2024-09-15                #>  5 sample_time              09:57                     #>  6 visit_year               2024                      #>  7 country_code             77                        #>  8 platform_code            77SE                      #>  9 sampling_series          0853                      #> 10 sampling_laboratory      SMHI                      #> # ℹ 31 more rows"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/scatterplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatterplot of user-defined variables and parameters with x- and y-axes automatic selection Interactive plotly plot — scatterplot","title":"Scatterplot of user-defined variables and parameters with x- and y-axes automatic selection Interactive plotly plot — scatterplot","text":"Scatterplot user-defined variables parameters x- y-axes automatic selection Interactive plotly plot","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/scatterplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatterplot of user-defined variables and parameters with x- and y-axes automatic selection Interactive plotly plot — scatterplot","text":"","code":"scatterplot(data, ...)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/scatterplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatterplot of user-defined variables and parameters with x- and y-axes automatic selection Interactive plotly plot — scatterplot","text":"data tibble checked ... Additional parameters","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/scatterplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scatterplot of user-defined variables and parameters with x- and y-axes automatic selection Interactive plotly plot — scatterplot","text":"plotly plot","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read tab delimited files downloaded from SHARK Uses read_delim to read tab delimited files with standardized export format from SHARK — shark_read","title":"Read tab delimited files downloaded from SHARK Uses read_delim to read tab delimited files with standardized export format from SHARK — shark_read","text":"Read tab delimited files downloaded SHARK Uses read_delim read tab delimited files standardized export format SHARK","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read tab delimited files downloaded from SHARK Uses read_delim to read tab delimited files with standardized export format from SHARK — shark_read","text":"","code":"shark_read(filename, delimiters = \"point-tab\", encoding = \"latin_1\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read tab delimited files downloaded from SHARK Uses read_delim to read tab delimited files with standardized export format from SHARK — shark_read","text":"filename Path file read delimiters Character. Specifies delimiter used separate values filename. Options \"point-tab\" (tab-separated) \"point-semi\" (semicolon-separated). Default \"point-tab\". encoding Character. Specifies text encoding filename. Options \"cp1252\", \"utf_8\", \"utf_16\", \"latin_1\". Default \"utf_8\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read tab delimited files downloaded from SHARK Uses read_delim to read tab delimited files with standardized export format from SHARK — shark_read","text":"Data frame file","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read_deliv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read .xlsx files delivered to SHARK Uses readxl to read excel files with standardized delivery format — shark_read_deliv","title":"Read .xlsx files delivered to SHARK Uses readxl to read excel files with standardized delivery format — shark_read_deliv","text":"Read .xlsx files delivered SHARK Uses readxl read excel files standardized delivery format","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read_deliv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read .xlsx files delivered to SHARK Uses readxl to read excel files with standardized delivery format — shark_read_deliv","text":"","code":"shark_read_deliv(filename, skip = 2, sheet = 2)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read_deliv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read .xlsx files delivered to SHARK Uses readxl to read excel files with standardized delivery format — shark_read_deliv","text":"filename path file read skip Minimum number rows skip reading anything, column names data. Leading empty rows automatically skipped, lower bound. Ignored range given. Default 2. sheet Sheet read. Either string (name sheet), integer (position sheet). Ignored sheet specified via range. neither argument specifies sheet, defaults second sheet.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read_deliv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read .xlsx files delivered to SHARK Uses readxl to read excel files with standardized delivery format — shark_read_deliv","text":"Data frame file","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read_deliv_xls.html","id":null,"dir":"Reference","previous_headings":"","what":"Read .xls files delivered to SHARK Uses readxl to read excel files with standardized delivery format — shark_read_deliv_xls","title":"Read .xls files delivered to SHARK Uses readxl to read excel files with standardized delivery format — shark_read_deliv_xls","text":"Read .xls files delivered SHARK Uses readxl read excel files standardized delivery format","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read_deliv_xls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read .xls files delivered to SHARK Uses readxl to read excel files with standardized delivery format — shark_read_deliv_xls","text":"","code":"shark_read_deliv_xls(filename, skip = 2, sheet = 2)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read_deliv_xls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read .xls files delivered to SHARK Uses readxl to read excel files with standardized delivery format — shark_read_deliv_xls","text":"filename path file read skip Minimum number rows skip reading anything, column names data. Leading empty rows automatically skipped, lower bound. Ignored range given. Default 2. sheet Sheet read. Either string (name sheet), integer (position sheet). Ignored sheet specified via range. neither argument specifies sheet, defaults second sheet.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read_deliv_xls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read .xls files delivered to SHARK Uses readxl to read excel files with standardized delivery format — shark_read_deliv_xls","text":"Data frame file","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read_zip.html","id":null,"dir":"Reference","previous_headings":"","what":"Read zip archive and unzip tab delimited files downloaded from SHARK Uses unzip (unz) and read_delim to unzip archive and read tab delimited files with standardized export format from SHARK — shark_read_zip","title":"Read zip archive and unzip tab delimited files downloaded from SHARK Uses unzip (unz) and read_delim to unzip archive and read tab delimited files with standardized export format from SHARK — shark_read_zip","text":"Read zip archive unzip tab delimited files downloaded SHARK Uses unzip (unz) read_delim unzip archive read tab delimited files standardized export format SHARK","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read_zip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read zip archive and unzip tab delimited files downloaded from SHARK Uses unzip (unz) and read_delim to unzip archive and read tab delimited files with standardized export format from SHARK — shark_read_zip","text":"","code":"shark_read_zip(zipname)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read_zip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read zip archive and unzip tab delimited files downloaded from SHARK Uses unzip (unz) and read_delim to unzip archive and read tab delimited files with standardized export format from SHARK — shark_read_zip","text":"zipname path file read","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read_zip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read zip archive and unzip tab delimited files downloaded from SHARK Uses unzip (unz) and read_delim to unzip archive and read tab delimited files with standardized export format from SHARK — shark_read_zip","text":"Data frame file","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/update_dyntaxa_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Update taxonomy from SHARK via SLU Artdatabanken API (Dyntaxa) — update_dyntaxa_taxonomy","title":"Update taxonomy from SHARK via SLU Artdatabanken API (Dyntaxa) — update_dyntaxa_taxonomy","text":"function updates Dyntaxa taxonomy records based list Dyntaxa taxon IDs. collects parent IDs SLU Artdatabanken API (Dyntaxa), retrieves full taxonomy records, organizes data full taxonomic table can joined data downloaded SHARK","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/update_dyntaxa_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update taxonomy from SHARK via SLU Artdatabanken API (Dyntaxa) — update_dyntaxa_taxonomy","text":"","code":"update_dyntaxa_taxonomy(   dyntaxa_ids,   subscription_key = Sys.getenv(\"DYNTAXA_KEY\"),   add_missing_taxa = FALSE,   verbose = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/update_dyntaxa_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update taxonomy from SHARK via SLU Artdatabanken API (Dyntaxa) — update_dyntaxa_taxonomy","text":"dyntaxa_ids vector Dyntaxa taxon IDs update. subscription_key Dyntaxa API subscription key. default, key read environment variable DYNTAXA_KEY. can provide key three ways: Directly parameter: update_dyntaxa_taxonomy(238366, subscription_key = \"your_key_here\") Temporarily session: Sys.setenv(DYNTAXA_KEY = \"your_key_here\") Permanently across sessions adding ~/.Renviron file. Use usethis::edit_r_environ() open file, add: DYNTAXA_KEY=your_key_here add_missing_taxa Logical. TRUE, function attempt fetch missing taxa (.e., taxon_ids found initial Dyntaxa DwC-query). Default FALSE. verbose Logical. Print progress messages. Default TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/update_dyntaxa_taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update taxonomy from SHARK via SLU Artdatabanken API (Dyntaxa) — update_dyntaxa_taxonomy","text":"data frame representing updated Dyntaxa taxonomy table.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/update_dyntaxa_taxonomy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update taxonomy from SHARK via SLU Artdatabanken API (Dyntaxa) — update_dyntaxa_taxonomy","text":"valid Dyntaxa API subscription key required. can request free key \"Taxonomy\" service ArtDatabanken API portal: https://api-portal.artdatabanken.se/ Note: Please review API conditions register access using API. Data collected API stored SLU Artdatabanken. Please also note authors SHARK4R affiliated SLU Artdatabanken.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/update_dyntaxa_taxonomy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update taxonomy from SHARK via SLU Artdatabanken API (Dyntaxa) — update_dyntaxa_taxonomy","text":"","code":"if (FALSE) { # \\dontrun{ # Update Dyntaxa taxonomy for taxon IDs 238366 and 1010380 updated_taxonomy <- update_dyntaxa_taxonomy(c(238366, 1010380), \"your_subscription_key\") print(updated_taxonomy) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/update_worms_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve and Organize WoRMS Taxonomy for SHARK Aphia IDs — update_worms_taxonomy","title":"Retrieve and Organize WoRMS Taxonomy for SHARK Aphia IDs — update_worms_taxonomy","text":"function deprecated replaced function accurate name. Use add_worms_taxonomy() instead. function collects WoRMS (World Register Marine Species) taxonomy information given set Aphia IDs. data organized full taxonomic table can joined data downloaded SHARK.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/update_worms_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve and Organize WoRMS Taxonomy for SHARK Aphia IDs — update_worms_taxonomy","text":"","code":"update_worms_taxonomy(aphia_id, aphiaid = deprecated())"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/update_worms_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve and Organize WoRMS Taxonomy for SHARK Aphia IDs — update_worms_taxonomy","text":"aphia_id numeric vector containing Aphia IDs WoRMS taxonomy needs updated. aphiaid Use aphia_id instead.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/update_worms_taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve and Organize WoRMS Taxonomy for SHARK Aphia IDs — update_worms_taxonomy","text":"data frame containing updated WoRMS taxonomy information.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/update_worms_taxonomy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve and Organize WoRMS Taxonomy for SHARK Aphia IDs — update_worms_taxonomy","text":"","code":"if (FALSE) { # \\dontrun{ # Update WoRMS taxonomy for a set of Aphia IDs updated_taxonomy <- update_worms_taxonomy(c(149619, 149122, 11)) print(updated_taxonomy) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/which_basin.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if Points are in a Specified Sea Basin — which_basin","title":"Determine if Points are in a Specified Sea Basin — which_basin","text":"function wrapper/re-export iRfcb::ifcb_which_basin(). iRfcb package required want actually call function.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/which_basin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if Points are in a Specified Sea Basin — which_basin","text":"","code":"which_basin(latitudes, longitudes, plot = FALSE, shape_file = NULL)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/which_basin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if Points are in a Specified Sea Basin — which_basin","text":"latitudes numeric vector latitude points. longitudes numeric vector longitude points. plot boolean indicating whether plot points along sea basins. Default FALSE. shape_file absolute path custom polygon shapefile WGS84 (EPSG:4326) represents sea basin. Defaults Baltic Sea, Kattegat, Skagerrak basins included iRfcb package.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/which_basin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if Points are in a Specified Sea Basin — which_basin","text":"vector indicating basin point belongs , ggplot object plot = TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/which_basin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine if Points are in a Specified Sea Basin — which_basin","text":"function identifies sub-basin set latitude longitude points belong , using user-specified default shapefile. default shapefile includes Baltic Sea, Kattegat, Skagerrak basins included iRfcb package. function reads pre-packaged shapefile Baltic Sea, Kattegat, Skagerrak basins iRfcb package default, user-supplied shapefile provided. shapefiles originate SHARK (https://shark.smhi.se/). sets CRS, transforms CRS WGS84 (EPSG:4326) necessary, checks given points fall within specified sea basin. Optionally, plots points sea basin polygons together.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/which_basin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if Points are in a Specified Sea Basin — which_basin","text":"","code":"# Define example latitude and longitude vectors latitudes <- c(55.337, 54.729, 56.311, 57.975) longitudes <- c(12.674, 14.643, 12.237, 10.637)  # Check in which Baltic sea basin the points are in points_in_the_baltic <- which_basin(latitudes, longitudes) print(points_in_the_baltic) #> [1] \"13 - Arkona Basin\"   \"12 - Bornholm Basin\" \"16 - Kattegat\"       #> [4] \"17 - Skagerrak\"       # Plot the points and the basins which_basin(latitudes, longitudes, plot = TRUE)"},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/news/index.html","id":"new-features-development-version","dir":"Changelog","previous_headings":"","what":"New features","title":"SHARK4R (development version)","text":"Add new function get_shark_datasets() retrieve available SHARK datasets API. Add new function get_nomp_list() download read latest NOMP biovolume Excel lists. Add new function get_peg_list() download read PEG biovolume Excel list. Add new function read_ptbx() read Plankton Toolbox files. Add new function get_shark_codes() download read current SHARK code lists. Add new function clean_shark4r_cache() clear cached files.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/news/index.html","id":"enhancements-development-version","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"SHARK4R (development version)","text":"Re-export functions iRfcb package: which_basin() positions_are_near_land(). Cache downloaded DwCA files get_dyntaxa_dwca(), get_shark_codes(), get_nomp_list() get_peg_list() avoid repeated downloads. Add unit tests majority package functions. Fix bugs check_* functions. Fix various documentation issues. Updated several OBIS-dependent functions using lookup_xy().","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/news/index.html","id":"deprecated-development-version","dir":"Changelog","previous_headings":"","what":"Deprecated","title":"SHARK4R (development version)","text":"Deprecated functions: ifcb_is_near_land() ifcb_which_basin() (replaced re-exported functions improved cache behavior) Deprecated function: match_dyntaxa() now replaced is_in_dyntaxa(). Deprecated argument: apikey replaced subscription_key get_algaebase_genus(), get_algaebase_species() match_algaebase()","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/news/index.html","id":"defunct--removed-development-version","dir":"Changelog","previous_headings":"","what":"Defunct / Removed","title":"SHARK4R (development version)","text":"Defunct function get_shark_table().","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/news/index.html","id":"documentation-development-version","dir":"Changelog","previous_headings":"","what":"Documentation","title":"SHARK4R (development version)","text":"Add NEWS.md file. Add spell check.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/news/index.html","id":"shark4r-017","dir":"Changelog","previous_headings":"","what":"SHARK4R 0.1.7","title":"SHARK4R 0.1.7","text":"Add option specify row_limits get_shark_data() retrieve data yearly chunks Add functions call APIs retrieve IOC HAB IOC IPHAB Toxin lists: get_hab_list() get_toxin_list()","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/news/index.html","id":"shark4r-016","dir":"Changelog","previous_headings":"","what":"SHARK4R 0.1.6","title":"SHARK4R 0.1.6","text":"Patch release Fix issue #16 Add unparsed output option get_shark_option()","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/news/index.html","id":"shark4r-015","dir":"Changelog","previous_headings":"","what":"SHARK4R 0.1.5","title":"SHARK4R 0.1.5","text":"Patch release Fix issues construct_dyntaxa_table() Fix parsing issue get_shark_data() Add custom groups assign_plankton_group() Add flexibility get_shark_data() parameters, e.g. boundary year ranges","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/news/index.html","id":"shark4r-014","dir":"Changelog","previous_headings":"","what":"SHARK4R 0.1.4","title":"SHARK4R 0.1.4","text":"Add algaebase API functions Defunct sharkdata functions Fix parsing issue shark_data data reported “-”, now NA pattern Cleanup large files UTF-8 encoding","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/news/index.html","id":"shark4r-013","dir":"Changelog","previous_headings":"","what":"SHARK4R 0.1.3","title":"SHARK4R 0.1.3","text":"Minor bug-fixes updated documentation","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/news/index.html","id":"shark4r-012","dir":"Changelog","previous_headings":"","what":"SHARK4R 0.1.2","title":"SHARK4R 0.1.2","text":"Patch release","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/news/index.html","id":"shark4r-011","dir":"Changelog","previous_headings":"","what":"SHARK4R 0.1.1","title":"SHARK4R 0.1.1","text":"Fix download large datasets Add WoRMS functionality, including plankton group assignment","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/news/index.html","id":"shark4r-010","dir":"Changelog","previous_headings":"","what":"SHARK4R 0.1.0","title":"SHARK4R 0.1.0","text":"Add SHARK API functionality Improve Dyntaxa API functionality Fix documentation issues","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/news/index.html","id":"shark4r-001","dir":"Changelog","previous_headings":"","what":"SHARK4R 0.0.1","title":"SHARK4R 0.0.1","text":"Initial development version.","code":""}]
