[{"path":"https://sharksmhi.github.io/SHARK4R/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 sharksmhi Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/articles/quality_control.html","id":"quality-control","dir":"Articles","previous_headings":"","what":"Quality Control","title":"Quality Control of SHARK Data","text":"Listed functions can used quality control SHARK data.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/articles/quality_control.html","id":"check-required-fields","dir":"Articles","previous_headings":"Quality Control","what":"Check required fields","title":"Quality Control of SHARK Data","text":"check_datatype() check global SHARK required fields present occurrence table values missing. functions returns dataframe errors ().","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/articles/quality_control.html","id":"plot-points-on-a-map","dir":"Articles","previous_headings":"Quality Control","what":"Plot points on a map","title":"Quality Control of SHARK Data","text":"plot_map() generate ggplot2 map occurrence records, plot_map_leaflet() creates zoomable interactive Leaflet map.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/articles/quality_control.html","id":"check-points-on-land","dir":"Articles","previous_headings":"Quality Control","what":"Check points on land","title":"Quality Control of SHARK Data","text":"check_onland() uses xylookup web service internally uses land polygons OpenStreetMap check points located land. shapefiles can used well.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/articles/quality_control.html","id":"check-depth","dir":"Articles","previous_headings":"Quality Control","what":"Check depth","title":"Quality Control of SHARK Data","text":"check_depth() uses xylookup web service identify records potentially invalid depths. Multiple checks performed function: missing depth column (warning) empty depth column (warning) depth values can’t converted numbers (error) values larger depth value bathymetry layer, applying provided depthmargin (error) depth values negative shore points, applying provided shoremargin (error) minimum depth greater maximum depth (error)","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/articles/quality_control.html","id":"check-outliers","dir":"Articles","previous_headings":"Quality Control","what":"Check outliers","title":"Quality Control of SHARK Data","text":"check_outliers_dataset() use qc-service web service identify records statistical outliers. species outlier checks performed environmental data (bathymetry, sea surface salinity sea surface temperature) well spatially. Outliers identified points deviate six times median absolute deviation (MAD) three times interquartile range (IQR) median. list extra field debug level output report provides relevant statistics outlier analysis based. report also gives overview outliers. Outliers can plotted plot_outliers(report)","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/articles/quality_control.html","id":"irfcb-functions","dir":"Articles","previous_headings":"Quality Control","what":"iRfcb functions","title":"Quality Control of SHARK Data","text":"ifcb_is_near_land() ifcb_which_basin() functions sourced iRfcb package, can used geospatial quality control SHARK data.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/articles/quality_control.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"Quality Control of SHARK Data","text":"","code":"## To cite package 'SHARK4R' in publications use: ##  ##   Markus Lindh, Anders Torstensson (2024). SHARK4R: Retrieving, ##   Analyzing, and Validating Marine Data from SHARK and Nordic ##   Microalgae. R package version 0.1.4. ##   https://doi.org/10.5281/zenodo.14169399 ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {SHARK4R: Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae}, ##     author = {Markus Lindh and Anders Torstensson}, ##     year = {2024}, ##     note = {R package version 0.1.4}, ##     url = {https://doi.org/10.5281/zenodo.14169399}, ##   }"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_algaebase_data.html","id":"algaebase","dir":"Articles","previous_headings":"","what":"AlgaeBase","title":"Retrieve Taxonomic Data From AlgaeBase","text":"AlgaeBase comprehensive database containing information wide variety algae species, including terrestrial, marine, freshwater organisms, emphasis marine botany. also includes sea-grasses, though flowering plants rather true algae. AlgaeBase continually updated funded various phycological societies, contributions researchers institutions worldwide. invaluable resource taxonomic studies, definitive source, represents synthesis various taxonomic opinions remains work progress. can accessed via web interface API, demonstrated tutorial using SHARK4R.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_algaebase_data.html","id":"installation","dir":"Articles","previous_headings":"Getting Started","what":"Installation","title":"Retrieve Taxonomic Data From AlgaeBase","text":"can install package GitHub using devtools package: Load SHARK4R tibble libraries:","code":"# install.packages(\"devtools\") devtools::install_github(\"sharksmhi/SHARK4R\",                          dependencies = TRUE) library(SHARK4R) library(tibble)"},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_algaebase_data.html","id":"algaebase-api-key","dir":"Articles","previous_headings":"Retrieve AlgaeBase Data","what":"AlgaeBase API Key","title":"Retrieve Taxonomic Data From AlgaeBase","text":"AlgaeBase requires subscription key access API. obtain key, please visit API documentation. example , key retrieved environment variable.","code":"# Retrieve the API key algaebase_key <- Sys.getenv(\"ALGAEBASE_KEY\")"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_algaebase_data.html","id":"match-genus-name","dir":"Articles","previous_headings":"Retrieve AlgaeBase Data","what":"Match Genus Name","title":"Retrieve Taxonomic Data From AlgaeBase","text":"Taxonomic records can retrieved individual genera names using get_algaebase_genus function.","code":"# Match a genus name with AlgaeBase API genus_records <- get_algaebase_genus(genus = \"Gymnodinium\",                                      apikey = algaebase_key)  # Print the result print(genus_records) ##      id accepted_name  input_name input_match currently_accepted genus_only ## 1 43632   Gymnodinium Gymnodinium           1                  1          1 ##     kingdom         phylum       class         order         family       genus ## 1 Chromista Dinoflagellata Dinophyceae Gymnodiniales Gymnodiniaceae Gymnodinium ##   species infrasp                 long_name                 taxonomic_status ## 1      NA      NA Gymnodinium F.Stein, 1878 currently accepted taxonomically ##   taxon_rank   mod_date authorship ## 1      genus 2024-06-13    F.Stein"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_algaebase_data.html","id":"match-species-name","dir":"Articles","previous_headings":"Retrieve AlgaeBase Data","what":"Match Species Name","title":"Retrieve Taxonomic Data From AlgaeBase","text":"Taxonomic records can retrieved individual species names using get_algaebase_species function.","code":"# Match a species with AlgaeBase API species_records <- get_algaebase_species(genus = \"Tripos\",                                          species = \"muelleri\",                                          apikey = algaebase_key)  # Print the result print(species_records) ##      id   accepted_name      input_name input_match currently_accepted ## 1 65254 Tripos muelleri Tripos muelleri           1                  1 ##   genus_only   kingdom         phylum       class         order      family ## 1          0 Chromista Dinoflagellata Dinophyceae Gonyaulacales Ceratiaceae ##    genus  species infrasp            long_name                 taxonomic_status ## 1 Tripos muelleri      NA Tripos muelleri Bory currently accepted taxonomically ##   taxon_rank   mod_date authorship ## 1    species 2024-05-28       Bory"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_algaebase_data.html","id":"match-multiple-scientific-names","dir":"Articles","previous_headings":"Retrieve AlgaeBase Data","what":"Match Multiple Scientific Names","title":"Retrieve Taxonomic Data From AlgaeBase","text":"Multiple names can matched match_algaebase function. scientific names need parsed genus species names passed API, can achieved parse_scientific_names function.","code":"# Retrieve all phytoplankton data from April 2015 shark_data <- get_shark_data(fromYear = 2015,                               toYear = 2015,                              months = 4,                               dataTypes = c(\"Phytoplankton\"),                              verbose = FALSE)  # Randomly select 10 rows from the shark_data dataframe random_rows <- shark_data[sample(nrow(shark_data), 10), ]  # Parse scientific names into genus and species names parsed_taxa <- parse_scientific_names(random_rows$scientific_name)  # Print the parsed data print(parsed_taxa) ##                                     genus    species ## Pyramimonas                   Pyramimonas            ## Tripos muelleri                    Tripos   muelleri ## Mesodinium rubrum              Mesodinium     rubrum ## Uni                                   Uni            ## Gyrodinium spirale             Gyrodinium    spirale ## Tripos furca                       Tripos      furca ## Ebria tripartita                    Ebria tripartita ## Amylax triacantha                  Amylax triacantha ## Pseudopedinella thomsenii Pseudopedinella  thomsenii ## Flagellates                   Flagellates # Match the taxa with AlgaeBase algaebase_match <- match_algaebase(genus = parsed_taxa$genus,                                    species = parsed_taxa$species,                                    apikey = algaebase_key,                                    verbose = FALSE)  # Print the result tibble(algaebase_match) ## # A tibble: 10 × 19 ##    genus  species     id accepted_name input_name input_match currently_accepted ##    <chr>  <chr>    <int> <chr>         <chr>            <dbl>              <dbl> ##  1 Amylax triaca…  52120 Amylax triac… Amylax tr…           1                  1 ##  2 Ebria  tripar…  56482 Ebria tripar… Ebria tri…           1                  1 ##  3 Flage… NA          NA NA            NA                  NA                 NA ##  4 Gyrod… spirale  52419 Gyrodinium s… Gyrodiniu…           1                  1 ##  5 Mesod… rubrum   56539 Mesodinium r… Mesodiniu…           1                  1 ##  6 Pseud… thomse… 124166 Pseudopedine… Pseudoped…           1                  1 ##  7 Pyram… NA       43516 Pyramimonas   Pyramimon…           1                  1 ##  8 Tripos furca   149801 Tripos furca  Tripos fu…           1                  1 ##  9 Tripos muelle…  65254 Tripos muell… Tripos mu…           1                  1 ## 10 Uni    NA          NA NA            NA                  NA                 NA ## # ℹ 12 more variables: genus_only <dbl>, kingdom <chr>, phylum <chr>, ## #   class <chr>, order <chr>, family <chr>, infrasp <lgl>, long_name <chr>, ## #   taxonomic_status <chr>, taxon_rank <chr>, mod_date <date>, authorship <chr>"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_algaebase_data.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"Retrieve Taxonomic Data From AlgaeBase","text":"","code":"## To cite package 'SHARK4R' in publications use: ##  ##   Markus Lindh, Anders Torstensson (2024). SHARK4R: Retrieving, ##   Analyzing, and Validating Marine Data from SHARK and Nordic ##   Microalgae. R package version 0.1.4. ##   https://doi.org/10.5281/zenodo.14169399 ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {SHARK4R: Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae}, ##     author = {Markus Lindh and Anders Torstensson}, ##     year = {2024}, ##     note = {R package version 0.1.4}, ##     url = {https://doi.org/10.5281/zenodo.14169399}, ##   }"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_dyntaxa_data.html","id":"dyntaxa","dir":"Articles","previous_headings":"","what":"Dyntaxa","title":"Retrieve Taxonomic Data From Dyntaxa","text":"Dyntaxa taxonomic database Swedish organisms hosted SLU Artdatabanken, providing information names relationships. database includes details current classification, recommended names, commonly used synonymous misapplied names. Dyntaxa continuously updated new species Sweden, new Swedish names, synonymous scientific names, new data relationships. data Dyntaxa serves foundation framework taxonomic information SHARK. can accessed via web interface API, demonstrated tutorial using SHARK4R.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_dyntaxa_data.html","id":"installation","dir":"Articles","previous_headings":"Getting Started","what":"Installation","title":"Retrieve Taxonomic Data From Dyntaxa","text":"can install package GitHub using devtools package: Load SHARK4R tibble libraries:","code":"# install.packages(\"devtools\") devtools::install_github(\"sharksmhi/SHARK4R\",                          dependencies = TRUE) library(SHARK4R) library(tibble)"},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_dyntaxa_data.html","id":"retrieve-taxonony-table","dir":"Articles","previous_headings":"Retrieve Taxonomic Data From SHARK","what":"Retrieve Taxonony Table","title":"Retrieve Taxonomic Data From Dyntaxa","text":"Taxon tables can retrieved filtering options available SHARK. see available filtering options, please refer get_shark_options information .","code":"# Retrieve chlorophyll data for April to June from 2019 to 2020 shark_taxon <- get_shark_data(tableView = \"report_taxon\",                               fromYear = 2019,                               toYear = 2020,                               months = c(),                               dataTypes = \"Phytoplankton\",                               verbose = FALSE)  # Print data print(shark_taxon) ## # A tibble: 701 × 6 ##    reported_scientific_name  scientific_name dyntaxa_id aphia_id taxon_hierarchy ##    <chr>                     <chr>                <dbl>    <dbl> <chr>           ##  1 Acanthoceras zachariasii  Acanthoceras z…     264148   178990 Chromista - Sa… ##  2 Acanthoica quattrospina   Acanthoica qua…     236952   235802 Chromista - Ha… ##  3 Acanthostomella           Acanthostomella    1010638       NA Chromista - Sa… ##  4 Acanthostomella norvegica Acanthostomell…     238502   183556 Chromista - Sa… ##  5 Achnanthes                Achnanthes         1010466   149191 Chromista - Sa… ##  6 Actinastrum hantzschii    Actinastrum ha…     238839   160543 Plantae - Viri… ##  7 Actinocyclus              Actinocyclus       1010407   148944 Chromista - Sa… ##  8 Actinocyclus normanii     Actinocyclus n…     237433   148945 Chromista - Sa… ##  9 Actinocyclus octonarius   Actinocyclus o…     237434   149164 Chromista - Sa… ## 10 Actinocyclus octonarius … Actinocyclus o…     248668   162770 Chromista - Sa… ## # ℹ 691 more rows ## # ℹ 1 more variable: counted_rows <dbl>"},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_dyntaxa_data.html","id":"dyntaxa-api-key","dir":"Articles","previous_headings":"Retrieve Dyntaxa Data","what":"Dyntaxa API Key","title":"Retrieve Taxonomic Data From Dyntaxa","text":"Dyntaxa requires subscription key access API. obtain key, sign taxonomy product SLU Swedish Species Information Centre´s Developer Portal. example , key retrieved environment variable.","code":"# Retrieve the API key dyntaxa_key <- Sys.getenv(\"DYNTAXA_KEY\")"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_dyntaxa_data.html","id":"match-taxon-names","dir":"Articles","previous_headings":"Retrieve Dyntaxa Data","what":"Match Taxon Names","title":"Retrieve Taxonomic Data From Dyntaxa","text":"","code":"# Randomly select 10 taxa from shark_taxon$scientific_name taxon_names <- sample(shark_taxon$scientific_name, size = 10)  # Match taxon_names with Dyntaxa API matches <- match_taxon_name(taxon_names,                              dyntaxa_key,                              multiple_options = FALSE,                             verbose = FALSE)  # Print the result tibble(matches) ## # A tibble: 10 × 5 ##    search_pattern                         taxon_id best_match  author valid_name ##    <chr>                                     <int> <chr>       <chr>  <chr>      ##  1 Cosmarium                               1010708 Cosmarium   Corda… Cosmarium  ##  2 Monoraphidium dybowskii                  238756 Monoraphid… (Wolo… Monoraphi… ##  3 Pavlova                                 1010307 Pavlova     Butch… Pavlova    ##  4 Aulacoseira islandica subsp. helvetica   248665 Aulacoseir… (O.F.… Aulacosei… ##  5 Planktosphaeria gelatinosa               238776 Planktosph… G.M. … Planktosp… ##  6 Pyramimonas virginica                    238976 Pyramimona… Penni… Pyramimon… ##  7 Oxytoxum gracile                         238173 Oxytoxum g… J.Sch… Oxytoxum … ##  8 Desmodesmus armatus                      238842 Desmodesmu… (Chod… Desmodesm… ##  9 Dactyliosolen fragilissimus              237461 Dactylioso… (Berg… Dactylios… ## 10 Protoperidinium curtipes                 238251 Protoperid… (E. J… Protoperi…"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_dyntaxa_data.html","id":"retrieve-taxonomic-information","dir":"Articles","previous_headings":"Retrieve Dyntaxa Data","what":"Retrieve Taxonomic information","title":"Retrieve Taxonomic Data From Dyntaxa","text":"Taxonomic records can retrieved indivudual taxa using get_dyntaxa_records function.","code":"# Get all Dyntaxa IDs dyntaxa_id <- unique(matches$taxon_id)  # Remove potential NAs dyntaxa_id <- dyntaxa_id[!is.na(dyntaxa_id)]  # Get Dyntaxa records dyntaxa_records <- get_dyntaxa_records(dyntaxa_id,                                        dyntaxa_key)  # Print records tibble(dyntaxa_records) ## # A tibble: 10 × 24 ##    taxonId parentId secondaryParents sortOrder isMicrospecies externalComment    ##      <int>    <int> <list>               <int> <lgl>          <chr>              ##  1  237461  1010415 <list [0]>           72944 FALSE          NA                 ##  2  238173  1010573 <list [0]>           69201 FALSE          NA                 ##  3  238251  1010596 <list [0]>           69293 FALSE          NA                 ##  4  238756  1016310 <list [0]>          111228 FALSE          NA                 ##  5  238776  1010736 <list [0]>          111184 FALSE          NA                 ##  6  238842  1010759 <list [0]>          111045 FALSE          NA                 ##  7  238976  1010807 <list [0]>          111394 FALSE          NA                 ##  8  248665   237397 <list [0]>           72813 FALSE          NA                 ##  9 1010307  2003125 <list [0]>           68511 FALSE          NA                 ## 10 1010708  2003281 <list [0]>           95649 FALSE          Original publicat… ## # ℹ 18 more variables: redlistCategory <lgl>, excludeFromReportingSystem <lgl>, ## #   nrOfChilds <int>, names <list>, typedRelations.parentRelations <list>, ## #   typedRelations.childRelations <list>, status.id <int>, status.value <chr>, ## #   status.name <chr>, statusReason.id <int>, statusReason.value <chr>, ## #   statusReason.name <chr>, category.id <int>, category.value <chr>, ## #   category.name <chr>, type.id <int>, type.value <chr>, type.name <chr>"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_dyntaxa_data.html","id":"retrieve-parent-ids","dir":"Articles","previous_headings":"Retrieve Dyntaxa Data","what":"Retrieve Parent IDs","title":"Retrieve Taxonomic Data From Dyntaxa","text":"parent taxa Dyntaxa ID can retrieved using get_dyntaxa_parent_ids function.","code":"# Get all parents parents_id <- get_dyntaxa_parent_ids(dyntaxa_id,                                       dyntaxa_key,                                      verbose = FALSE)  # List the IDs print(parents_id) ## [[1]] ## [1] 5000045 6000581 6000543 6000542 4000126 6008733 2003281 1010708 ##  ## [[2]] ## [1] 5000045 6000581 6000582 5000046 4000128 3000412 6001105 1016310  238756 ##  ## [[3]] ## [1] 5000055 6011754 5000056 4000154 3000560 2003125 1010307 ##  ## [[4]] ##  [1] 5000055 6011755 6011756 6011758 6322929 5000104 6323134 6323136 4000164 ## [10] 3000587 2003165 1010397  237397  248665 ##  ## [[5]] ## [1] 5000045 6000581 6000582 5000046 4000128 3000412 6007670 1010736  238776 ##  ## [[6]] ## [1] 5000045 6000581 6000582 5000046 4000181 3000643 2003305 1010807  238976 ##  ## [[7]] ##  [1] 5000055 6011755 6011756 6011759 6011678 5000062 6011725 6011726 4000169 ## [10] 3000850 2003944 1010573  238173 ##  ## [[8]] ## [1] 5000045 6000581 6000582 5000046 4000128 3000412 2003290 1010759  238842 ##  ## [[9]] ##  [1] 5000055 6011755 6011756 6011758 6322929 5000104 6323134 6323136 4000164 ## [10] 3000591 2003174 1010415  237461 ##  ## [[10]] ##  [1] 5000055 6011755 6011756 6011759 6011678 5000062 6011725 6011726 4000169 ## [10] 3000850 2003235 1010596  238251"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_dyntaxa_data.html","id":"construct-complete-taxonomic-table","dir":"Articles","previous_headings":"Retrieve Dyntaxa Data","what":"Construct Complete Taxonomic Table","title":"Retrieve Taxonomic Data From Dyntaxa","text":"complete taxonomic table, including related taxa, can constructed using construct_dyntaxa_table function. Synonms can included using recommended_only parameter.","code":"# Retrieve complete taxonomic table (including parents and all descendants below genus level) taxonomy_table <- construct_dyntaxa_table(parents_id,                                            dyntaxa_key,                                            shark_output = TRUE,                                            recommended_only = FALSE,                                            add_genus_children = TRUE,                                           verbose = FALSE)  # Print the taxonomy table as a tibble tibble(taxonomy_table) ## # A tibble: 368 × 12 ##    taxon_id name    rank  author Kingdom Phylum Class Order Family Genus Species ##       <int> <chr>   <chr> <chr>  <chr>   <chr>  <chr> <chr> <chr>  <chr> <chr>   ##  1  5000045 Plantae King… Haeck… Plantae NA     NA    NA    NA     NA    NA      ##  2  4000126 Conjug… Class Engler Plantae NA     Conj… NA    NA     NA    NA      ##  3  6008733 Desmid… Order Bessey Plantae NA     Conj… Desm… NA     NA    NA      ##  4  2003281 Desmid… Fami… Ralfs  Plantae NA     Conj… Desm… Desmi… NA    NA      ##  5  1010708 Cosmar… Genus Corda… Plantae NA     Conj… Desm… Desmi… Cosm… NA      ##  6    38895 Cosmar… Spec… Bréb.… Plantae NA     Conj… Desm… Desmi… Cosm… Cosmar… ##  7    38896 Cosmar… Spec… Meneg… Plantae NA     Conj… Desm… Desmi… Cosm… Cosmar… ##  8    38897 Cosmar… Spec… Corda… Plantae NA     Conj… Desm… Desmi… Cosm… Cosmar… ##  9    38898 Cosmar… Spec… Bréb.… Plantae NA     Conj… Desm… Desmi… Cosm… Cosmar… ## 10    38899 Cosmar… Spec… Elfvi… Plantae NA     Conj… Desm… Desmi… Cosm… Cosmar… ## # ℹ 358 more rows ## # ℹ 1 more variable: hierarchy <chr>"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_dyntaxa_data.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"Retrieve Taxonomic Data From Dyntaxa","text":"","code":"## To cite package 'SHARK4R' in publications use: ##  ##   Markus Lindh, Anders Torstensson (2024). SHARK4R: Retrieving, ##   Analyzing, and Validating Marine Data from SHARK and Nordic ##   Microalgae. R package version 0.1.4. ##   https://doi.org/10.5281/zenodo.14169399 ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {SHARK4R: Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae}, ##     author = {Markus Lindh and Anders Torstensson}, ##     year = {2024}, ##     note = {R package version 0.1.4}, ##     url = {https://doi.org/10.5281/zenodo.14169399}, ##   }"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_nordic_microalgae_data.html","id":"nordic-microalgae","dir":"Articles","previous_headings":"","what":"Nordic Microalgae","title":"Retrieve Data From Nordic Microalgae","text":"Nordic Microalgae online platform providing high-quality images, illustrations, detailed information aquatic microalgae related organisms Nordic region, including phytoplankton, microzooplankton, benthic microalgae. features comprehensive species checklist, --date taxonomic data linked WoRMS AlgaeBase, supplementary resources biovolume lists occurrence maps. Established 1996 supported long-term funding Swedish Research Council Swedish Biodiversity Data Infrastructure (SBDI). data Nordic Microalgae accessible API. examples demonstrating extract data using SHARK4R package.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_nordic_microalgae_data.html","id":"installation","dir":"Articles","previous_headings":"Getting Started","what":"Installation","title":"Retrieve Data From Nordic Microalgae","text":"can install package GitHub using devtools package: Load SHARK4R tibble libraries:","code":"# install.packages(\"devtools\") devtools::install_github(\"sharksmhi/SHARK4R\",                          dependencies = TRUE) library(SHARK4R) library(tibble)"},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_nordic_microalgae_data.html","id":"retrieve-complete-nordic-microalgae-taxon-table","dir":"Articles","previous_headings":"Retrieve Data Using SHARK4R","what":"Retrieve Complete Nordic Microalgae Taxon Table","title":"Retrieve Data From Nordic Microalgae","text":"complete Nordic Microalgae taxa list can retrieved API. full taxonomic information can accessed unparsed list enabling unparsed parameter.","code":"# Get taxa information taxa <- get_nua_taxa(unparsed = FALSE)  # Print data tibble(taxa) ## # A tibble: 6,852 × 5 ##    scientific_name           authority                       rank  slug  nua_url ##    <chr>                     <chr>                           <chr> <chr> <chr>   ##  1 Abollifer                 Vørs, 1992                      Genus abol… https:… ##  2 Abollifer prolabens       Vørs, 1992                      Spec… abol… https:… ##  3 Acanthoceras              Honigm., 1910                   Genus acan… https:… ##  4 Acanthoceras zachariasii  (Brun) Simonsen, 1979           Spec… acan… https:… ##  5 Acanthocerataceae         Round, Crawford & Mann, 1990    Fami… acan… https:… ##  6 Acanthocorbis             S.Hara & E.Takahashi, 1984      Genus acan… https:… ##  7 Acanthocorbis apoda       (Leadbeater) Hara & Takahashi,… Spec… acan… https:… ##  8 Acanthocorbis asymmetrica (Thomsen) Hara & Takahashi, 19… Spec… acan… https:… ##  9 Acanthocorbis campanula   (Espeland) Thomsen, 1991        Spec… acan… https:… ## 10 Acanthocorbis haurakiana  Thomsen, 1991                   Spec… acan… https:… ## # ℹ 6,842 more rows"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_nordic_microalgae_data.html","id":"get-nordic-microalgae-external-links-or-facts","dir":"Articles","previous_headings":"Retrieve Data Using SHARK4R","what":"Get Nordic Microalgae External Links or Facts","title":"Retrieve Data From Nordic Microalgae","text":"taxon sheet Nordic Microalgae contains facts, links external webpages (e.g. AlgaeBase, WoRMS Dyntaxa). links can retrieved API. full list facts can accessed unparsed list setting unparsed parameter TRUE.","code":"# Randomly select 10 taxa from shark_taxon$scientific_name slugs <- sample(taxa$slug, size = 10)  # Get external links external_links <- get_nua_external_links(slugs,                                           verbose = FALSE,                                           unparsed = FALSE)  # Print list tibble(external_links) ## # A tibble: 47 × 6 ##    slug               provider  label     external_id external_url    collection ##    <chr>              <chr>     <chr>     <chr>       <chr>           <chr>      ##  1 ptychocylis-urnula AlgaeBase AlgaeBase 141097      https://www.al… External … ##  2 ptychocylis-urnula Dyntaxa   Dyntaxa   238511      https://namnoc… External … ##  3 ptychocylis-urnula GBIF      GBIF      8138234     https://www.gb… External … ##  4 ptychocylis-urnula WoRMS     WoRMS     345883      https://www.ma… External … ##  5 ruthnielsenia      AlgaeBase AlgaeBase 47285       https://www.al… External … ##  6 ruthnielsenia      Dyntaxa   Dyntaxa   1008570     https://namnoc… External … ##  7 ruthnielsenia      ENA       ENA       262504      https://www.eb… External … ##  8 ruthnielsenia      GBIF      GBIF      2646125     https://www.gb… External … ##  9 ruthnielsenia      NCBI      NCBI      262504      https://www.nc… External … ## 10 ruthnielsenia      WoRMS     WoRMS     370184      https://www.ma… External … ## # ℹ 37 more rows"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_nordic_microalgae_data.html","id":"get-nordic-microalgae-harmfulness-information","dir":"Articles","previous_headings":"Retrieve Data Using SHARK4R","what":"Get Nordic Microalgae Harmfulness Information","title":"Retrieve Data From Nordic Microalgae","text":"Taxa listed IOC-UNESCO Taxonomic Reference List Harmful Micro Algae contain information harmfulness. information can retrieved API.","code":"# Get external links harmfulness <- get_nua_harmfulness(c(\"dinophysis-acuta\",                                       \"alexandrium-ostenfeldii\"),                                     verbose = FALSE)  # Print list tibble(harmfulness) ## # A tibble: 11 × 6 ##    slug                    provider   label  external_id external_url collection ##    <chr>                   <chr>      <chr>  <chr>       <chr>        <chr>      ##  1 dinophysis-acuta        IOC        IOC H… 109604      https://www… Harmful a… ##  2 dinophysis-acuta        IOC-UNESCO IOC-U… 6           https://tox… Harmful a… ##  3 dinophysis-acuta        IOC-UNESCO IOC-U… 1           https://tox… Harmful a… ##  4 dinophysis-acuta        IOC-UNESCO IOC-U… 5           https://tox… Harmful a… ##  5 alexandrium-ostenfeldii IOC        IOC H… 109712      https://www… Harmful a… ##  6 alexandrium-ostenfeldii IOC-UNESCO IOC-U… 464         https://tox… Harmful a… ##  7 alexandrium-ostenfeldii IOC-UNESCO IOC-U… 463         https://tox… Harmful a… ##  8 alexandrium-ostenfeldii IOC-UNESCO IOC-U… 462         https://tox… Harmful a… ##  9 alexandrium-ostenfeldii IOC-UNESCO IOC-U… 12          https://tox… Harmful a… ## 10 alexandrium-ostenfeldii IOC-UNESCO IOC-U… 15          https://tox… Harmful a… ## 11 alexandrium-ostenfeldii IOC-UNESCO IOC-U… 17          https://tox… Harmful a…"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_nordic_microalgae_data.html","id":"get-nordic-microalgae-media-links","dir":"Articles","previous_headings":"Retrieve Data Using SHARK4R","what":"Get Nordic Microalgae Media Links","title":"Retrieve Data From Nordic Microalgae","text":"Links images present Nordic Microalgae can retrieved API. images available four sizes: original (o), small (s), medium (m), large (l). Complete media information can retrieved unparsed list setting unparsed parameter TRUE.","code":"# Get all media links media <- get_nua_media_links(unparsed = FALSE)  # Print list tibble(media) ## # A tibble: 2,393 × 10 ##    slug              image_l_url image_o_url image_s_url image_m_url contributor ##    <chr>             <chr>       <chr>       <chr>       <chr>       <chr>       ##  1 guinardia-striata https://no… https://no… https://no… https://no… Anders Tor… ##  2 chaetoceros-tort… https://no… https://no… https://no… https://no… Kathrine T… ##  3 blixaea-quinquec… https://no… https://no… https://no… https://no… Kathrine T… ##  4 blixaea-quinquec… https://no… https://no… https://no… https://no… Kathrine T… ##  5 blixaea-quinquec… https://no… https://no… https://no… https://no… Kathrine T… ##  6 polykrikos-kofoi… https://no… https://no… https://no… https://no… Nicklas Bi… ##  7 nodularia-spumig… https://no… https://no… https://no… https://no… Bengt Karl… ##  8 noctiluca-scinti… https://no… https://no… https://no… https://no… Bengt Karl… ##  9 noctiluca-scinti… https://no… https://no… https://no… https://no… Bengt Karl… ## 10 closterium        https://no… https://no… https://no… https://no… Per Wilhel… ## # ℹ 2,383 more rows ## # ℹ 4 more variables: photographer_artist <chr>, copyright_holder <chr>, ## #   license <chr>, galleries <chr>"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_nordic_microalgae_data.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"Retrieve Data From Nordic Microalgae","text":"","code":"## To cite package 'SHARK4R' in publications use: ##  ##   Markus Lindh, Anders Torstensson (2024). SHARK4R: Retrieving, ##   Analyzing, and Validating Marine Data from SHARK and Nordic ##   Microalgae. R package version 0.1.4. ##   https://doi.org/10.5281/zenodo.14169399 ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {SHARK4R: Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae}, ##     author = {Markus Lindh and Anders Torstensson}, ##     year = {2024}, ##     note = {R package version 0.1.4}, ##     url = {https://doi.org/10.5281/zenodo.14169399}, ##   }"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_shark_data.html","id":"shark","dir":"Articles","previous_headings":"","what":"SHARK","title":"Retrieve Data From SHARK","text":"SHARK Swedish Ocean Archive’s platform data downloads. stores biological, physical, chemical marine environmental monitoring data. behalf Swedish Agency Marine Water Management, SMHI serves national data host oceanography marine biology designated UNESCO National Oceanographic Data Center (NODC). data can accessed via web interface API, demonstrated tutorial using SHARK4R.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_shark_data.html","id":"installation","dir":"Articles","previous_headings":"Getting Started","what":"Installation","title":"Retrieve Data From SHARK","text":"can install package GitHub using devtools package: Load SHARK4R library:","code":"# install.packages(\"devtools\") devtools::install_github(\"sharksmhi/SHARK4R\",                          dependencies = TRUE) library(SHARK4R)"},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_shark_data.html","id":"retrieve-data-table","dir":"Articles","previous_headings":"Retrieve Data Using SHARK4R","what":"Retrieve Data Table","title":"Retrieve Data From SHARK","text":"Data can retrieved filtering options available SHARK. see available filtering options, please refer get_shark_options information .","code":"# Retrieve chlorophyll data for April to June from 2019 to 2020 shark_data <- get_shark_data(fromYear = 2019,                               toYear = 2020,                              months = c(4, 5, 6),                               dataTypes = c(\"Chlorophyll\"),                              verbose = FALSE)  # Print data print(shark_data) ## # A tibble: 263 × 72 ##    delivery_datatype check_status_sv data_checked_by_sv visit_year visit_month ##    <chr>             <chr>           <chr>                   <dbl>       <dbl> ##  1 Chlorophyll       Klar            Leverantör               2020           6 ##  2 Chlorophyll       Klar            Leverantör               2020           6 ##  3 Chlorophyll       Klar            Leverantör               2020           6 ##  4 Chlorophyll       Klar            Leverantör               2020           6 ##  5 Chlorophyll       Klar            Leverantör               2020           6 ##  6 Chlorophyll       Klar            Leverantör               2020           6 ##  7 Chlorophyll       Klar            Leverantör               2020           6 ##  8 Chlorophyll       Klar            Leverantör               2020           6 ##  9 Chlorophyll       Klar            Leverantör               2020           6 ## 10 Chlorophyll       Klar            Leverantör               2020           6 ## # ℹ 253 more rows ## # ℹ 67 more variables: station_name <chr>, reported_station_name <chr>, ## #   sample_location_id <dbl>, station_id <dbl>, sample_project_name_sv <chr>, ## #   sample_orderer_name_sv <chr>, visit_id <dbl>, visit_date <lgl>, ## #   shark_sample_id_md5 <chr>, sample_date <date>, sample_time <time>, ## #   sample_enddate <lgl>, sample_endtime <lgl>, sample_latitude_dm <chr>, ## #   sample_longitude_dm <chr>, sample_latitude_dd <dbl>, …"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_shark_data.html","id":"get-shark-api-options","dir":"Articles","previous_headings":"Retrieve Data Using SHARK4R","what":"Get SHARK API Options","title":"Retrieve Data From SHARK","text":"Filtering options, including data types, dataset names, stations, taxa, , can retrieved using get_shark_options function.","code":"# Retrieve available search options shark_options <- get_shark_options()  # List the names of the available options names(shark_options) ##  [1] \"datasets\"              \"dataTypes\"             \"parameters\"            ##  [4] \"minYear\"               \"maxYear\"               \"months\"                ##  [7] \"checkStatuses\"         \"qualityFlags\"          \"deliverers\"            ## [10] \"orderers\"              \"projects\"              \"redListedCategories\"   ## [13] \"taxa\"                  \"stations\"              \"seaAreas\"              ## [16] \"vattenDistrikt\"        \"typOmraden\"            \"seaBasins\"             ## [19] \"counties\"              \"municipalities\"        \"waterCategories\"       ## [22] \"helcomOspar\"           \"parametersForDatatype\" \"headerlangers\"         ## [25] \"minYearPerDatatype\" # View available datatypes dataTypes <- unlist(shark_options$dataTypes) print(dataTypes) ##  [1] \"Bacterioplankton\"      \"Chlorophyll\"           \"Epibenthos\"            ##  [4] \"Grey seal\"             \"Harbour Porpoise\"      \"Harbour seal\"          ##  [7] \"Jellyfish\"             \"Physical and Chemical\" \"Phytoplankton\"         ## [10] \"Picoplankton\"          \"PlanktonBarcoding\"     \"Primary production\"    ## [13] \"Profile\"               \"Ringed seal\"           \"Seal pathology\"        ## [16] \"Sedimentation\"         \"Zoobenthos\"            \"Zooplankton\""},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_shark_data.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"Retrieve Data From SHARK","text":"","code":"## To cite package 'SHARK4R' in publications use: ##  ##   Markus Lindh, Anders Torstensson (2024). SHARK4R: Retrieving, ##   Analyzing, and Validating Marine Data from SHARK and Nordic ##   Microalgae. R package version 0.1.4. ##   https://doi.org/10.5281/zenodo.14169399 ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {SHARK4R: Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae}, ##     author = {Markus Lindh and Anders Torstensson}, ##     year = {2024}, ##     note = {R package version 0.1.4}, ##     url = {https://doi.org/10.5281/zenodo.14169399}, ##   }"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_worms_data.html","id":"worms","dir":"Articles","previous_headings":"","what":"WoRMS","title":"Retrieve Taxonomic Data From WoRMS","text":"World Register Marine Species (WoRMS) comprehensive database providing authoritative lists marine organism names, managed taxonomic experts. combines data Aphia database sources like AlgaeBase FishBase, offering species names, higher classifications, additional data. WoRMS continuously updated maintained taxonomists. tutorial, source R package worrms access WoRMS data function.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_worms_data.html","id":"installation","dir":"Articles","previous_headings":"Getting Started","what":"Installation","title":"Retrieve Taxonomic Data From WoRMS","text":"can install package GitHub using devtools package: Load SHARK4R dplyr libraries:","code":"# install.packages(\"devtools\") devtools::install_github(\"sharksmhi/SHARK4R\",                          dependencies = TRUE) library(SHARK4R) library(dplyr) library(ggplot2)"},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_worms_data.html","id":"retrieve-phytoplankton-data-from-shark","dir":"Articles","previous_headings":"Retrieve Data Using SHARK4R","what":"Retrieve Phytoplankton Data From SHARK","title":"Retrieve Taxonomic Data From WoRMS","text":"Phytoplankton data, including scientific names AphiaIDs, downloaded SHARK. see download options, please visit Retrieve Data SHARK tutorial.","code":"# Retrieve all phytoplankton data from April 2015 shark_data <- get_shark_data(fromYear = 2015,                               toYear = 2015,                              months = 4,                               dataTypes = c(\"Phytoplankton\"),                              verbose = FALSE)"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_worms_data.html","id":"match-taxa-names","dir":"Articles","previous_headings":"Retrieve Data Using SHARK4R","what":"Match Taxa Names","title":"Retrieve Taxonomic Data From WoRMS","text":"Taxon names can matched WoRMS API retrieve Aphia IDs corresponding taxonomic information. get_worms_records_name function incorporates retry logic handle temporary failures, ensuring names processed successfully.","code":"# Find taxa without Aphia ID no_aphia_id <- shark_data %>%   filter(is.na(aphia_id))  # Randomly select taxa with missing aphia_id taxa_names <- sample(unique(no_aphia_id$scientific_name),                       size = 10,                      replace = TRUE)  # Match taxa names with WoRMS worms_records <- get_worms_records_name(unique(taxa_names),                                         fuzzy = TRUE,                                         best_match_only = TRUE,                                         marine_only = TRUE,                                         verbose = FALSE)  # Print result as tibble tibble(worms_records) ## # A tibble: 7 × 28 ##   name  status AphiaID url   scientificname authority unacceptreason taxonRankID ##   <chr> <chr>    <int> <chr> <chr>          <chr>     <chr>                <int> ## 1 Othe… no co…      NA NA    NA             NA        NA                      NA ## 2 Ulna… no co…      NA NA    NA             NA        NA                      NA ## 3 Unic… no co…      NA NA    NA             NA        NA                      NA ## 4 Dipl… accep…  109515 http… Diplopsalis    R.S.Berg… NA                     180 ## 5 Scri… accep…  109545 http… Scrippsiella   Balech e… NA                     180 ## 6 Pyra… accep…  886274 http… Pyramimonadop… Moestrup… NA                      60 ## 7 Chry… accep…  146230 http… Chrysophyceae  Pascher,… NA                      60 ## # ℹ 20 more variables: rank <chr>, valid_AphiaID <int>, valid_name <chr>, ## #   valid_authority <chr>, parentNameUsageID <int>, kingdom <chr>, ## #   phylum <chr>, class <chr>, order <chr>, family <chr>, genus <chr>, ## #   citation <chr>, lsid <chr>, isMarine <int>, isBrackish <int>, ## #   isFreshwater <int>, isTerrestrial <int>, isExtinct <lgl>, match_type <chr>, ## #   modified <chr>"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_worms_data.html","id":"get-worms-records-from-aphiaid","dir":"Articles","previous_headings":"Retrieve Data Using SHARK4R","what":"Get WoRMS records from AphiaID","title":"Retrieve Taxonomic Data From WoRMS","text":"Taxonomic records can also retrieved using Aphia IDs, employing retry error-handling logic get_worms_records_name function.","code":"# Randomly select ten Aphia IDs aphia_ids <- sample(unique(shark_data$aphia_id),                      size = 10)  # Remove NAs aphia_ids <- aphia_ids[!is.na(aphia_ids)]  # Retrieve records worms_records <- get_worms_records(aphia_ids,                                    verbose = FALSE)  # Print result as tibble tibble(worms_records) ## # A tibble: 10 × 27 ##    AphiaID url        scientificname authority status unacceptreason taxonRankID ##      <int> <chr>      <chr>          <chr>     <chr>  <lgl>                <int> ##  1  148917 https://w… Coscinodiscus  C.G. Ehr… accep… NA                     180 ##  2  495363 https://w… Tripos muelle… Bory de … accep… NA                     220 ##  3  163624 https://w… Pauliella tae… (Grunow)… unass… NA                     220 ##  4  148992 https://w… Coscinodiscus… W.Smith,… accep… NA                     220 ##  5  388485 https://w… Pseudopedinel… Sekiguch… accep… NA                     220 ##  6  109714 https://w… Alexandrium t… (Lebour)… accep… NA                     220 ##  7  232546 https://w… Akashiwo sang… (K.Hiras… accep… NA                     220 ##  8  110152 https://w… Heterocapsa r… (Lohmann… accep… NA                     220 ##  9  149648 https://w… Aulacoseira i… (O.Mülle… accep… NA                     220 ## 10  601744 https://w… Katablepharis  Skuja, 1… accep… NA                     180 ## # ℹ 20 more variables: rank <chr>, valid_AphiaID <int>, valid_name <chr>, ## #   valid_authority <chr>, parentNameUsageID <int>, kingdom <chr>, ## #   phylum <chr>, class <chr>, order <chr>, family <chr>, genus <chr>, ## #   citation <chr>, lsid <chr>, isMarine <int>, isBrackish <int>, ## #   isFreshwater <int>, isTerrestrial <int>, isExtinct <int>, match_type <chr>, ## #   modified <chr>"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_worms_data.html","id":"get-worms-taxonomy","dir":"Articles","previous_headings":"Retrieve Data Using SHARK4R","what":"Get WoRMS Taxonomy","title":"Retrieve Taxonomic Data From WoRMS","text":"SHARK sources taxonomic information Dyntaxa, reflected columns starting taxon_xxxxx. Equivalent columns based WoRMS can retrieved using add_worms_taxonomy function.","code":"# Retrieve taxonomic table worms_taxonomy <- add_worms_taxonomy(aphia_ids,                                      verbose = FALSE)  # Print result as tibble tibble(worms_taxonomy) ## # A tibble: 10 × 10 ##    aphia_id scientific_name   worms_kingdom worms_phylum worms_class worms_order ##       <dbl> <chr>             <chr>         <chr>        <chr>       <chr>       ##  1   148917 Coscinodiscus     Chromista     Heterokonto… Bacillario… Coscinodis… ##  2   495363 Tripos muelleri   Chromista     Myzozoa      Dinophyceae Gonyaulaca… ##  3   163624 Pauliella taenia… Chromista     Heterokonto… Bacillario… Lithodesmi… ##  4   148992 Coscinodiscus co… Chromista     Heterokonto… Bacillario… Coscinodis… ##  5   388485 Pseudopedinella … Chromista     Ochrophyta   Dictyochop… Pedinellal… ##  6   109714 Alexandrium tama… Chromista     Myzozoa      Dinophyceae Gonyaulaca… ##  7   232546 Akashiwo sanguin… Chromista     Myzozoa      Dinophyceae Gymnodinia… ##  8   110152 Heterocapsa rotu… Chromista     Myzozoa      Dinophyceae Peridinial… ##  9   149648 Aulacoseira isla… Chromista     Heterokonto… Bacillario… Aulacoseir… ## 10   601744 Katablepharis     Chromista     Cryptophyta  Cryptophyt… NA          ## # ℹ 4 more variables: worms_family <chr>, worms_genus <chr>, ## #   worms_species <chr>, worms_hierarchy <chr> # Enrich data with data from WoRMS shark_data_with_worms <- shark_data %>%   left_join(worms_taxonomy, by = c(\"aphia_id\", \"scientific_name\"))"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_worms_data.html","id":"assign-phytoplankton-groups","dir":"Articles","previous_headings":"Retrieve Data Using SHARK4R","what":"Assign Phytoplankton Groups","title":"Retrieve Taxonomic Data From WoRMS","text":"Phytoplankton data often categorized major groups Dinoflagellates, Diatoms, Cyanobacteria, Others. grouping can achieved referencing information WoRMS assigning taxa groups based taxonomic classification, demonstrated example .  can add custom plankton groups using custom_groups parameter, allowing flexibility categorize plankton based specific taxonomic criteria.","code":"# Subset a few national monitoring stations nat_stations <- shark_data %>%   filter(station_name %in% c(\"BY31 LANDSORTSDJ\",                              \"ANHOLT E\",                              \"NB1 / B3\"))  # Randomly select one sample from the nat_stations sample <- sample(nat_stations$shark_sample_id_md5, 1)  # Subset the random sample shark_data_subset <- shark_data %>%   filter(shark_sample_id_md5 == sample)  # Assign groups by providing both scientific name and Aphia ID plankton_groups <- assign_phytoplankton_group(shark_data_subset$scientific_name,                                               shark_data_subset$aphia_id,                                               verbose = FALSE)  # Print result tibble(distinct(plankton_groups)) ## # A tibble: 48 × 2 ##    scientific_name          plankton_group  ##    <chr>                    <chr>           ##  1 Akashiwo sanguinea       Dinoflagellates ##  2 Amphidinium              Dinoflagellates ##  3 Amphidinium sphenoides   Dinoflagellates ##  4 Aphanizomenon            Cyanobacteria   ##  5 Aphanocapsa              Cyanobacteria   ##  6 Attheya septentrionalis  Diatoms         ##  7 Cylindrotheca closterium Diatoms         ##  8 Chaetoceros danicus      Diatoms         ##  9 Chaetoceros similis      Diatoms         ## 10 Chaetoceros wighamii     Diatoms         ## # ℹ 38 more rows # Summarize abundance results based on plankton groups plankton_group_sum <- shark_data_subset %>%   mutate(plankton_group = plankton_groups$plankton_group) %>%   filter(parameter == \"Abundance\") %>%   group_by(plankton_group) %>%   summarise(sum_plankton_groups = sum(value, na.rm = TRUE))  # Plot a pie chart ggplot(plankton_group_sum, aes(x = \"\", y = sum_plankton_groups, fill = plankton_group)) +   geom_col(width = 1) +   coord_polar(theta = \"y\") +   labs(     title = \"Phytoplankton Groups\",     subtitle = paste(unique(shark_data_subset$station_name),                      unique(shark_data_subset$sample_date)),     fill = \"Plankton Group\"   ) +   theme_void() +   theme(plot.background = element_rect(fill = \"white\", color = NA)) # Define three custom plankton groups using a named list custom_groups <- list(    \"Cryptophytes\" = list(class = \"Cryptophyceae\"),    \"Green Algae\" = list(class = c(\"Trebouxiophyceae\",                                    \"Chlorophyceae\",                                    \"Pyramimonadophyceae\"),                         phylum = \"Chlorophyta\"),    \"Ciliates\" = list(phylum = \"Ciliophora\") )  # Assign groups by providing scientific name only, and adding custom groups plankton_groups <- assign_phytoplankton_group(shark_data_subset$scientific_name,                                               custom_groups = custom_groups,                                               verbose = FALSE)  # Summarize abundance results based on new plankton groups plankton_custom_group_sum <- shark_data_subset %>%   mutate(plankton_group = plankton_groups$plankton_group) %>%   filter(parameter == \"Abundance\") %>%   group_by(plankton_group) %>%   summarise(sum_plankton_groups = sum(value, na.rm = TRUE))  # Plot a new pie chart, including the custom groups ggplot(plankton_custom_group_sum, aes(x = \"\", y = sum_plankton_groups, fill = plankton_group)) +   geom_col(width = 1) +   coord_polar(theta = \"y\") +   labs(     title = \"Phytoplankton Custom Groups\",     subtitle = paste(unique(shark_data_subset$station_name),                      unique(shark_data_subset$sample_date)),     fill = \"Plankton Group\"   ) +   theme_void() +   theme(plot.background = element_rect(fill = \"white\", color = NA))"},{"path":"https://sharksmhi.github.io/SHARK4R/articles/retrieve_worms_data.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"Retrieve Taxonomic Data From WoRMS","text":"","code":"## To cite package 'SHARK4R' in publications use: ##  ##   Markus Lindh, Anders Torstensson (2024). SHARK4R: Retrieving, ##   Analyzing, and Validating Marine Data from SHARK and Nordic ##   Microalgae. R package version 0.1.4. ##   https://doi.org/10.5281/zenodo.14169399 ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {SHARK4R: Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae}, ##     author = {Markus Lindh and Anders Torstensson}, ##     year = {2024}, ##     note = {R package version 0.1.4}, ##     url = {https://doi.org/10.5281/zenodo.14169399}, ##   }"},{"path":"https://sharksmhi.github.io/SHARK4R/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Markus Lindh. Author.            Swedish Meteorological Hydrological Institute Anders Torstensson. Author, maintainer.            Swedish Meteorological Hydrological Institute SHARK. Copyright holder.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Markus Lindh, Anders Torstensson (2024). SHARK4R: Retrieving, Analyzing, Validating Marine Data SHARK Nordic Microalgae. R package version 0.1.4. https://doi.org/10.5281/zenodo.14169399","code":"@Manual{,   title = {SHARK4R: Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae},   author = {Markus Lindh and Anders Torstensson},   year = {2024},   note = {R package version 0.1.4},   url = {https://doi.org/10.5281/zenodo.14169399}, }"},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae","text":"R package equipped client application designed integration API functions. facilitates access various databases, including SHARK, SLU Artdatabanken (Dyntaxa), WoRMS, AlgaeBase Nordic Microalgae. package serves dual purpose, supporting data analysis automatic quality control physical, chemical, marine biological data. Developed SMHI, quality control functions modified https://iobis.github.io/obistools/","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae","text":"Installing SHARK4R requires devtools package:","code":"# install.packages(\"devtools\") devtools::install_github(\"sharksmhi/SHARK4R\", dependencies = TRUE)"},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/index.html","id":"website","dir":"","previous_headings":"Documentation and Tutorials","what":"Website","title":"Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae","text":"detailed information, please visit project’s webpage.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/index.html","id":"tutorials","dir":"","previous_headings":"Documentation and Tutorials","what":"Tutorials","title":"Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae","text":"Explore features capabilities SHARK4R tutorial: Retrieve Data SHARK Retrieve Data Dyntaxa Retrieve Data WoRMS Retrieve Data AlgaeBase Retrieve Data Nordic Microalgae Quality Control SHARK Data","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/index.html","id":"reference","dir":"","previous_headings":"Documentation and Tutorials","what":"Reference","title":"Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae","text":"detailed overview available SHARK4R functions, please visit reference section: Function Reference","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/index.html","id":"repository","dir":"","previous_headings":"","what":"Repository","title":"Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae","text":"details latest updates, visit GitHub repository.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae","text":"package licensed MIT License.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae","text":"Provoost P Bosch S (2018). “obistools: Tools data enhancement quality control.” Ocean Biogeographic Information System. Intergovernmental Oceanographic Commission UNESCO. https://iobis.github.io/obistools/.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/SHARK4R-package.html","id":null,"dir":"Reference","previous_headings":"","what":"SHARK4R: Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae — SHARK4R-package","title":"SHARK4R: Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae — SHARK4R-package","text":"R package data analysis, automatic quality control data retroeval physical, chemical marine biological data generated SHARK Nordic Microalgae, developed SMHI. Parts modified `obistools`. Provoost P Bosch S (2018). \"obistools: Tools data enhancement quality control.\" Ocean Biogeographic Information System. Intergovernmental Oceanographic Commission UNESCO. https://iobis.github.io/obistools/.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/SHARK4R-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SHARK4R: Retrieving, Analyzing, and Validating Marine Data from SHARK and Nordic Microalgae — SHARK4R-package","text":"Maintainer: Anders Torstensson anders.torstensson@smhi.se (ORCID) (Swedish Meteorological Hydrological Institute) Authors: Markus Lindh (ORCID) (Swedish Meteorological Hydrological Institute) contributors: SHARK shark@smhi.se [copyright holder]","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/add_worms_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve and Organize WoRMS Taxonomy for SHARK Aphia IDs — add_worms_taxonomy","title":"Retrieve and Organize WoRMS Taxonomy for SHARK Aphia IDs — add_worms_taxonomy","text":"function collects WoRMS (World Register Marine Species) taxonomy information given set Aphia IDs. data organized full taxonomic table can joined data downloaded SHARK.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/add_worms_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve and Organize WoRMS Taxonomy for SHARK Aphia IDs — add_worms_taxonomy","text":"","code":"add_worms_taxonomy(aphia_id, scientific_name = NULL, verbose = TRUE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/add_worms_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve and Organize WoRMS Taxonomy for SHARK Aphia IDs — add_worms_taxonomy","text":"aphia_id numeric vector containing Aphia IDs WoRMS taxonomy needs updated. scientific_name character vector scientific names. provided, Aphia IDs retrieved scientific names. length scientific_name must match length aphia_id. Defaults NULL, case function add taxonomy provided Aphia IDs. verbose logical indicating whether print progress messages. Default TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/add_worms_taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve and Organize WoRMS Taxonomy for SHARK Aphia IDs — add_worms_taxonomy","text":"data frame containing current WoRMS taxonomy information.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/add_worms_taxonomy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve and Organize WoRMS Taxonomy for SHARK Aphia IDs — add_worms_taxonomy","text":"","code":"if (FALSE) { # \\dontrun{ # Update WoRMS taxonomy for a set of Aphia IDs updated_taxonomy <- add_worms_taxonomy(c(149619, 149122, 11)) print(updated_taxonomy)  # Update WoRMS with an unknown Aphia ID and scientific names with_names <- add_worms_taxonomy(c(149619, 149122, 11, NA),                                  c(\"Cerataulina pelagica\",                                    \"Chaetoceros didymus\",                                    \"Ciliophora\",                                    \"Dinophysis\")) print(with_names) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/assign_phytoplankton_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign Phytoplankton Group to Scientific Names — assign_phytoplankton_group","title":"Assign Phytoplankton Group to Scientific Names — assign_phytoplankton_group","text":"function assigns default phytoplankton groups (Diatoms, Dinoflagellates, Cyanobacteria, ) list scientific names Aphia IDs retrieving species information World Register Marine Species (WoRMS). function checks Aphia IDs scientific names, handles missing records, assigns appropriate plankton group based taxonomic classification WoRMS. Additionally, custom plankton groups can specified using custom_groups parameter, allowing users define additional classifications based specific taxonomic criteria.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/assign_phytoplankton_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign Phytoplankton Group to Scientific Names — assign_phytoplankton_group","text":"","code":"assign_phytoplankton_group(   scientific_names,   aphia_ids = NULL,   diatom_class = c(\"Bacillariophyceae\", \"Coscinodiscophyceae\", \"Mediophyceae\",     \"Diatomophyceae\"),   dinoflagellate_class = \"Dinophyceae\",   cyanobacteria_class = \"Cyanophyceae\",   cyanobacteria_phylum = \"Cyanobacteria\",   match_first_word = TRUE,   marine_only = FALSE,   return_class = FALSE,   custom_groups = list(),   verbose = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/assign_phytoplankton_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign Phytoplankton Group to Scientific Names — assign_phytoplankton_group","text":"scientific_names character vector scientific names marine species. aphia_ids numeric vector Aphia IDs corresponding scientific names. provided, improves accuracy speed matching process. length aphia_ids must match length scientific_names. Defaults NULL, case function attempt assign plankton groups based scientific names. diatom_class character string vector representing diatom class. Default \"Bacillariophyceae\", \"Coscinodiscophyceae\" \"Mediophyceae\". dinoflagellate_class character string vector representing dinoflagellate class. Default \"Dinophyceae\". cyanobacteria_class character string vector representing cyanobacteria class. Default \"Cyanophyceae\". cyanobacteria_phylum character string vector representing cyanobacteria phylum. Default \"Cyanobacteria\". match_first_word logical value indicating whether match first word scientific name Aphia ID missing. Default TRUE. marine_only logical value indicating whether restrict results marine taxa . Default FALSE. return_class logical value indicating whether include class information result. Default FALSE. custom_groups named list additional custom plankton groups. names list correspond custom group names (e.g., \"Cryptophytes\") values character vectors specifying taxonomic classes, phyla, criteria used identify organisms group. example: list(\"Green Algae\" = list(class = c(\"Chlorophyceae\", \"Ulvophyceae\"))). allows users extend default classifications (e.g., Cyanobacteria, Diatoms, Dinoflagellates) groups. verbose logical value indicating whether print progress messages. Default TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/assign_phytoplankton_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign Phytoplankton Group to Scientific Names — assign_phytoplankton_group","text":"data frame two columns: scientific_name plankton_group, plankton group assigned based taxonomic classification.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/assign_phytoplankton_group.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign Phytoplankton Group to Scientific Names — assign_phytoplankton_group","text":"aphia_ids parameter necessary , provided, improve certainty matching process. aphia_ids available, used directly retrieve accurate WoRMS records. missing, function attempt match scientific names Aphia IDs querying WoRMS using scientific name(s), additional fallback mechanism match based first word scientific name. skip one default plankton groups, can set class phylum respective group empty string (\"\"). example, skip \"Cyanobacteria\" group, can set cyanobacteria_class = \"\" cyanobacteria_phylum = \"\". taxa placed Others.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/assign_phytoplankton_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign Phytoplankton Group to Scientific Names — assign_phytoplankton_group","text":"","code":"if (FALSE) { # \\dontrun{ # Assign plankton groups to a list of species result <- assign_phytoplankton_group(   scientific_names = c(\"Tripos fusus\", \"Diatoma\", \"Nodularia spumigena\", \"Octactis speculum\"),   aphia_ids = c(840626, 149013, 160566, NA))  print(result)  # Assign plankton groups using additional custom grouping custom_groups <- list(     Cryptophytes = list(class = \"Cryptophyceae\"),     Ciliates = list(phylum = \"Ciliophora\") )  # Assign with custom groups result_custom <- assign_phytoplankton_group(   scientific_names = c(\"Teleaulax amphioxeia\", \"Mesodinium rubrum\", \"Dinophysis acuta\"),   aphia_ids = c(106306, 232069, 109604),   custom_groups = custom_groups,         # Adding custom groups   verbose = TRUE )  print(result_custom) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Bacterioplankton.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Bacterioplankton","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Bacterioplankton","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Bacterioplankton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Bacterioplankton","text":"","code":"check_Bacterioplankton(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Bacterioplankton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Bacterioplankton","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Bacterioplankton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Bacterioplankton","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Chlorophyll.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Chlorophyll","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Chlorophyll","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Chlorophyll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Chlorophyll","text":"","code":"check_Chlorophyll(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Chlorophyll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Chlorophyll","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Chlorophyll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Chlorophyll","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Epibenthos.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Epibenthos","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Epibenthos","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Epibenthos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Epibenthos","text":"","code":"check_Epibenthos(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Epibenthos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Epibenthos","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Epibenthos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Epibenthos","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_EpibenthosDropvideo.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_EpibenthosDropvideo","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_EpibenthosDropvideo","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_EpibenthosDropvideo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_EpibenthosDropvideo","text":"","code":"check_EpibenthosDropvideo(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_EpibenthosDropvideo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_EpibenthosDropvideo","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_EpibenthosDropvideo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_EpibenthosDropvideo","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_GreySeal.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_GreySeal","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_GreySeal","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_GreySeal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_GreySeal","text":"","code":"check_GreySeal(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_GreySeal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_GreySeal","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_GreySeal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_GreySeal","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_HarbourPorpoise.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_HarbourPorpoise","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_HarbourPorpoise","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_HarbourPorpoise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_HarbourPorpoise","text":"","code":"check_HarbourPorpoise(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_HarbourPorpoise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_HarbourPorpoise","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_HarbourPorpoise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_HarbourPorpoise","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_HarbourSeal.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_HarbourSeal","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_HarbourSeal","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_HarbourSeal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_HarbourSeal","text":"","code":"check_HarbourSeal(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_HarbourSeal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_HarbourSeal","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_HarbourSeal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_HarbourSeal","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_PhysicalChemical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_PhysicalChemical","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_PhysicalChemical","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_PhysicalChemical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_PhysicalChemical","text":"","code":"check_PhysicalChemical(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_PhysicalChemical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_PhysicalChemical","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_PhysicalChemical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_PhysicalChemical","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Phytoplankton.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Phytoplankton","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Phytoplankton","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Phytoplankton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Phytoplankton","text":"","code":"check_Phytoplankton(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Phytoplankton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Phytoplankton","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Phytoplankton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Phytoplankton","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Picoplankton.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Picoplankton","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Picoplankton","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Picoplankton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Picoplankton","text":"","code":"check_Picoplankton(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Picoplankton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Picoplankton","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Picoplankton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Picoplankton","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_PrimaryProduction.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_PrimaryProduction","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_PrimaryProduction","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_PrimaryProduction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_PrimaryProduction","text":"","code":"check_PrimaryProduction(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_PrimaryProduction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_PrimaryProduction","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_PrimaryProduction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_PrimaryProduction","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_RingedSeal.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_RingedSeal","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_RingedSeal","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_RingedSeal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_RingedSeal","text":"","code":"check_RingedSeal(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_RingedSeal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_RingedSeal","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_RingedSeal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_RingedSeal","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_SealPathology.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_SealPathology","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_SealPathology","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_SealPathology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_SealPathology","text":"","code":"check_SealPathology(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_SealPathology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_SealPathology","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_SealPathology.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_SealPathology","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Sedimentation.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Sedimentation","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Sedimentation","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Sedimentation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Sedimentation","text":"","code":"check_Sedimentation(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Sedimentation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Sedimentation","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Sedimentation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Sedimentation","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Zoobenthos.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Zoobenthos","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Zoobenthos","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Zoobenthos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Zoobenthos","text":"","code":"check_Zoobenthos(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Zoobenthos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Zoobenthos","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Zoobenthos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Zoobenthos","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Zooplankton.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Zooplankton","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Zooplankton","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Zooplankton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Zooplankton","text":"","code":"check_Zooplankton(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Zooplankton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Zooplankton","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_Zooplankton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_Zooplankton","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_bacterial_carbon.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_carbon","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_carbon","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_bacterial_carbon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_carbon","text":"","code":"check_bacterial_carbon(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_bacterial_carbon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_carbon","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_bacterial_carbon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_carbon","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_bacterial_concentration.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_concentration","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_concentration","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_bacterial_concentration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_concentration","text":"","code":"check_bacterial_concentration(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_bacterial_concentration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_concentration","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_bacterial_concentration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_concentration","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_bacterial_production.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_production","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_production","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_bacterial_production.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_production","text":"","code":"check_bacterial_production(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_bacterial_production.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_production","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_bacterial_production.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_bacterial_production","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_chlorophyll_conc.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_chlorophyll_conc","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_chlorophyll_conc","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_chlorophyll_conc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_chlorophyll_conc","text":"","code":"check_chlorophyll_conc(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_chlorophyll_conc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_chlorophyll_conc","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_chlorophyll_conc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_chlorophyll_conc","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_code_proj.html","id":null,"dir":"Reference","previous_headings":"","what":"Check matches of reported project (PROJ) codes in SMHIs codelist — check_code_proj","title":"Check matches of reported project (PROJ) codes in SMHIs codelist — check_code_proj","text":"Check matches reported project (PROJ) codes SMHIs codelist","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_code_proj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check matches of reported project (PROJ) codes in SMHIs codelist — check_code_proj","text":"","code":"check_code_proj(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_code_proj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check matches of reported project (PROJ) codes in SMHIs codelist — check_code_proj","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_code_proj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check matches of reported project (PROJ) codes in SMHIs codelist — check_code_proj","text":"unmatched codes true false results","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_datatype.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended global and datatype-specific SHARK system fields (different between different datatypes) are present. — check_datatype","title":"Check if the required and recommended global and datatype-specific SHARK system fields (different between different datatypes) are present. — check_datatype","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_datatype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended global and datatype-specific SHARK system fields (different between different datatypes) are present. — check_datatype","text":"","code":"check_datatype(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_datatype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended global and datatype-specific SHARK system fields (different between different datatypes) are present. — check_datatype","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_datatype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended global and datatype-specific SHARK system fields (different between different datatypes) are present. — check_datatype","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Bacterioplankton.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended global and datatype-specific SHARK system fields (different between different datatypes) are present in intial deliveries of data (delivery validation). — check_deliv_Bacterioplankton","title":"Check if the required and recommended global and datatype-specific SHARK system fields (different between different datatypes) are present in intial deliveries of data (delivery validation). — check_deliv_Bacterioplankton","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Bacterioplankton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended global and datatype-specific SHARK system fields (different between different datatypes) are present in intial deliveries of data (delivery validation). — check_deliv_Bacterioplankton","text":"","code":"check_deliv_Bacterioplankton(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Bacterioplankton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended global and datatype-specific SHARK system fields (different between different datatypes) are present in intial deliveries of data (delivery validation). — check_deliv_Bacterioplankton","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Bacterioplankton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended global and datatype-specific SHARK system fields (different between different datatypes) are present in intial deliveries of data (delivery validation). — check_deliv_Bacterioplankton","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Chlorophyll.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Chlorophyll","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Chlorophyll","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Chlorophyll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Chlorophyll","text":"","code":"check_deliv_Chlorophyll(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Chlorophyll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Chlorophyll","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Chlorophyll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Chlorophyll","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Epibenthos.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Epibenthos","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Epibenthos","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Epibenthos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Epibenthos","text":"","code":"check_deliv_Epibenthos(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Epibenthos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Epibenthos","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Epibenthos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Epibenthos","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_EpibenthosDropvideo.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_EpibenthosDropvideo","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_EpibenthosDropvideo","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_EpibenthosDropvideo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_EpibenthosDropvideo","text":"","code":"check_deliv_EpibenthosDropvideo(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_EpibenthosDropvideo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_EpibenthosDropvideo","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_EpibenthosDropvideo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_EpibenthosDropvideo","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_GreySeal.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_GreySeal","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_GreySeal","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_GreySeal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_GreySeal","text":"","code":"check_deliv_GreySeal(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_GreySeal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_GreySeal","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_GreySeal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_GreySeal","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_HarbourPorpoise.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_HarbourPorpoise","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_HarbourPorpoise","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_HarbourPorpoise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_HarbourPorpoise","text":"","code":"check_deliv_HarbourPorpoise(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_HarbourPorpoise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_HarbourPorpoise","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_HarbourPorpoise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_HarbourPorpoise","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_HarbourSeal.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_HarbourSeal","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_HarbourSeal","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_HarbourSeal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_HarbourSeal","text":"","code":"check_deliv_HarbourSeal(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_HarbourSeal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_HarbourSeal","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_HarbourSeal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_HarbourSeal","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_PhysicalChemical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_PhysicalChemical","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_PhysicalChemical","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_PhysicalChemical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_PhysicalChemical","text":"","code":"check_deliv_PhysicalChemical(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_PhysicalChemical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_PhysicalChemical","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_PhysicalChemical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_PhysicalChemical","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Phytoplankton.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Phytoplankton","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Phytoplankton","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Phytoplankton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Phytoplankton","text":"","code":"check_deliv_Phytoplankton(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Phytoplankton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Phytoplankton","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Phytoplankton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Phytoplankton","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Picoplankton.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Picoplankton","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Picoplankton","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Picoplankton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Picoplankton","text":"","code":"check_deliv_Picoplankton(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Picoplankton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Picoplankton","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Picoplankton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Picoplankton","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_PrimaryProduction.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_PrimaryProduction","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_PrimaryProduction","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_PrimaryProduction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_PrimaryProduction","text":"","code":"check_deliv_PrimaryProduction(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_PrimaryProduction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_PrimaryProduction","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_PrimaryProduction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_PrimaryProduction","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_RingedSeal.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_RingedSeal","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_RingedSeal","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_RingedSeal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_RingedSeal","text":"","code":"check_deliv_RingedSeal(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_RingedSeal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_RingedSeal","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_RingedSeal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_RingedSeal","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_SealPathology.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_SealPathology","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_SealPathology","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_SealPathology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_SealPathology","text":"","code":"check_deliv_SealPathology(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_SealPathology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_SealPathology","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_SealPathology.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_SealPathology","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Sedimentation.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Sedimentation","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Sedimentation","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Sedimentation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Sedimentation","text":"","code":"check_deliv_Sedimentation(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Sedimentation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Sedimentation","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Sedimentation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Sedimentation","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Zoobenthos.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Zoobenthos","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Zoobenthos","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Zoobenthos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Zoobenthos","text":"","code":"check_deliv_Zoobenthos(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Zoobenthos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Zoobenthos","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Zoobenthos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Zoobenthos","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Zooplankton.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Zooplankton","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Zooplankton","text":"Missing empty required fields reported errors, missing empty recommended fields reported warnings.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Zooplankton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Zooplankton","text":"","code":"check_deliv_Zooplankton(data, level = \"error\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Zooplankton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Zooplankton","text":"data data frame. level level error reporting, .e. \"error\" \"warning\". Recommended fields checked case \"warning\".","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_deliv_Zooplankton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the required and recommended datatype-specific SHARK system fields (different between different datatypes) are present. — check_deliv_Zooplankton","text":"warnings errors.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_depth.html","id":null,"dir":"Reference","previous_headings":"","what":"Check which points have potentially invalid depths. — check_depth","title":"Check which points have potentially invalid depths. — check_depth","text":"Check points potentially invalid depths.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_depth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check which points have potentially invalid depths. — check_depth","text":"","code":"check_depth(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_depth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check which points have potentially invalid depths. — check_depth","text":"data data frame.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_depth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check which points have potentially invalid depths. — check_depth","text":"Problematic records errors report.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_abundclass_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_abundclass_logical","title":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_abundclass_logical","text":"Check logical assumptions data specific variables parameters","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_abundclass_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_abundclass_logical","text":"","code":"check_epibenthos_abundclass_logical(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_abundclass_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_abundclass_logical","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_abundclass_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_abundclass_logical","text":"logical test true false results","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_counted.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_counted","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_counted","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_counted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_counted","text":"","code":"check_epibenthos_counted(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_counted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_counted","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_counted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_counted","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_cover_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_cover_logical","title":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_cover_logical","text":"Check logical assumptions data specific variables parameters","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_cover_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_cover_logical","text":"","code":"check_epibenthos_cover_logical(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_cover_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_cover_logical","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_cover_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_cover_logical","text":"logical test true false results","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_coverclass_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_coverclass_logical","title":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_coverclass_logical","text":"Check logical assumptions data specific variables parameters","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_coverclass_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_coverclass_logical","text":"","code":"check_epibenthos_coverclass_logical(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_coverclass_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_coverclass_logical","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_coverclass_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_coverclass_logical","text":"logical test true false results","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_coverpercent_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_coverpercent_logical","title":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_coverpercent_logical","text":"Check logical assumptions data specific variables parameters","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_coverpercent_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_coverpercent_logical","text":"","code":"check_epibenthos_coverpercent_logical(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_coverpercent_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_coverpercent_logical","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_coverpercent_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_coverpercent_logical","text":"logical test true false results","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_dryweight.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_dryweight","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_dryweight","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_dryweight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_dryweight","text":"","code":"check_epibenthos_dryweight(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_dryweight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_dryweight","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_dryweight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_dryweight","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_sedimentdepos_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_sedimentdepos_logical","title":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_sedimentdepos_logical","text":"Check logical assumptions data specific variables parameters","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_sedimentdepos_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_sedimentdepos_logical","text":"","code":"check_epibenthos_sedimentdepos_logical(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_sedimentdepos_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_sedimentdepos_logical","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_sedimentdepos_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_sedimentdepos_logical","text":"logical test true false results","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_specdistr_maxdepth.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_specdistr_maxdepth","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_specdistr_maxdepth","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_specdistr_maxdepth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_specdistr_maxdepth","text":"","code":"check_epibenthos_specdistr_maxdepth(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_specdistr_maxdepth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_specdistr_maxdepth","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_specdistr_maxdepth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_specdistr_maxdepth","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_specdistr_mindepth.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_specdistr_mindepth","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_specdistr_mindepth","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_specdistr_mindepth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_specdistr_mindepth","text":"","code":"check_epibenthos_specdistr_mindepth(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_specdistr_mindepth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_specdistr_mindepth","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_specdistr_mindepth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_epibenthos_specdistr_mindepth","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_totcover_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_totcover_logical","title":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_totcover_logical","text":"Check logical assumptions data specific variables parameters","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_totcover_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_totcover_logical","text":"","code":"check_epibenthos_totcover_logical(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_totcover_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_totcover_logical","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_epibenthos_totcover_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check logical assumptions of data for specific variables and parameters — check_epibenthos_totcover_logical","text":"logical test true false results","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_greyseal_counted.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_greyseal_counted","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_greyseal_counted","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_greyseal_counted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_greyseal_counted","text":"","code":"check_greyseal_counted(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_greyseal_counted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_greyseal_counted","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_greyseal_counted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_greyseal_counted","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_harbourseal_counted.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_harbourseal_counted","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_harbourseal_counted","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_harbourseal_counted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_harbourseal_counted","text":"","code":"check_harbourseal_counted(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_harbourseal_counted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_harbourseal_counted","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_harbourseal_counted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_harbourseal_counted","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_harbporp_positivemin.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_harbporp_positivemin","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_harbporp_positivemin","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_harbporp_positivemin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_harbporp_positivemin","text":"","code":"check_harbporp_positivemin(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_harbporp_positivemin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_harbporp_positivemin","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_harbporp_positivemin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_harbporp_positivemin","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_onland.html","id":null,"dir":"Reference","previous_headings":"","what":"Check which points are located on land. — check_onland","title":"Check which points are located on land. — check_onland","text":"Check points located land.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_onland.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check which points are located on land. — check_onland","text":"","code":"check_onland(data, land = NULL, report = FALSE, buffer = 0, offline = FALSE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_onland.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check which points are located on land. — check_onland","text":"data data frame. land SpatialPolygonsDataFrame. provided simplified land polygons OSM used. parameter ignored , offline =   FALSE. report TRUE, errors returned instead records. buffer Set far inland points still deemed valid (meters). offline TRUE, local simplified shoreline used, otherwise OBIS webservice used. default value FALSE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_onland.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check which points are located on land. — check_onland","text":"Errors problematic records.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_onland.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check which points are located on land. — check_onland","text":"","code":"if (FALSE) { # \\dontrun{ report <- check_onland(abra, report = TRUE, buffer = 100) print(report) # plot records on land with 100 meter buffer plot_map_leaflet(abra[report$row,], popup = \"id\") # filter records not on land ok <- abra[-1 * report$row,] ok <- check_onland(abra, report = FALSE, buffer = 100) print(nrow(ok)) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_abund.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_abund","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_abund","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_abund.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_abund","text":"","code":"check_phytoplankton_abund(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_abund.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_abund","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_abund.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_abund","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_biovol.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_biovol","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_biovol","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_biovol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_biovol","text":"","code":"check_phytoplankton_biovol(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_biovol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_biovol","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_biovol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_biovol","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_carbon.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_carbon","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_carbon","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_carbon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_carbon","text":"","code":"check_phytoplankton_carbon(data)  check_phytoplankton_carbon(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_carbon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_carbon","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_phytoplankton_carbon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_phytoplankton_carbon","text":"tibble data outliers tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_abundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_abundance","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_abundance","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_abundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_abundance","text":"","code":"check_picoplankton_abundance(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_abundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_abundance","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_abundance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_abundance","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_biovol.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_biovol","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_biovol","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_biovol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_biovol","text":"","code":"check_picoplankton_biovol(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_biovol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_biovol","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_biovol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_biovol","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_carbon.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_carbon","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_carbon","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_carbon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_carbon","text":"","code":"check_picoplankton_carbon(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_carbon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_carbon","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_carbon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_carbon","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_counted.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_counted","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_counted","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_counted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_counted","text":"","code":"check_picoplankton_counted(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_counted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_counted","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_picoplankton_counted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_picoplankton_counted","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_primaryproduction_carbonprod.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprod","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprod","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_primaryproduction_carbonprod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprod","text":"","code":"check_primaryproduction_carbonprod(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_primaryproduction_carbonprod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprod","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_primaryproduction_carbonprod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprod","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_primaryproduction_carbonprod_hour.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprod_hour","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprod_hour","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_primaryproduction_carbonprod_hour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprod_hour","text":"","code":"check_primaryproduction_carbonprod_hour(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_primaryproduction_carbonprod_hour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprod_hour","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_primaryproduction_carbonprod_hour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprod_hour","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_primaryproduction_carbonprodlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprodlight","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprodlight","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_primaryproduction_carbonprodlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprodlight","text":"","code":"check_primaryproduction_carbonprodlight(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_primaryproduction_carbonprodlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprodlight","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_primaryproduction_carbonprodlight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_primaryproduction_carbonprodlight","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_ringedseal_calccounted.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_ringedseal_calccounted","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_ringedseal_calccounted","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_ringedseal_calccounted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_ringedseal_calccounted","text":"","code":"check_ringedseal_calccounted(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_ringedseal_calccounted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_ringedseal_calccounted","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_ringedseal_calccounted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_ringedseal_calccounted","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_station_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Station distance check using SMHI station list ","title":"Station distance check using SMHI station list ","text":"Station distance check using SMHI station list \"stations.txt\" (list synced \"Stationsregistret\": https://stationsregister.miljodatasamverkan.se/stationsregister/composer/) matches reported station name data curated station list checks within preset distance","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_station_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Station distance check using SMHI station list ","text":"","code":"check_station_distance(names)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_station_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Station distance check using SMHI station list ","text":"names Vector station names.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_station_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Station distance check using SMHI station list ","text":"Data frame station name logical value within/outside preset distance limits.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_value_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check logical assumptions of data for specific variables and parameters — check_value_logical","title":"Check logical assumptions of data for specific variables and parameters — check_value_logical","text":"Check logical assumptions data specific variables parameters","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_value_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check logical assumptions of data for specific variables and parameters — check_value_logical","text":"","code":"check_value_logical(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_value_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check logical assumptions of data for specific variables and parameters — check_value_logical","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_value_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check logical assumptions of data for specific variables and parameters — check_value_logical","text":"logical test true false results","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zero_positions.html","id":null,"dir":"Reference","previous_headings":"","what":"Check logical assumptions of data for station positions — check_zero_positions","title":"Check logical assumptions of data for station positions — check_zero_positions","text":"Check logical assumptions data station positions","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zero_positions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check logical assumptions of data for station positions — check_zero_positions","text":"","code":"check_zero_positions(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zero_positions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check logical assumptions of data for station positions — check_zero_positions","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zero_positions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check logical assumptions of data for station positions — check_zero_positions","text":"logical test true false results","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zero_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Check logical assumptions of data for specific variables and parameters — check_zero_value","title":"Check logical assumptions of data for specific variables and parameters — check_zero_value","text":"Check logical assumptions data specific variables parameters","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zero_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check logical assumptions of data for specific variables and parameters — check_zero_value","text":"","code":"check_zero_value(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zero_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check logical assumptions of data for specific variables and parameters — check_zero_value","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zero_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check logical assumptions of data for specific variables and parameters — check_zero_value","text":"logical test true false results","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_BQIm.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_BQIm","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_BQIm","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_BQIm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_BQIm","text":"","code":"check_zoobenthos_BQIm(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_BQIm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_BQIm","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_BQIm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_BQIm","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_BQIm_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check logical assumptions of data for specific variables and parameters — check_zoobenthos_BQIm_logical","title":"Check logical assumptions of data for specific variables and parameters — check_zoobenthos_BQIm_logical","text":"Check logical assumptions data specific variables parameters","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_BQIm_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check logical assumptions of data for specific variables and parameters — check_zoobenthos_BQIm_logical","text":"","code":"check_zoobenthos_BQIm_logical(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_BQIm_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check logical assumptions of data for specific variables and parameters — check_zoobenthos_BQIm_logical","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_BQIm_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check logical assumptions of data for specific variables and parameters — check_zoobenthos_BQIm_logical","text":"logical test true false results","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_abund.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_abund","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_abund","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_abund.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_abund","text":"","code":"check_zoobenthos_abund(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_abund.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_abund","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_abund.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_abund","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_counted.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_counted","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_counted","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_counted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_counted","text":"","code":"check_zoobenthos_counted(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_counted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_counted","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_counted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_counted","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_wetweight.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_wetweight","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_wetweight","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_wetweight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_wetweight","text":"","code":"check_zoobenthos_wetweight(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_wetweight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_wetweight","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_wetweight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zoobenthos_wetweight","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_wetweight_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check logical assumptions of data for specific variables and parameters — check_zoobenthos_wetweight_logical","title":"Check logical assumptions of data for specific variables and parameters — check_zoobenthos_wetweight_logical","text":"Check logical assumptions data specific variables parameters","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_wetweight_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check logical assumptions of data for specific variables and parameters — check_zoobenthos_wetweight_logical","text":"","code":"check_zoobenthos_wetweight_logical(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_wetweight_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check logical assumptions of data for specific variables and parameters — check_zoobenthos_wetweight_logical","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zoobenthos_wetweight_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check logical assumptions of data for specific variables and parameters — check_zoobenthos_wetweight_logical","text":"logical test true false results","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_abund.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_abund","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_abund","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_abund.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_abund","text":"","code":"check_zooplankton_abund(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_abund.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_abund","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_abund.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_abund","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_carbon.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_carbon","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_carbon","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_carbon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_carbon","text":"","code":"check_zooplankton_carbon(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_carbon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_carbon","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_carbon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_carbon","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_counted.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_counted","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_counted","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_counted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_counted","text":"","code":"check_zooplankton_counted(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_counted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_counted","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_counted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_counted","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_length_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_length_mean","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_length_mean","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_length_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_length_mean","text":"","code":"check_zooplankton_length_mean(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_length_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_length_mean","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_length_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_length_mean","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_length_median.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_length_median","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_length_median","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_length_median.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_length_median","text":"","code":"check_zooplankton_length_median(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_length_median.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_length_median","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_length_median.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_length_median","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_wetweight.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_wetweight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight","text":"","code":"check_zooplankton_wetweight(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_wetweight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_wetweight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_wetweight_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight_area","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight_area","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_wetweight_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight_area","text":"","code":"check_zooplankton_wetweight_area(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_wetweight_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight_area","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_wetweight_area.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight_area","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_wetweight_volume.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight_volume","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight_volume","text":"Uses data national marine monitoring last 5 years identify outliers Ranges IQR (interquantile range) specific parameters adapted datatype","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_wetweight_volume.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight_volume","text":"","code":"check_zooplankton_wetweight_volume(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_wetweight_volume.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight_volume","text":"data tibble checked","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/check_zooplankton_wetweight_volume.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses data from national marine monitoring for the last 5 years to identify outliers Ranges and IQR (interquantile range) for specific parameters is adapted to each datatype — check_zooplankton_wetweight_volume","text":"tibble data outliers","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/construct_dyntaxa_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct Dyntaxa taxonomy table from API — construct_dyntaxa_table","title":"Construct Dyntaxa taxonomy table from API — construct_dyntaxa_table","text":"function constructs taxonomy table based Dyntaxa parent taxon IDs. queries SLU Artdatabanken API (Dyntaxa) fetch taxonomy information organizes data hierarchical table.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/construct_dyntaxa_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct Dyntaxa taxonomy table from API — construct_dyntaxa_table","text":"","code":"construct_dyntaxa_table(   parent_ids,   subscription_key,   shark_output = TRUE,   recommended_only = TRUE,   add_genus_children = FALSE,   verbose = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/construct_dyntaxa_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct Dyntaxa taxonomy table from API — construct_dyntaxa_table","text":"parent_ids list containing parent taxon IDs taxonomy information requested. subscription_key character string containing subscription key accessing SLU Artdatabanken API. key provided registered users Artdatabanken. shark_output Logical. TRUE, function return selected column headers match SHARK output. FALSE, columns returned. Default TRUE. recommended_only Logical. TRUE, function return recommended (accepted) names. FALSE, names returned. Default TRUE. add_genus_children Logical. TRUE, output include children valid genera taxon_ids present parent_ids. Default FALSE. verbose Logical. Default TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/construct_dyntaxa_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct Dyntaxa taxonomy table from API — construct_dyntaxa_table","text":"data frame representing constructed taxonomy table.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/construct_dyntaxa_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct Dyntaxa taxonomy table from API — construct_dyntaxa_table","text":"Please read conditions register using API. Data collected API stored SLU Artdatabanken.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/construct_dyntaxa_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct Dyntaxa taxonomy table from API — construct_dyntaxa_table","text":"","code":"if (FALSE) { # \\dontrun{ # Construct Dyntaxa taxonomy table for taxon IDs 238366 and 1010380 parent_ids <- get_dyntaxa_parent_ids(c(238366, 1010380), \"your_subscription_key\") taxonomy_table <- construct_dyntaxa_table(parent_ids, \"your_subscription_key\") print(taxonomy_table) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Defunct functions — defunct","title":"Defunct functions — defunct","text":"functions deprecated made defunct. known replacement, calling function tell .","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defunct functions — defunct","text":"","code":"# Deprecated in 0.1.4 -------------------------------------  check_data_version(...)  update_data(...)  download_sharkdata(...)  load_dataset_names(...)  load_sharkdata(...)  load_dataset_types(...)  download_file(...)  year_filter(datasets, year)  data_deliverer_filter(datasets, data_deliverer)  read_data(temp, filtered_datasets, dataset_name)  validate_dataset_names(filtered_datasets, dataset_names)  load_dyntaxa_taxonomy(dyntaxa_id_input)  read_species_list(filename)  gather_species_info(shark_species_list)  add_species_info(shark_species_list, species)  load_worms_taxonomy(aphia_id_input)  gather_worms_species_info(taxa_worms)  add_worms_species_info(taxa_worms, species)  get_geographical_info(latitude_dd, longitude_dd)  filter_outdated_datasets(data, datasets_to_update)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/extract_algaebase_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract specific field from AlgaeBase query result — extract_algaebase_field","title":"Extract specific field from AlgaeBase query result — extract_algaebase_field","text":"helper function extracts specified field list object returned AlgaeBase query. requested field present, returns NA indicate missing data.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/extract_algaebase_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract specific field from AlgaeBase query result — extract_algaebase_field","text":"","code":"extract_algaebase_field(query_result, field_name)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/extract_algaebase_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract specific field from AlgaeBase query result — extract_algaebase_field","text":"query_result list object containing output AlgaeBase query. field_name character string specifying field name extract query result.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/extract_algaebase_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract specific field from AlgaeBase query result — extract_algaebase_field","text":"character vector containing values specified field, NA field found.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/extract_algaebase_field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract specific field from AlgaeBase query result — extract_algaebase_field","text":"","code":"# Example output from an AlgaeBase query query_result <- list(species = \"Skeletonema marinoi\", kingdom = \"Chromista\") field_value <- SHARK4R:::extract_algaebase_field(query_result, \"species\") print(field_value) #> [1] \"Skeletonema marinoi\""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/fill_na_below_first_non_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to fill NA values below the first non-NA value in a vector — fill_na_below_first_non_na","title":"Function to fill NA values below the first non-NA value in a vector — fill_na_below_first_non_na","text":"internal function fills NA values first non-NA value vector.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/fill_na_below_first_non_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to fill NA values below the first non-NA value in a vector — fill_na_below_first_non_na","text":"","code":"fill_na_below_first_non_na(x)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/fill_na_below_first_non_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to fill NA values below the first non-NA value in a vector — fill_na_below_first_non_na","text":"x vector.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/fill_na_below_first_non_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to fill NA values below the first non-NA value in a vector — fill_na_below_first_non_na","text":"vector NAs filled first non-NA value.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_algaebase_genus.html","id":null,"dir":"Reference","previous_headings":"","what":"Search AlgaeBase for Information About a Genus of Algae — get_algaebase_genus","title":"Search AlgaeBase for Information About a Genus of Algae — get_algaebase_genus","text":"function searches AlgaeBase API genus information returns detailed taxonomic data, including higher taxonomy, taxonomic status, scientific names, related metadata.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_algaebase_genus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search AlgaeBase for Information About a Genus of Algae — get_algaebase_genus","text":"","code":"get_algaebase_genus(   genus,   apikey,   higher = TRUE,   unparsed = FALSE,   newest_only = TRUE,   exact_matches_only = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_algaebase_genus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search AlgaeBase for Information About a Genus of Algae — get_algaebase_genus","text":"genus genus name search (character string). parameter required. apikey valid API key AlgaeBase (character string). required authenticate API requests. higher boolean flag indicating whether include higher taxonomy output (default TRUE). unparsed boolean flag indicating whether return raw JSON output API (default FALSE). newest_only boolean flag return recent entry (default TRUE). exact_matches_only boolean flag limit results exact matches (default TRUE).","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_algaebase_genus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search AlgaeBase for Information About a Genus of Algae — get_algaebase_genus","text":"data frame containing taxonomic data AlgaeBase. Columns may include: - id: AlgaeBase ID. - accepted_name: Accepted scientific name (different input). - input_name: genus name supplied user. - input_match: Whether genus exactly matches (1 exact, 0 ). - currently_accepted: Whether taxon currently accepted (1=TRUE, 0=FALSE). - genus_only: Whether search genus (1 genus, 0 genus + species). - kingdom, phylum, class, order, family: Higher taxonomy (higher TRUE). - taxonomic_status: Status taxon (currently accepted, synonym, unverified). - taxon_rank: taxonomic rank accepted name (e.g., genus, species). - mod_date: Date entry last modified. - long_name: Full scientific name including author date (available). - authorship: Author information (available).","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_algaebase_genus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search AlgaeBase for Information About a Genus of Algae — get_algaebase_genus","text":"","code":"if (FALSE) { # \\dontrun{   get_algaebase_genus(\"Anabaena\", apikey = \"your_api_key\") } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_algaebase_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Algaebase Species Search — get_algaebase_species","title":"Algaebase Species Search — get_algaebase_species","text":"function searches Algaebase API species based genus species names. allows flexible search parameters filtering exact matches, returning recent results, including higher taxonomy details.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_algaebase_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Algaebase Species Search — get_algaebase_species","text":"","code":"get_algaebase_species(   genus,   species,   apikey,   higher = TRUE,   unparsed = FALSE,   newest_only = TRUE,   exact_matches_only = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_algaebase_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Algaebase Species Search — get_algaebase_species","text":"genus character string specifying genus name. species character string specifying species specific epithet. apikey character string containing API key accessing Algaebase API. higher logical value indicating whether include higher taxonomy details (default TRUE). unparsed logical value indicating whether print full JSON response API (default FALSE). newest_only logical value indicating whether return recent entries (default TRUE). exact_matches_only logical value indicating whether return exact matches (default TRUE).","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_algaebase_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Algaebase Species Search — get_algaebase_species","text":"data frame details species, including taxonomic status, ranks, relevant information.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_algaebase_species.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Algaebase Species Search — get_algaebase_species","text":"function queries Algaebase API species based genus species names, filters results based various parameters. function handles different taxonomic ranks formats output easy use. can merge higher taxonomy data requested.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_algaebase_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Algaebase Species Search — get_algaebase_species","text":"","code":"if (FALSE) { # \\dontrun{ # Search for a species with exact matches only, return the most recent results result <- get_algaebase_species(   genus = \"Skeletonema\", species = \"marinoi\", apikey = \"your_api_key\" )  # Print result print(result) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_children_hierarchy.html","id":null,"dir":"Reference","previous_headings":"","what":"Get children hierarchies for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_hierarchy","title":"Get children hierarchies for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_hierarchy","text":"function queries SLU Artdatabanken API (Dyntaxa) retrieve children taxon hierarchy information specified taxon IDs. constructs request provided taxon IDs, sends request SLU Artdatabanken API, processes response return data frame taxon children.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_children_hierarchy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get children hierarchies for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_hierarchy","text":"","code":"get_dyntaxa_children_hierarchy(   taxon_ids,   subscription_key,   levels = 1,   main_children = TRUE,   verbose = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_children_hierarchy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get children hierarchies for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_hierarchy","text":"taxon_ids vector numeric taxon IDs children taxon IDs requested. subscription_key character string containing subscription key accessing SLU Artdatabanken API. key provided registered users Artdatabanken. levels Integer. Default 1 main_children Logical. Default TRUE. verbose Logical. Default TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_children_hierarchy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get children hierarchies for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_hierarchy","text":"data frame containing children taxon information corresponding specified taxon IDs.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_children_hierarchy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get children hierarchies for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_hierarchy","text":"Please read conditions register using API. Data collected API stored SLU Artdatabanken.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_children_hierarchy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get children hierarchies for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_hierarchy","text":"","code":"if (FALSE) { # \\dontrun{ # Get children taxon hierarchy for taxon IDs 1010608 and 5000062 children_hierarchy <- get_dyntaxa_children_hierarchy(c(1010608, 5000062), \"your_subscription_key\") print(children_hierarchy) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_children_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get children taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_ids","title":"Get children taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_ids","text":"function queries SLU Artdatabanken API (Dyntaxa) retrieve children taxon IDs specified taxon IDs. constructs request provided taxon IDs, sends request SLU Artdatabanken API, processes response return list children taxon IDs.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_children_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get children taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_ids","text":"","code":"get_dyntaxa_children_ids(   taxon_ids,   subscription_key,   main_children = TRUE,   verbose = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_children_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get children taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_ids","text":"taxon_ids vector numeric taxon IDs children taxon IDs requested. subscription_key character string containing subscription key accessing SLU Artdatabanken API. key provided registered users Artdatabanken. main_children Logical. Default TRUE. verbose Logical. Default TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_children_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get children taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_ids","text":"list containing children taxon IDs corresponding specified taxon IDs.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_children_ids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get children taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_ids","text":"Please read conditions register using API. Data collected API stored SLU Artdatabanken.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_children_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get children taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_children_ids","text":"","code":"if (FALSE) { # \\dontrun{ # Get children taxon IDs for taxon IDs 1010608 and 5000062 children_ids <- get_dyntaxa_children_ids(c(1010608, 5000062), \"your_subscription_key\") print(children_ids) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_parent_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get parent taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_parent_ids","title":"Get parent taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_parent_ids","text":"function queries SLU Artdatabanken API (Dyntaxa) retrieve parent taxon IDs specified taxon IDs. constructs request provided taxon IDs, sends request SLU Artdatabanken API, processes response return list parent taxon IDs.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_parent_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get parent taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_parent_ids","text":"","code":"get_dyntaxa_parent_ids(taxon_ids, subscription_key, verbose = TRUE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_parent_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get parent taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_parent_ids","text":"taxon_ids vector numeric taxon IDs parent taxon IDs requested. subscription_key character string containing subscription key accessing SLU Artdatabanken API. key provided registered users Artdatabanken. verbose Logical. Default TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_parent_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get parent taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_parent_ids","text":"list containing parent taxon IDs corresponding specified taxon IDs.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_parent_ids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get parent taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_parent_ids","text":"Please read conditions register using API. Data collected API stored SLU Artdatabanken.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_parent_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get parent taxon IDs for specified taxon IDs from SLU Artdatabanken API (Dyntaxa) — get_dyntaxa_parent_ids","text":"","code":"if (FALSE) { # \\dontrun{ # Get parent taxon IDs for taxon IDs 238366 and 1010380 parent_ids <- get_dyntaxa_parent_ids(c(238366, 1010380), \"your_subscription_key\") print(parent_ids) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_records.html","id":null,"dir":"Reference","previous_headings":"","what":"Get taxonomic information from SLU Artdatabanken API for specified taxon IDs — get_dyntaxa_records","title":"Get taxonomic information from SLU Artdatabanken API for specified taxon IDs — get_dyntaxa_records","text":"function queries SLU Artdatabanken API (Dyntaxa) retrieve taxonomic information specified taxon IDs. constructs request provided taxon IDs, sends request SLU Artdatabanken API, processes response return taxonomic information data frame.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get taxonomic information from SLU Artdatabanken API for specified taxon IDs — get_dyntaxa_records","text":"","code":"get_dyntaxa_records(taxon_ids, subscription_key)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_records.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get taxonomic information from SLU Artdatabanken API for specified taxon IDs — get_dyntaxa_records","text":"taxon_ids vector numeric taxon IDs (Dyntaxa ID) taxonomic information requested. subscription_key character string containing subscription key accessing SLU Artdatabanken API. key provided registered users Artdatabanken.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_records.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get taxonomic information from SLU Artdatabanken API for specified taxon IDs — get_dyntaxa_records","text":"data frame containing taxonomic information specified taxon IDs. Columns include taxonId, names, category, rank, isRecommended, parentTaxonId.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_records.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get taxonomic information from SLU Artdatabanken API for specified taxon IDs — get_dyntaxa_records","text":"Please read conditions register using API. Data collected API stored SLU Artdatabanken.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_dyntaxa_records.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get taxonomic information from SLU Artdatabanken API for specified taxon IDs — get_dyntaxa_records","text":"","code":"if (FALSE) { # \\dontrun{ # Get taxonomic information for taxon IDs 238366 and 1010380 taxon_info <- get_dyntaxa_records(c(238366, 1010380), \"your_subscription_key\") print(taxon_info) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_external_links.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve External Links or Facts for Taxa from Nordic Microalgae — get_nua_external_links","title":"Retrieve External Links or Facts for Taxa from Nordic Microalgae — get_nua_external_links","text":"function retrieves external links related algae taxa Nordic Microalgae API. takes vector slugs (taxon identifiers) returns data frame containing external links associated taxon. data includes provider, label, external ID, URL external link.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_external_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve External Links or Facts for Taxa from Nordic Microalgae — get_nua_external_links","text":"","code":"get_nua_external_links(slug, verbose = TRUE, unparsed = FALSE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_external_links.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve External Links or Facts for Taxa from Nordic Microalgae — get_nua_external_links","text":"slug vector taxon slugs (identifiers) retrieve external links. verbose logical flag indicating whether display progress bar. Default TRUE. unparsed Logical. TRUE, API response facts returned unparsed list. Default FALSE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_external_links.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve External Links or Facts for Taxa from Nordic Microalgae — get_nua_external_links","text":"unparsed = FALSE: data frame containing following columns: slug slug (identifier) taxon. provider provider external link. label label external link. external_id external ID associated external link. external_url URL external link. collection collection category, \"External Links\" rows.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_external_links.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve External Links or Facts for Taxa from Nordic Microalgae — get_nua_external_links","text":"slugs (taxon identifiers) used function can retrieved using get_nua_taxa() function, returns data frame column taxon slugs, along relevant metadata taxon.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_external_links.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve External Links or Facts for Taxa from Nordic Microalgae — get_nua_external_links","text":"","code":"if (FALSE) { # \\dontrun{   # Retrieve external links for a vector of slugs   external_links <- get_nua_external_links(slug = c(\"chaetoceros-debilis\", \"alexandrium-tamarense\"))   head(external_links) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_harmfulness.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Harmfulness for Taxa from Nordic Microalgae — get_nua_harmfulness","title":"Retrieve Harmfulness for Taxa from Nordic Microalgae — get_nua_harmfulness","text":"function retrieves harmfulness information related algae taxa Nordic Microalgae API. takes vector slugs (taxon identifiers) returns data frame containing harmfulness information associated taxon. data includes provider, label, external ID, URL external link.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_harmfulness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Harmfulness for Taxa from Nordic Microalgae — get_nua_harmfulness","text":"","code":"get_nua_harmfulness(slug, verbose = TRUE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_harmfulness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Harmfulness for Taxa from Nordic Microalgae — get_nua_harmfulness","text":"slug vector taxon slugs (identifiers) retrieve external links. verbose logical flag indicating whether display progress bar. Default TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_harmfulness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Harmfulness for Taxa from Nordic Microalgae — get_nua_harmfulness","text":"data frame containing following columns: slug slug (identifier) taxon. provider provider external link. label label external link. external_id external ID associated external link. external_url URL external link. collection collection category, \"Harmful algae blooms\" rows.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_harmfulness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve Harmfulness for Taxa from Nordic Microalgae — get_nua_harmfulness","text":"slugs (taxon identifiers) used function can retrieved using get_nua_taxa() function, returns data frame column taxon slugs, along relevant metadata taxon.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_harmfulness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Harmfulness for Taxa from Nordic Microalgae — get_nua_harmfulness","text":"","code":"if (FALSE) { # \\dontrun{   # Retrieve external links for a vector of slugs   harmfulness <- get_nua_harmfulness(slug = c(\"dinophysis-acuta\",                                               \"alexandrium-ostenfeldii\"))   print(harmfulness) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_media_links.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve and Extract Media URLs from Nordic Microalgae — get_nua_media_links","title":"Retrieve and Extract Media URLs from Nordic Microalgae — get_nua_media_links","text":"function retrieves media information Nordic Microalgae API extracts slugs URLs different renditions (large, original, small, medium) media item.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_media_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve and Extract Media URLs from Nordic Microalgae — get_nua_media_links","text":"","code":"get_nua_media_links(unparsed = FALSE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_media_links.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve and Extract Media URLs from Nordic Microalgae — get_nua_media_links","text":"unparsed Logical. TRUE, complete API response returned unparsed list. Default FALSE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_media_links.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve and Extract Media URLs from Nordic Microalgae — get_nua_media_links","text":"unparsed = FALSE: data frame following columns: slug: slug related taxon. l_url: URL \"large\" rendition. o_url: URL \"original\" rendition. s_url: URL \"small\" rendition. m_url: URL \"medium\" rendition.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_media_links.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve and Extract Media URLs from Nordic Microalgae — get_nua_media_links","text":"","code":"if (FALSE) { # \\dontrun{ # Retrieve media information media_info <- get_nua_media_links(unparsed = FALSE)  # Preview the extracted data head(media_info) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_taxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Taxa Information from Nordic Microalgae — get_nua_taxa","title":"Retrieve Taxa Information from Nordic Microalgae — get_nua_taxa","text":"function retrieves taxonomic information algae taxa Nordic Microalgae API. fetches details including scientific names, authorities, ranks, image URLs (different sizes: large, medium, original, small).","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_taxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Taxa Information from Nordic Microalgae — get_nua_taxa","text":"","code":"get_nua_taxa(unparsed = FALSE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_taxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Taxa Information from Nordic Microalgae — get_nua_taxa","text":"unparsed Logical. TRUE, complete API response returned unparsed list. Default FALSE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_taxa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Taxa Information from Nordic Microalgae — get_nua_taxa","text":"unparsed = FALSE: data frame containing following columns: slug unique identifier taxon. scientific_name scientific name taxon. authority authority associated scientific name. rank taxonomic rank taxon.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_nua_taxa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Taxa Information from Nordic Microalgae — get_nua_taxa","text":"","code":"if (FALSE) { # \\dontrun{   # Retrieve and display taxa data   taxa_data <- get_nua_taxa(unparsed = FALSE)   head(taxa_data) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Data from SHARK API — get_shark_data","title":"Retrieve Data from SHARK API — get_shark_data","text":"get_shark_data function retrieves data SHARK database hosted SMHI. function sends POST request SHARK API customizable filters, including year, month, taxon name, water category, , returns retrieved data structured data.frame. view available filter options, see get_shark_options.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Data from SHARK API — get_shark_data","text":"","code":"get_shark_data(   tableView = \"sharkweb_overview\",   headerLang = \"internal_key\",   save_data = FALSE,   file_path = NULL,   delimiters = \"point-tab\",   lineEnd = \"win\",   encoding = \"utf_8\",   dataTypes = c(),   fromYear = 2019,   toYear = 2020,   months = c(),   parameters = c(),   checkStatus = \"\",   qualityFlags = c(),   deliverers = c(),   orderers = c(),   projects = c(),   datasets = c(),   minSamplingDepth = \"\",   maxSamplingDepth = \"\",   redListedCategory = c(),   taxonName = c(),   stationName = c(),   vattenDistrikt = c(),   seaBasins = c(),   counties = c(),   municipalities = c(),   waterCategories = c(),   typOmraden = c(),   helcomOspar = c(),   seaAreas = c(),   hideEmptyColumns = FALSE,   prod = TRUE,   verbose = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Data from SHARK API — get_shark_data","text":"tableView Character. Specifies columns table retrieve. Options include: \"sharkweb_overview\": Overview table \"sharkweb_all\": available columns \"sharkdata_bacterioplankton\": Bacterioplankton table \"sharkdata_chlorophyll\": Chlorophyll table \"sharkdata_epibenthos\": Epibenthos table \"sharkdata_greyseal\": Greyseal table \"sharkdata_harbourporpoise\": Harbour porpoise table \"sharkdata_harbourseal: Harbour seal table \"sharkdata_jellyfish\": Jellyfish table \"sharkdata_physicalchemical_columns\": Physical chemical table \"sharkdata_phytoplankton\": Phytoplankton table \"sharkdata_picoplankton\": Picoplankton table \"sharkdata_planktonbarcoding\": Planktonbarcoding table \"sharkdata_primaryproduction\": Primary production table \"sharkdata_ringedseal\": Ringed seal table \"sharkdata_sealpathology\": Seal pathology table \"sharkdata_sedimentation\": Sedimentation table \"sharkdata_zoobenthos\": Zoobenthos table \"sharkdata_zooplankton\": Zooplankton table \"report_sum_year_param\": Report sum per year parameter \"report_sum_year_param_taxon\": Report sum per year, parameter taxon \"report_sampling_per_station\": Report sampling per station \"report_obs_taxon\": Report observed taxa \"report_stations\": Report stations \"report_taxon\": Report taxa Default \"sharkweb_overview\". headerLang Character. Language option column headers. Possible values: \"sv\": Swedish. \"en\": English. \"short\": Shortened version. \"internal_key\": Internal key (default). save_data Logical. TRUE, data saved specified file (see file_path). FALSE, temporary file created instead. file_path Character. file path data saved. Required save_data TRUE. Ignored save_data FALSE. delimiters Character. Specifies delimiter used separate values file, save_data TRUE. Options \"point-tab\" (tab-separated) \"point-semi\" (semicolon-separated). Default \"point-tab\". lineEnd Character. Defines type line endings file, save_data TRUE. Options \"win\" (Windows-style, \\r\\n) \"unix\" (Unix-style, \\n). Default \"win\". encoding Character. Sets file's text encoding, save_data TRUE. Options \"cp1252\", \"utf_8\", \"utf_16\", \"latin_1\". Default \"utf_8\". dataTypes Character vector. Specifies data types filter, \"Chlorophyll\", \"Epibenthos\", etc. fromYear Integer. Starting year data retrieval. Default 2019. toYear Integer. Ending year data retrieval. Default 2020. months Integer vector. months retrieve data , e.g., c(4, 5, 6) April June. parameters Character vector. Optional parameters filter results , \"Chlorophyll-\". checkStatus Character string. Optional status check filter results. qualityFlags Character vector. Quality flags filter data. deliverers Character vector. Specifies data deliverers filter . orderers Character vector. Orderers filter specific organizations individuals. projects Character vector. Projects filter data specific research monitoring projects. datasets Character vector. Datasets filter data specific datasets. minSamplingDepth Numeric. Minimum sampling depth (meters) filter data. maxSamplingDepth Numeric. Maximum sampling depth (meters) filter data. redListedCategory Character vector. Red-listed taxa conservation filtering. taxonName Character vector. Optional vector taxa names filter . stationName Character vector. Station names filter data specific stations. vattenDistrikt Character vector. Water district names filter Swedish water districts. seaBasins Character vector. Sea basins filter . counties Character vector. Counties filter specific administrative regions. municipalities Character vector. Municipalities filter . waterCategories Character vector. Water categories filter . typOmraden Character vector. Type areas filter . helcomOspar Character vector. HELCOM OSPAR areas regional filtering. seaAreas Character vector. Sea area codes filter specific sea areas. hideEmptyColumns Logical. Whether hide empty columns. Default FALSE. prod Logical. Whether query PROD (production) server TEST (testing) server. Default TRUE (PROD). verbose Logical. Whether display progress information. Default TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Data from SHARK API — get_shark_data","text":"data.frame containing retrieved SHARK data, column names based API's response.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve Data from SHARK API — get_shark_data","text":"function sends POST request SHARK API specified filters. response parsed JSON converted data.frame. function handles dynamic construction query body filter data based provided parameters.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Data from SHARK API — get_shark_data","text":"","code":"if (FALSE) { # \\dontrun{   # Retrieve chlorophyll data from 2019 to 2020 for April to June   shark_data <- get_shark_data(fromYear = 2019, toYear = 2020,                                months = c(4, 5, 6), dataTypes = c(\"Chlorophyll\"))   View(shark_data) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Available Search Options from SHARK API — get_shark_options","title":"Retrieve Available Search Options from SHARK API — get_shark_options","text":"get_shark_options function retrieves available search options SHARK database hosted SMHI. sends GET request SHARK API returns results structured data.frame.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Available Search Options from SHARK API — get_shark_options","text":"","code":"get_shark_options(prod = TRUE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Available Search Options from SHARK API — get_shark_options","text":"prod Logical. Query PROD TEST (SMHI internal) server. Default TRUE (PROD).","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Available Search Options from SHARK API — get_shark_options","text":"data.frame containing available search options SHARK API.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve Available Search Options from SHARK API — get_shark_options","text":"function sends GET request SHARK API options endpoint retrieve available search filters options querying database. API returns data JSON format, parsed data.frame.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Available Search Options from SHARK API — get_shark_options","text":"","code":"if (FALSE) { # \\dontrun{   # Retrieve available search options   shark_options <- get_shark_options()   View(shark_options)    # View available datatypes   dataTypes <- unlist(shark_options$dataTypes)   print(dataTypes) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve SHARK Table Data — get_shark_table","title":"Retrieve SHARK Table Data — get_shark_table","text":"function deprecated due inefficiency handling large datasets. Users encouraged use get_shark_data cases. However, get_shark_table function remains effective retrieving smaller datasets (< 10^5 rows) SHARK database hosted SMHI. functionality similar table view available https://shark.smhi.se/. larger requests, switch get_shark_data, explore available filter options, see get_shark_options.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve SHARK Table Data — get_shark_table","text":"","code":"get_shark_table(   tableView = \"sharkweb_overview\",   limit = 0,   headerLang = \"internal_key\",   fromYear = 2019,   toYear = 2020,   months = c(),   dataTypes = c(),   parameters = c(),   orderers = c(),   qualityFlags = c(),   deliverers = c(),   projects = c(),   datasets = c(),   minSamplingDepth = \"\",   maxSamplingDepth = \"\",   checkStatus = \"\",   redListedCategory = c(),   taxonName = c(),   stationName = c(),   vattenDistrikt = c(),   seaBasins = c(),   counties = c(),   municipalities = c(),   waterCategories = c(),   typOmraden = c(),   helcomOspar = c(),   seaAreas = c(),   prod = TRUE,   verbose = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve SHARK Table Data — get_shark_table","text":"tableView Character. Specifies view table retrieve. Options include: \"sharkweb_overview\"  \"sharkweb_all\"  \"sharkdata_bacterioplankton\"  \"sharkdata_chlorophyll\"  \"sharkdata_epibenthos\"  \"sharkdata_greyseal\"  \"sharkdata_harbourporpoise\"  \"sharkdata_harbourseal\"  \"sharkdata_jellyfish\"  \"sharkdata_physicalchemical_columns\"  \"sharkdata_phytoplankton\"  \"sharkdata_picoplankton\"  \"sharkdata_planktonbarcoding\"  \"sharkdata_primaryproduction\"  \"sharkdata_ringedseal\"  \"sharkdata_sealpathology\"  \"sharkdata_sedimentation\"  \"sharkdata_zoobenthos\"  \"sharkdata_zooplankton\"  \"report_sum_year_param\"  \"report_sum_year_param_taxon\"  \"report_sampling_per_station\"  \"report_obs_taxon\"  \"report_stations\"  \"report_taxon\"  Default \"sharkweb_overview\". limit Integer. Maximum number records retrieve per request. Default 0 (records). Maximum 10^5. headerLang Character. Language option column headers. Possible values: \"sv\": Swedish \"en\": English \"short\": Shortened version \"internal_key\": Internal key (default) fromYear Integer. starting year data retrieve. Default 2019. toYear Integer. ending year data retrieve. Default 2020. months Integer vector. months retrieve data , e.g., c(4, 5, 6) April June. dataTypes Character vector. Specifies data types filter, \"Chlorophyll\" \"Epibenthos\". parameters Character vector. Optional vector parameters filter results, \"Chlorophyll-\". orderers Character vector. Optional vector orderers filter data specific individuals organizations. qualityFlags Character vector. Optional vector quality flags filter data. deliverers Character vector. Optional vector deliverers filter data data providers. projects Character vector. Optional vector projects filter data specific research monitoring projects. datasets Character vector. Optional vector datasets filter data specific dataset names. minSamplingDepth Numeric. Optional minimum depth (meters) sampling data filter results. maxSamplingDepth Numeric. Optional maximum depth (meters) sampling data filter results. checkStatus Character string. Optional status check filter results. redListedCategory Character vector. Optional vector red-listed taxa conservation filtering. taxonName Character vector. Optional vector taxa names filtering specific species taxa. stationName Character vector. Optional vector station names retrieve data specific stations. vattenDistrikt Character vector. Optional vector water district names filter data Swedish water districts. seaBasins Character vector. Optional vector sea basin names filter data different sea areas. counties Character vector. Optional vector counties filter data within specific administrative regions Sweden. municipalities Character vector. Optional vector municipalities filter data within specific local administrative regions. waterCategories Character vector. Optional vector water categories filter . typOmraden Character vector. Optional vector type areas filter data specific areas. helcomOspar Character vector. Optional vector HELCOM OSPAR areas regional filtering. seaAreas Character vector. Optional vector sea area codes filtering specific sea areas prod Logical. Query PROD TEST (SMHI internal) server. Default TRUE (PROD).","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve SHARK Table Data — get_shark_table","text":"data.frame containing retrieved data, column names based API's headers. Columns filled NA rows differing lengths.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve SHARK Table Data — get_shark_table","text":"function constructs JSON body specified parameters sends POST request SHARK API. API returns data JSON format, parsed data.frame. rows differing lengths, rbind.fill fills missing columns NA.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve SHARK Table Data — get_shark_table","text":"","code":"if (FALSE) { # \\dontrun{   # Retrieve chlorophyll data for April to June from 2019 to 2020   shark_data <- get_shark_table(fromYear = 2019, toYear = 2020,                                 months = c(4, 5, 6), dataTypes = c(\"Chlorophyll\"))   View(shark_data) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_table_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve SHARK Data Table Row Counts — get_shark_table_counts","title":"Retrieve SHARK Data Table Row Counts — get_shark_table_counts","text":"get_shark_table_counts function retrieves row counts data records various SHARK data tables. view available filter options, see get_shark_options.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_table_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve SHARK Data Table Row Counts — get_shark_table_counts","text":"","code":"get_shark_table_counts(   tableView = \"sharkweb_overview\",   fromYear = 2019,   toYear = 2020,   months = c(),   dataTypes = c(),   parameters = c(),   orderers = c(),   qualityFlags = c(),   deliverers = c(),   projects = c(),   datasets = c(),   minSamplingDepth = \"\",   maxSamplingDepth = \"\",   checkStatus = \"\",   redListedCategory = c(),   taxonName = c(),   stationName = c(),   vattenDistrikt = c(),   seaBasins = c(),   counties = c(),   municipalities = c(),   waterCategories = c(),   typOmraden = c(),   helcomOspar = c(),   seaAreas = c(),   prod = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_table_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve SHARK Data Table Row Counts — get_shark_table_counts","text":"tableView Character. Specifies view table retrieve. Options include: \"sharkweb_overview\"  \"sharkweb_all\"  \"sharkdata_bacterioplankton\"  \"sharkdata_chlorophyll\"  \"sharkdata_epibenthos\"  \"sharkdata_greyseal\"  \"sharkdata_harbourporpoise\"  \"sharkdata_harbourseal\"  \"sharkdata_jellyfish\"  \"sharkdata_physicalchemical_columns\"  \"sharkdata_phytoplankton\"  \"sharkdata_picoplankton\"  \"sharkdata_planktonbarcoding\"  \"sharkdata_primaryproduction\"  \"sharkdata_ringedseal\"  \"sharkdata_sealpathology\"  \"sharkdata_sedimentation\"  \"sharkdata_zoobenthos\"  \"sharkdata_zooplankton\"  \"report_sum_year_param\"  \"report_sum_year_param_taxon\"  \"report_sampling_per_station\"  \"report_obs_taxon\"  \"report_stations\"  \"report_taxon\"  Default \"sharkweb_overview\". fromYear Integer. starting year data retrieve. Default 2019. toYear Integer. ending year data retrieve. Default 2020. months Integer vector. months retrieve data (e.g., c(4, 5, 6) April June). dataTypes Character vector. Specifies data types filter, \"Chlorophyll\" \"Epibenthos\". parameters Character vector. Optional. Parameters filter results, \"Chlorophyll-\". orderers Character vector. Optional. Orderers filter data specific organizations. qualityFlags Character vector. Optional. Quality flags filter data. deliverers Character vector. Optional. Deliverers filter data data providers. projects Character vector. Optional. Projects filter data specific research monitoring projects. datasets Character vector. Optional. Datasets filter data specific dataset names. minSamplingDepth Numeric. Optional. Minimum depth (meters) sampling data. maxSamplingDepth Numeric. Optional. Maximum depth (meters) sampling data. checkStatus Character string. Optional. Status check filter results. redListedCategory Character vector. Optional. Red-listed taxa conservation filtering. taxonName Character vector. Optional. Taxa names filtering specific species taxa. stationName Character vector. Optional. Station names retrieve data specific stations. vattenDistrikt Character vector. Optional. Water district names filter data Swedish water districts. seaBasins Character vector. Optional. Sea basin names filter data different sea areas. counties Character vector. Optional. Counties filter data within specific administrative regions Sweden. municipalities Character vector. Optional. Municipalities filter data within specific local regions. waterCategories Character vector. Optional. Water categories filter data . typOmraden Character vector. Optional. Type areas filter data specific areas. helcomOspar Character vector. Optional. HELCOM OSPAR areas regional filtering. seaAreas Character vector. Optional. Sea area codes filtering specific sea areas. prod Logical. Query PROD TEST (SMHI internal) server. Default TRUE (PROD).","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_shark_table_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve SHARK Data Table Row Counts — get_shark_table_counts","text":"","code":"if (FALSE) { # \\dontrun{   # Retrieve chlorophyll data for April to June from 2019 to 2020   shark_data_counts <- get_shark_table_counts(fromYear = 2019, toYear = 2020,                                               months = c(4, 5, 6), dataTypes = c(\"Chlorophyll\"))   print(shark_data_counts) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_worms_records.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve WoRMS Records — get_worms_records","title":"Retrieve WoRMS Records — get_worms_records","text":"function retrieves records WoRMS (World Register Marine Species) database using worrms R package given list Aphia IDs. retrieval fails, retries specified number times stopping.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_worms_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve WoRMS Records — get_worms_records","text":"","code":"get_worms_records(aphia_id, max_retries = 3, sleep_time = 10, verbose = TRUE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_worms_records.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve WoRMS Records — get_worms_records","text":"aphia_id vector Aphia IDs records retrieved. max_retries integer specifying maximum number retry attempts Aphia ID case failure. Default 3. sleep_time numeric value specifying time (seconds) wait retry attempts. Default 10 seconds. verbose logical indicating whether print progress messages. Default TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_worms_records.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve WoRMS Records — get_worms_records","text":"data frame containing retrieved WoRMS records provided Aphia IDs. row corresponds one Aphia ID.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_worms_records.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve WoRMS Records — get_worms_records","text":"function attempts fetch records Aphia ID provided vector. retrieval fails, retries specified max_retries, pause sleep_time seconds attempts. retries fail Aphia ID, function stops error message.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_worms_records.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve WoRMS Records — get_worms_records","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage with a vector of Aphia IDs aphia_ids <- c(12345, 67890, 112233) worms_records <- retrieve_worms_records(aphia_ids) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_worms_records_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve WoRMS Records by Taxonomic Names with Retry Logic — get_worms_records_name","title":"Retrieve WoRMS Records by Taxonomic Names with Retry Logic — get_worms_records_name","text":"function retrieves records WoRMS database using worrms R package vector taxonomic names. includes retry logic handle temporary failures ensures names processed.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_worms_records_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve WoRMS Records by Taxonomic Names with Retry Logic — get_worms_records_name","text":"","code":"get_worms_records_name(   taxa_names,   fuzzy = TRUE,   best_match_only = TRUE,   max_retries = 3,   sleep_time = 10,   marine_only = TRUE,   verbose = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_worms_records_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve WoRMS Records by Taxonomic Names with Retry Logic — get_worms_records_name","text":"taxa_names vector taxonomic names retrieve records. fuzzy logical value indicating whether search using fuzzy search pattern. Default TRUE. best_match_only logical value indicating whether automatically select first match return single match. Default TRUE. max_retries integer specifying maximum number retries request case failure. Default 3. sleep_time numeric value specifying number seconds wait retrying failed request. Default 10. marine_only logical value indicating whether restrict results marine taxa . Default FALSE. verbose logical indicating whether print progress messages. Default TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_worms_records_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve WoRMS Records by Taxonomic Names with Retry Logic — get_worms_records_name","text":"data frame containing retrieved WoRMS records. row corresponds record taxonomic name.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_worms_records_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve WoRMS Records by Taxonomic Names with Retry Logic — get_worms_records_name","text":"function attempts retrieve records input taxonomic names using wm_records_names function WoRMS API. request fails, retries max_retries times, pausing sleep_time seconds attempts. attempts fail, function stops throws error.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/get_worms_records_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve WoRMS Records by Taxonomic Names with Retry Logic — get_worms_records_name","text":"","code":"if (FALSE) { # \\dontrun{ # Retrieve WoRMS records for the taxonomic names \"Amphidinium\" and \"Karenia\" records <- retrieve_worms_records_name(c(\"Amphidinium\", \"Karenia\"),                                        max_retries = 3, sleep_time = 5, marine_only = TRUE) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/ifcb_is_near_land.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if Positions are Near Land — ifcb_is_near_land","title":"Determine if Positions are Near Land — ifcb_is_near_land","text":"Determines whether given positions near land based coastline shape file. Natural Earth 1:50m land vectors included default shapefile SHARK4R.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/ifcb_is_near_land.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if Positions are Near Land — ifcb_is_near_land","text":"","code":"ifcb_is_near_land(   latitudes,   longitudes,   distance = 500,   shape = NULL,   crs = 4326,   utm_zone = 33,   remove_small_islands = TRUE,   small_island_threshold = 2e+06 )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/ifcb_is_near_land.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if Positions are Near Land — ifcb_is_near_land","text":"latitudes Numeric vector latitudes positions. longitudes Numeric vector longitudes positions. distance Buffer distance meters around coastline. Default 500 m. shape Optional path shapefile containing coastline data. provided, function use shapefile instead default Natural Earth 1:50m land vectors. Using detailed shapefile allows smaller buffer distance. detailed European coastlines, download polygons EEA https://www.eea.europa.eu/data--maps/data/eea-coastline--analysis-2/gis-data/eea-coastline-polygon. detailed world maps, download Natural Earth https://www.naturalearthdata.com/downloads/10m-physical-vectors/. crs Coordinate reference system (CRS) use positions output. Default EPSG code 4326 (WGS84). utm_zone UTM zone buffering coastline. Default 33 (12°E 18°E, northern hemisphere). remove_small_islands Logical indicating whether remove small islands coastline custom shapefile provided. Default TRUE. small_island_threshold Area threshold square meters islands considered small removed, remove_small_islands set TRUE. Default 2 sqkm.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/ifcb_is_near_land.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if Positions are Near Land — ifcb_is_near_land","text":"Logical vector indicating whether position near land.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/ifcb_is_near_land.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine if Positions are Near Land — ifcb_is_near_land","text":"function calculates buffered area around coastline checks given positions (specified longitudes latitudes) within buffer intersect land. function re-exported iRfcb package available https://github.com/EuropeanIFCBGroup/iRfcb","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/ifcb_is_near_land.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if Positions are Near Land — ifcb_is_near_land","text":"","code":"# Define coordinates latitudes <- c(62.500353, 58.964498, 57.638725, 56.575338) longitudes <- c(17.845993, 20.394418, 18.284523, 16.227174)  # Call the function near_land <- ifcb_is_near_land(latitudes, longitudes, distance = 300, crs = 4326)  # Print the result print(near_land) #> [1] FALSE FALSE  TRUE FALSE"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/ifcb_which_basin.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","title":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","text":"function identifies sub-basin set latitude longitude points belong , using user-specified default shapefile. default shapefile includes Baltic Sea, Kattegat, Skagerrak basins included SHARK4R package.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/ifcb_which_basin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","text":"","code":"ifcb_which_basin(latitudes, longitudes, plot = FALSE, shape_file = NULL)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/ifcb_which_basin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","text":"latitudes numeric vector latitude points. longitudes numeric vector longitude points. plot boolean indicating whether plot points along sea basins. Default FALSE. shape_file absolute path custom polygon shapefile WGS84 (EPSG:4326) represents sea basin. Defaults Baltic Sea, Kattegat, Skagerrak basins included SHARK4R package.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/ifcb_which_basin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","text":"vector indicating basin point belongs , ggplot object plot = TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/ifcb_which_basin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","text":"function reads pre-packaged shapefile Baltic Sea, Kattegat, Skagerrak basins SHARK4R package default, user-supplied shapefile provided. shapefiles originate SHARK (https://sharkweb.smhi.se/hamta-data/). sets CRS, transforms CRS WGS84 (EPSG:4326) necessary, checks given points fall within specified sea basin. Optionally, plots points sea basin polygons together. function re-exported iRfcb package available https://github.com/EuropeanIFCBGroup/iRfcb","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/ifcb_which_basin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if Points are in a Specified Sea Basin — ifcb_which_basin","text":"","code":"# Define example latitude and longitude vectors latitudes <- c(55.337, 54.729, 56.311, 57.975) longitudes <- c(12.674, 14.643, 12.237, 10.637)  # Check in which Baltic sea basin the points are in points_in_the_baltic <- ifcb_which_basin(latitudes, longitudes) print(points_in_the_baltic) #> [1] \"13 - Arkona Basin\"   \"12 - Bornholm Basin\" \"16 - Kattegat\"       #> [4] \"17 - Skagerrak\"       # Plot the points and the basins ifcb_which_basin(latitudes, longitudes, plot = TRUE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/lookup_xy.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup spatial data for a set of points. — lookup_xy","title":"Lookup spatial data for a set of points. — lookup_xy","text":"Lookup spatial data set points.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/lookup_xy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup spatial data for a set of points. — lookup_xy","text":"","code":"lookup_xy(data, shoredistance=TRUE, grids=TRUE, areas=FALSE,   asdataframe=TRUE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/lookup_xy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup spatial data for a set of points. — lookup_xy","text":"data data frame columns sample_longitude_dd sample_latitude_dd. shoredistance Indicate whether shoredistance returned (default TRUE). grids Indicate whether grid values temperature bathymetry returned (default TRUE) areas Indicate whether area values returned distance meters provided points (default FALSE). asdataframe Indicate whether dataframe list returned (default TRUE).","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/lookup_xy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup spatial data for a set of points. — lookup_xy","text":"Data frame list values different requested fields.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/lookup_xy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lookup spatial data for a set of points. — lookup_xy","text":"asdataframe FALSE data returned order requested data list, list item requested values. invalid coordinates NULL returned. parameter areas positive integer areas within radius distance meters returned. value TRUE equivalent distance 0 meters, FALSE indicates area results required.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/lookup_xy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup spatial data for a set of points. — lookup_xy","text":"","code":"if (FALSE) { # \\dontrun{ lookup_xy(abra, shoredistance = TRUE, grids = TRUE, areas = FALSE) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_algaebase.html","id":null,"dir":"Reference","previous_headings":"","what":"Search Algaebase for Taxonomic Information — match_algaebase","title":"Search Algaebase for Taxonomic Information — match_algaebase","text":"function queries Algaebase API retrieve taxonomic information list algae names based genus (optionally) species. supports exact matching, genus-searches, retrieval higher taxonomic ranks.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_algaebase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search Algaebase for Taxonomic Information — match_algaebase","text":"","code":"match_algaebase(   genus,   species,   apikey = NULL,   genus_only = FALSE,   higher = TRUE,   unparsed = FALSE,   exact_matches_only = TRUE,   sleep_time = 1,   verbose = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_algaebase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search Algaebase for Taxonomic Information — match_algaebase","text":"genus character vector genus names. species character vector species names corresponding genus vector. Must length genus. apikey character string containing API key accessing Algaebase API. genus_only Logical. TRUE, searches based solely genus name, ignoring species. Defaults FALSE. higher Logical. TRUE, includes higher taxonomy (e.g., kingdom, phylum) output. Defaults TRUE. unparsed Logical. TRUE, returns raw JSON output instead R data frame. Defaults FALSE. exact_matches_only Logical. TRUE, restricts results exact matches. Defaults TRUE. sleep_time Numeric. delay (seconds) consecutive Algaebase API queries. Defaults 1. delay recommended avoid overwhelming API large queries. verbose Logical. TRUE, displays progress bar indicate query status. Defaults TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_algaebase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search Algaebase for Taxonomic Information — match_algaebase","text":"data frame containing taxonomic information input genus-species combination. Columns may include: id: Algaebase ID (available) kingdom, phylum, class, order, family: Higher taxonomy (higher = TRUE) genus, species, infrasp: Genus, species, infraspecies names (applicable) taxonomic_status: Status name (e.g., \"accepted\", \"synonym\", \"unverified\") currently_accepted: Logical indicator whether name currently accepted accepted_name: Currently accepted name different input name input_name: Name supplied user input_match: 1 exact matches, otherwise 0 taxon_rank: Taxonomic rank accepted name (e.g., \"genus\", \"species\") mod_date: Date entry last modified Algaebase long_name: Full species name authorship date authorship: Authors associated species name","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_algaebase.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search Algaebase for Taxonomic Information — match_algaebase","text":"Scientific names can parsed using parse_scientific_names() function processed match_algaebase(). Duplicate genus-species combinations handled efficiently querying unique combination . Genus-searches performed genus_only = TRUE species name missing invalid. Errors API queries gracefully handled returning rows NA values missing unavailable data. function allows integration data analysis workflows require resolving verifying taxonomic names Algaebase.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_algaebase.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search Algaebase for Taxonomic Information — match_algaebase","text":"","code":"if (FALSE) { # \\dontrun{ # Example with genus and species vectors genus_vec <- c(\"Thalassiosira\", \"Skeletonema\", \"Tripos\") species_vec <- c(\"pseudonana\", \"costatum\", \"furca\")  algaebase_results <- match_algaebase(   genus = genus_vec,   species = species_vec,   apikey = \"your_api_key\",   exact_matches_only = TRUE,   verbose = TRUE ) head(algaebase_results) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_dyntaxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxon matching using Dyntaxa (https://www.dyntaxa.se/) — match_dyntaxa","title":"Taxon matching using Dyntaxa (https://www.dyntaxa.se/) — match_dyntaxa","text":"function deprecated can now replaced using Dyntaxa API. Use match_taxon_name() instead. matches latin name data Dyntaxa taxon list","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_dyntaxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxon matching using Dyntaxa (https://www.dyntaxa.se/) — match_dyntaxa","text":"","code":"match_dyntaxa(names)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_dyntaxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxon matching using Dyntaxa (https://www.dyntaxa.se/) — match_dyntaxa","text":"names Vector scientific names.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_dyntaxa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taxon matching using Dyntaxa (https://www.dyntaxa.se/) — match_dyntaxa","text":"Data frame scientific name, scientific name ID match type.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_station.html","id":null,"dir":"Reference","previous_headings":"","what":"Station matching using SMHI station list ","title":"Station matching using SMHI station list ","text":"Station matching using SMHI station list \"stations.txt\" (list synced \"Stationsregistret\": https://stationsregister.miljodatasamverkan.se/stationsregister/composer/) matches reported station name data curated station list","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_station.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Station matching using SMHI station list ","text":"","code":"match_station(names)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_station.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Station matching using SMHI station list ","text":"names Vector station names.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_station.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Station matching using SMHI station list ","text":"Data frame station name match type.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_taxon_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Match Dyntaxa taxon names via API — match_taxon_name","title":"Match Dyntaxa taxon names via API — match_taxon_name","text":"function matches list taxon names SLU Artdatabanken API (Dyntaxa) retrieves best matches along taxon IDs.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_taxon_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match Dyntaxa taxon names via API — match_taxon_name","text":"","code":"match_taxon_name(   taxon_names,   subscription_key,   multiple_options = FALSE,   searchFields = \"Both\",   isRecommended = \"NotSet\",   isOkForObservationSystems = \"NotSet\",   culture = \"sv_SE\",   page = 1,   pageSize = 100,   verbose = TRUE )"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_taxon_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match Dyntaxa taxon names via API — match_taxon_name","text":"taxon_names vector taxon names match. subscription_key character string containing subscription key accessing SLU Artdatabanken API. key provided registered users Artdatabanken. multiple_options Logical. TRUE, function return multiple matching names. Default FALSE, selecting first match. searchFields character string indicating search fields. Defaults ''. isRecommended character string indicating whether taxon recommended. Defaults 'NotSet'. isOkForObservationSystems character string indicating whether taxon suitable observation systems. Defaults 'NotSet'. culture character string indicating culture. Defaults 'sv_SE'. page integer specifying page number pagination. Defaults 1. pageSize integer specifying page size pagination. Defaults 100. verbose Logical. Print progress bar. Default TRUE.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_taxon_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match Dyntaxa taxon names via API — match_taxon_name","text":"data frame containing search pattern, taxon ID, best match taxon name.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_taxon_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Match Dyntaxa taxon names via API — match_taxon_name","text":"Please read conditions register using API. Data collected API stored SLU Artdatabanken.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_taxon_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match Dyntaxa taxon names via API — match_taxon_name","text":"","code":"if (FALSE) { # \\dontrun{ # Match taxon names against SLU Artdatabanken API matched_taxa <- match_taxon_name(c(\"Homo sapiens\", \"Canis lupus\"), \"your_subscription_key\") print(matched_taxa) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_wormstaxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxon matching using WoRMS (http://www.marinespecies.org/) matches latin name in data with WoRMS taxon list — match_wormstaxa","title":"Taxon matching using WoRMS (http://www.marinespecies.org/) matches latin name in data with WoRMS taxon list — match_wormstaxa","text":"Taxon matching using WoRMS (http://www.marinespecies.org/) matches latin name data WoRMS taxon list","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_wormstaxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxon matching using WoRMS (http://www.marinespecies.org/) matches latin name in data with WoRMS taxon list — match_wormstaxa","text":"","code":"match_wormstaxa(names, ask = TRUE)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_wormstaxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxon matching using WoRMS (http://www.marinespecies.org/) matches latin name in data with WoRMS taxon list — match_wormstaxa","text":"names Vector scientific names. ask Ask user case multiple matches.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/match_wormstaxa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taxon matching using WoRMS (http://www.marinespecies.org/) matches latin name in data with WoRMS taxon list — match_wormstaxa","text":"Data frame scientific name, scientific name ID match type.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/nominal_station.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if stations are reported as nominal position or not Function makes an estimated guess whether stations are nominal — nominal_station","title":"Check if stations are reported as nominal position or not Function makes an estimated guess whether stations are nominal — nominal_station","text":"Check stations reported nominal position Function makes estimated guess whether stations nominal","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/nominal_station.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if stations are reported as nominal position or not Function makes an estimated guess whether stations are nominal — nominal_station","text":"","code":"nominal_station(data)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/nominal_station.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if stations are reported as nominal position or not Function makes an estimated guess whether stations are nominal — nominal_station","text":"data Data frame.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/nominal_station.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if stations are reported as nominal position or not Function makes an estimated guess whether stations are nominal — nominal_station","text":"Data frame station name latitude longitude positions.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/parse_scientific_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse scientific names into genus and species components. — parse_scientific_names","title":"Parse scientific names into genus and species components. — parse_scientific_names","text":"function processes character vector scientific names, splitting genus species components. handles binomial names (e.g., \"Homo sapiens\"), removes undesired descriptors (e.g., 'Cfr.', 'cf.', 'sp.', 'spp.'), manages cases involving varieties, subspecies, invalid species names. Special characters whitespace handled appropriately.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/parse_scientific_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse scientific names into genus and species components. — parse_scientific_names","text":"","code":"parse_scientific_names(scientific_name)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/parse_scientific_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse scientific names into genus and species components. — parse_scientific_names","text":"scientific_name character vector containing scientific names, may include binomials, additional descriptors, varieties.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/parse_scientific_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse scientific names into genus and species components. — parse_scientific_names","text":"data.frame two columns: genus: Contains genus names. species: Contains species names (empty unavailable invalid). Invalid descriptors like 'sp.', 'spp.', numeric entries excluded 'species' column.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/parse_scientific_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse scientific names into genus and species components. — parse_scientific_names","text":"","code":"# Example with a vector of scientific names scientific_names <- c(\"Skeletonema marinoi\", \"Cf. Azadinium perforatum\", \"Gymnodinium sp.\",                       \"Melosira varians\", \"Aulacoseira islandica var. subarctica\") result <- parse_scientific_names(scientific_names)  # Check the resulting data frame print(result) #>                                        genus              species #> Skeletonema marinoi              Skeletonema              marinoi #> Azadinium perforatum               Azadinium           perforatum #> Gymnodinium sp.                  Gymnodinium                      #> Melosira varians                    Melosira              varians #> Aulacoseira islandica subarctica Aulacoseira islandica subarctica"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/plot_map_leaflet.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Leaflet map. — plot_map_leaflet","title":"Create a Leaflet map. — plot_map_leaflet","text":"Create Leaflet map.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/plot_map_leaflet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Leaflet map. — plot_map_leaflet","text":"","code":"plot_map_leaflet(data, provider = \"Esri.OceanBasemap\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/plot_map_leaflet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Leaflet map. — plot_map_leaflet","text":"data data frame. provider Tile provider, see https://leaflet-extras.github.io/leaflet-providers/preview/. Default Esri.OceanBasemap.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/plot_map_leaflet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Leaflet map. — plot_map_leaflet","text":"HTML widget object.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/plot_map_leaflet_deliv.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Leaflet map. — plot_map_leaflet_deliv","title":"Create a Leaflet map. — plot_map_leaflet_deliv","text":"Create Leaflet map.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/plot_map_leaflet_deliv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Leaflet map. — plot_map_leaflet_deliv","text":"","code":"plot_map_leaflet_deliv(data, provider = \"Esri.OceanBasemap\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/plot_map_leaflet_deliv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Leaflet map. — plot_map_leaflet_deliv","text":"data data frame. provider Tile provider, see https://leaflet-extras.github.io/leaflet-providers/preview/. Default Esri.OceanBasemap.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/plot_map_leaflet_deliv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Leaflet map. — plot_map_leaflet_deliv","text":"HTML widget object.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/scatterplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatterplot of user-defined variables and parameters with x- and y-axes automatic selection Interactive plotly plot — scatterplot","title":"Scatterplot of user-defined variables and parameters with x- and y-axes automatic selection Interactive plotly plot — scatterplot","text":"Scatterplot user-defined variables parameters x- y-axes automatic selection Interactive plotly plot","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/scatterplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatterplot of user-defined variables and parameters with x- and y-axes automatic selection Interactive plotly plot — scatterplot","text":"","code":"scatterplot(data, ...)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/scatterplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatterplot of user-defined variables and parameters with x- and y-axes automatic selection Interactive plotly plot — scatterplot","text":"data tibble checked ... Additional parameters","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/scatterplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scatterplot of user-defined variables and parameters with x- and y-axes automatic selection Interactive plotly plot — scatterplot","text":"plotly plot","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read tab delimited files downloaded from SHARK Uses read_delim to read tab delimited files with standardized export format from SHARK — shark_read","title":"Read tab delimited files downloaded from SHARK Uses read_delim to read tab delimited files with standardized export format from SHARK — shark_read","text":"Read tab delimited files downloaded SHARK Uses read_delim read tab delimited files standardized export format SHARK","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read tab delimited files downloaded from SHARK Uses read_delim to read tab delimited files with standardized export format from SHARK — shark_read","text":"","code":"shark_read(filename, type = \"txt\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read tab delimited files downloaded from SHARK Uses read_delim to read tab delimited files with standardized export format from SHARK — shark_read","text":"filename Path file read type File extension. Default .txt.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read tab delimited files downloaded from SHARK Uses read_delim to read tab delimited files with standardized export format from SHARK — shark_read","text":"Data frame file","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read_deliv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read .xlsx files delivered to SHARK Uses readxl to read excel files with standardized delivery format — shark_read_deliv","title":"Read .xlsx files delivered to SHARK Uses readxl to read excel files with standardized delivery format — shark_read_deliv","text":"Read .xlsx files delivered SHARK Uses readxl read excel files standardized delivery format","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read_deliv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read .xlsx files delivered to SHARK Uses readxl to read excel files with standardized delivery format — shark_read_deliv","text":"","code":"shark_read_deliv(filename, skip = 2, sheet = 2)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read_deliv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read .xlsx files delivered to SHARK Uses readxl to read excel files with standardized delivery format — shark_read_deliv","text":"filename path file read skip Minimum number rows skip reading anything, column names data. Leading empty rows automatically skipped, lower bound. Ignored range given. Default 2. sheet Sheet read. Either string (name sheet), integer (position sheet). Ignored sheet specified via range. neither argument specifies sheet, defaults second sheet.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read_deliv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read .xlsx files delivered to SHARK Uses readxl to read excel files with standardized delivery format — shark_read_deliv","text":"Data frame file","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read_deliv_xls.html","id":null,"dir":"Reference","previous_headings":"","what":"Read .xls files delivered to SHARK Uses readxl to read excel files with standardized delivery format — shark_read_deliv_xls","title":"Read .xls files delivered to SHARK Uses readxl to read excel files with standardized delivery format — shark_read_deliv_xls","text":"Read .xls files delivered SHARK Uses readxl read excel files standardized delivery format","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read_deliv_xls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read .xls files delivered to SHARK Uses readxl to read excel files with standardized delivery format — shark_read_deliv_xls","text":"","code":"shark_read_deliv_xls(filename, skip = 2, sheet = 2)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read_deliv_xls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read .xls files delivered to SHARK Uses readxl to read excel files with standardized delivery format — shark_read_deliv_xls","text":"filename path file read skip Minimum number rows skip reading anything, column names data. Leading empty rows automatically skipped, lower bound. Ignored range given. Default 2. sheet Sheet read. Either string (name sheet), integer (position sheet). Ignored sheet specified via range. neither argument specifies sheet, defaults second sheet.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read_deliv_xls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read .xls files delivered to SHARK Uses readxl to read excel files with standardized delivery format — shark_read_deliv_xls","text":"Data frame file","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read_zip.html","id":null,"dir":"Reference","previous_headings":"","what":"Read zip archive and unzip tab delimited files downloaded from SHARK Uses unzip (unz) and read_delim to unzip archive and read tab delimited files with standardized export format from SHARK — shark_read_zip","title":"Read zip archive and unzip tab delimited files downloaded from SHARK Uses unzip (unz) and read_delim to unzip archive and read tab delimited files with standardized export format from SHARK — shark_read_zip","text":"Read zip archive unzip tab delimited files downloaded SHARK Uses unzip (unz) read_delim unzip archive read tab delimited files standardized export format SHARK","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read_zip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read zip archive and unzip tab delimited files downloaded from SHARK Uses unzip (unz) and read_delim to unzip archive and read tab delimited files with standardized export format from SHARK — shark_read_zip","text":"","code":"shark_read_zip(zipname, type = \"zip\")"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read_zip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read zip archive and unzip tab delimited files downloaded from SHARK Uses unzip (unz) and read_delim to unzip archive and read tab delimited files with standardized export format from SHARK — shark_read_zip","text":"zipname path file read type File extension. Default .zip.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/shark_read_zip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read zip archive and unzip tab delimited files downloaded from SHARK Uses unzip (unz) and read_delim to unzip archive and read tab delimited files with standardized export format from SHARK — shark_read_zip","text":"Data frame file","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/update_dyntaxa_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Update taxonomy from SHARK via SLU Artdatabanken API (Dyntaxa) — update_dyntaxa_taxonomy","title":"Update taxonomy from SHARK via SLU Artdatabanken API (Dyntaxa) — update_dyntaxa_taxonomy","text":"function updates Dyntaxa taxonomy records based list Dyntaxa taxon IDs. collects parent IDs SLU Artdatabanken API (Dyntaxa), retrieves full taxonomy records, organizes data full taxonomic table can joined data downloaded SHARK","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/update_dyntaxa_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update taxonomy from SHARK via SLU Artdatabanken API (Dyntaxa) — update_dyntaxa_taxonomy","text":"","code":"update_dyntaxa_taxonomy(dyntaxa_ids, subscription_key)"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/update_dyntaxa_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update taxonomy from SHARK via SLU Artdatabanken API (Dyntaxa) — update_dyntaxa_taxonomy","text":"dyntaxa_ids vector Dyntaxa taxon IDs update. subscription_key character string containing subscription key accessing SLU Artdatabanken API Dyntaxa. key provided registered users SLU Artdatabanken.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/update_dyntaxa_taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update taxonomy from SHARK via SLU Artdatabanken API (Dyntaxa) — update_dyntaxa_taxonomy","text":"data frame representing updated Dyntaxa taxonomy table.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/update_dyntaxa_taxonomy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update taxonomy from SHARK via SLU Artdatabanken API (Dyntaxa) — update_dyntaxa_taxonomy","text":"Please read conditions register using API. Data collected API stored SLU Artdatabanken.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/update_dyntaxa_taxonomy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update taxonomy from SHARK via SLU Artdatabanken API (Dyntaxa) — update_dyntaxa_taxonomy","text":"","code":"if (FALSE) { # \\dontrun{ # Update Dyntaxa taxonomy for taxon IDs 238366 and 1010380 updated_taxonomy <- update_dyntaxa_taxonomy(c(238366, 1010380), \"your_subscription_key\") print(updated_taxonomy) } # }"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/update_worms_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve and Organize WoRMS Taxonomy for SHARK Aphia IDs — update_worms_taxonomy","title":"Retrieve and Organize WoRMS Taxonomy for SHARK Aphia IDs — update_worms_taxonomy","text":"function deprecated replaced function accurate name. Use add_worms_taxonomy() instead. function collects WoRMS (World Register Marine Species) taxonomy information given set Aphia IDs. data organized full taxonomic table can joined data downloaded SHARK.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/update_worms_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve and Organize WoRMS Taxonomy for SHARK Aphia IDs — update_worms_taxonomy","text":"","code":"update_worms_taxonomy(aphia_id, aphiaid = deprecated())"},{"path":"https://sharksmhi.github.io/SHARK4R/reference/update_worms_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve and Organize WoRMS Taxonomy for SHARK Aphia IDs — update_worms_taxonomy","text":"aphia_id numeric vector containing Aphia IDs WoRMS taxonomy needs updated. aphiaid Use aphia_id instead.","code":""},{"path":"https://sharksmhi.github.io/SHARK4R/reference/update_worms_taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve and Organize WoRMS Taxonomy for SHARK Aphia IDs — update_worms_taxonomy","text":"data frame containing updated WoRMS taxonomy information.","code":""},{"path":[]},{"path":"https://sharksmhi.github.io/SHARK4R/reference/update_worms_taxonomy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve and Organize WoRMS Taxonomy for SHARK Aphia IDs — update_worms_taxonomy","text":"","code":"if (FALSE) { # \\dontrun{ # Update WoRMS taxonomy for a set of Aphia IDs updated_taxonomy <- update_worms_taxonomy(c(149619, 149122, 11)) print(updated_taxonomy) } # }"}]
